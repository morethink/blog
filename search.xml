<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python 豆瓣顶帖</title>
      <link href="/Python/douban-ding/"/>
      <url>/Python/douban-ding/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.morethink.cn/278d71ed0f07f6d1d72a8afa76039cc2.png" alt="" title="🆙🆙"></p><p>由于在豆瓣发了个租房帖子，发现很快就被其他的帖子淹没，但是手动顶帖实在太累，😭，所以想通过自动顶帖的方式来解放双手！</p><a id="more"></a><h1 id="评论请求分析"><a href="#评论请求分析" class="headerlink" title="评论请求分析"></a>评论请求分析</h1><p>通过Chrome network 分析</p><p><img src="https://images.morethink.cn/4220f35fed72284a44099dfcf27028d8.png" alt="" title="add_comment"></p><ul><li>评论url是<code>https://www.douban.com/group/topic/129122199/add_comment</code></li><li>需要带5个参数，其中 ck 是 cookie 里面的值，rv_comment 是 评论</li><li>返回302代表重定向</li></ul><p>Python 模拟请求：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 豆瓣具体帖子</span></span><br><span class="line">url = <span class="string">"https://www.douban.com/group/topic/129122199/"</span></span><br><span class="line"><span class="comment"># 豆瓣具体帖子回复的接口，格式是帖子链接+/add_comment</span></span><br><span class="line">comment_url = url + <span class="string">"/add_comment"</span></span><br><span class="line">cookie = <span class="string">'cookie'</span></span><br><span class="line">referer = url</span><br><span class="line">agent = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"www.douban.com"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: referer,</span><br><span class="line">    <span class="string">'User-Agent'</span>: agent,</span><br><span class="line">    <span class="string">"Cookie"</span>: cookie</span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">"rv_comment"</span>: <span class="string">'🆙'</span>,</span><br><span class="line">    <span class="string">"ck"</span>: re.findall(<span class="string">"ck=(.*?);"</span>, headers[<span class="string">"Cookie"</span>])[<span class="number">-1</span>],</span><br><span class="line">    <span class="string">'start'</span>: <span class="string">'0'</span>,</span><br><span class="line">    <span class="string">'submit_btn'</span>: <span class="string">'发送'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(comment_url, headers=headers, allow_redirects=<span class="keyword">False</span>,</span><br><span class="line">                         data=params, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>直接运行即可。</p><p>但是多运行几次就会发现，返回的状态码是200，而且没有顶帖成功。实际上是触发了豆瓣的防爬虫。</p><p><img src="https://images.morethink.cn/96695d5876d98ca99abc79866020a284.png" alt="" title="触发了豆瓣验证码"></p><p>而且在我们顶帖的时候发送请求的时候还带有 captcha-solution 和 captcha-id 字段。</p><p><img src="https://images.morethink.cn/8a57550867a8e02b3272d6043632f51b.png" alt=""></p><p>目前发现，每次评论就算相隔1分钟，只要满3次，就一定会弹出这个验证码进行验证。</p><h1 id="验证码解析"><a href="#验证码解析" class="headerlink" title="验证码解析"></a>验证码解析</h1><p>遇到验证码我们就来破解验证码。</p><h2 id="tesserocr"><a href="#tesserocr" class="headerlink" title="tesserocr"></a>tesserocr</h2><p>识别图形验证码需要安装tesserocr这个库，下面介绍下tesserocr。</p><p>tesserocr是Python的一个OCR识别库，但其实是对tesseract做了一层Python Api的封装，核心还是tesseract，所以在安装tesserocr之前，需要先安装tesseract。<code>Tesseract</code>(/‘tesərækt/) 这个词的意思是”超立方体”，指的是几何学里的四维标准方体，又称”正八胞体”，是一款被广泛使用的开源 <code>OCR</code> 工具。</p><p>在Mac下，使用 brew 安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install tesseract --all-languages</span><br></pre></td></tr></table></figure><p>接下来再安装tesserocr即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line">pip install tesserocr pillow</span><br></pre></td></tr></table></figure><p>Python 代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 新建Image对象</span></span><br><span class="line">    image = Image.open(<span class="string">"/Users/liwenhao/Desktop/douban-captcha-example1.jpeg"</span>)</span><br><span class="line">    <span class="comment"># 调用tesserocr的image_to_text()方法，传入image对象完成识别</span></span><br><span class="line">    result = tesserocr.image_to_text(image)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>验证的图片如下：</p><p><img src="https://images.morethink.cn/douban-captcha-example1.jpeg" alt="douban-captcha-example1" title="douban-captcha-example1"></p><p>结果无法识别。</p><p>换一张简单的图片试试：<br><img src="http://images.morethink.cn/captcha-example1.jpg" alt="captcha-example1.jpg"></p><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5594</span><br></pre></td></tr></table></figure></p><p>看来 Tesseract 只能识别一些简单的验证码，不适合豆瓣验证码识别。</p><p>试试识别验证码平台。</p><h2 id="百度OCR"><a href="#百度OCR" class="headerlink" title="百度OCR"></a>百度OCR</h2><p><strong>官方接入文档</strong>: <a href="https://link.juejin.im?target=https%3A%2F%2Fcloud.baidu.com%2Fdoc%2FOCR%2FOCR-Python-SDK.html%23.E5.BF.AB.E9.80.9F.E5.85.A5.E9.97.A8" target="_blank" rel="noopener">文字识别-Python SDK接入文档</a></p><ul><li><strong>重点：免费</strong>  </li><li>通用识别（包括身份证、银行卡）500次/日，  </li><li>高精度则50次/日，  </li><li>驾驶证，行驶证，车票，营业执照，通用票据均为200次/日  </li></ul><p>注意：<br><strong>支持2.7.+及3.+</strong></p><h3 id="配置流程："><a href="#配置流程：" class="headerlink" title="配置流程："></a>配置流程：</h3><ol><li>先开通个百度的账号；  </li><li>开通<strong>文字识别服务</strong>，打开后点击立即使用：<a href="https://cloud.baidu.com/product/ocr.html" target="_blank" rel="noopener">https://cloud.baidu.com/product/ocr.html</a>  </li><li>点击步骤2，应该有个信息确认的，确认后，会进入到用户个人首页，向下滑动，直接点击文字识别:<br><img src="https://user-gold-cdn.xitu.io/2018/6/11/163ecde99a94d224?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></li><li>点击创建应用，输入一堆内容后，点击确认即可，然后点击我的应用，这里面的<strong>API Key</strong> 跟<strong>Secret Key</strong>需要使用到: <img src="https://user-gold-cdn.xitu.io/2018/6/11/163ece17b329ea80?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></li><li><p>点击右上角，用户中心，用户ID也需要用到:<br><img src="https://user-gold-cdn.xitu.io/2018/6/11/163ece27d4bc3e76?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>需要的信息准备好了，<strong>pip</strong> 安装一波</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试一波"><a href="#测试一波" class="headerlink" title="测试一波"></a>测试一波</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    APP_ID = <span class="string">' '</span></span><br><span class="line">    API_KEY = <span class="string">' '</span></span><br><span class="line">    SECRET_KEY = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(file_path)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">return</span> fp.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    image = get_file_content(<span class="string">'/Users/liwenhao/Desktop/douban-captcha-example2.jpg'</span>)</span><br><span class="line">    <span class="string">""" 调用通用文字识别(高精度), 图片参数为本地图片 """</span></span><br><span class="line">    result = json.dumps(client.basicAccurate(image))</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>验证的图片如下：</p><p><img src="https://images.morethink.cn/douban-captcha-example1.jpeg" alt="douban-captcha-example1" title="douban-captcha-example1"></p><p>结果走一波：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;log_id&quot;: 3968431492157876638, &quot;words_result_num&quot;: 1, &quot;words_result&quot;: [&#123;&quot;words&quot;: &quot; minute:&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure><p>从结果可以看出识别出了这个验证码。</p><ul><li><code>words_result_num</code> 是识别结果数</li><li><code>words_result</code> 是定位和识别结果数组</li><li><code>words</code> 是识别结果字符串</li></ul><p>再来试试</p><p><img src="https://images.morethink.cn/douban-captcha-example2.jpg" alt="douban-captcha-example2" title="douban-captcha-example2"></p><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;log_id&quot;: 5251449865676063710, &quot;words_result_num&quot;: 0, &quot;words_result&quot;: []&#125;</span><br></pre></td></tr></table></figure></p><p>没有识别出来，可以看到对于复杂一些的验证码还是会出现无法识别的情况，但是胜在免费。</p><h2 id="超级鹰"><a href="#超级鹰" class="headerlink" title="超级鹰"></a>超级鹰</h2><p>对于无法识别的情况就需要打码平台了，业界比较出名的是 <a href="https://link.juejin.im?target=http%3A%2F%2Fwww.chaojiying.com%2F" target="_blank" rel="noopener">超级鹰</a> 。</p><p>超级鹰是按量级收费，量大便宜，标准价格:1元=1000题分，不同验证码类型，需要的题分不一样，详情可以到这里查询 <a href="http://www.chaojiying.com/price.html" target="_blank" rel="noopener">http://www.chaojiying.com/price.html</a></p><p>python 代码如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过超级鹰识别验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recognition_captcha</span><span class="params">(filename, code_type)</span>:</span></span><br><span class="line">    im = open(filename, <span class="string">'rb'</span>).read()</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'账号'</span>,</span><br><span class="line">        <span class="string">'pass2'</span>: md5(<span class="string">'密码'</span>.encode(<span class="string">'utf8'</span>)).hexdigest(),</span><br><span class="line">        <span class="string">'softid'</span>: <span class="string">'softid'</span>,</span><br><span class="line">        <span class="string">'codetype'</span>: code_type</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">    resp = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files,</span><br><span class="line">                         headers=headers).json()</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(json.dumps(recognition_captcha(<span class="string">'/Users/liwenhao/Desktop/douban-captcha-example2.jpg'</span>, <span class="number">1006</span>)))</span><br></pre></td></tr></table></figure></p><p>上传的验证码就是上面百度 OCR 未曾识别的验证码，如下：</p><p><img src="https://images.morethink.cn/douban-captcha-example2.jpg" alt="douban-captcha-example2" title="douban-captcha-example2"><br>结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;err_str&quot;: &quot;OK&quot;, &quot;err_no&quot;: 0, &quot;md5&quot;: &quot;0475b05654c376deb409bfef7eee75cd&quot;, &quot;pic_id&quot;: &quot;8054415552001300054&quot;, &quot;pic_str&quot;: &quot;yacvmd&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>发现 验证码 <code>yacvmd</code> 已出来。但是时间花了5s左右。后来测试发现对于豆瓣比较建的验证码花费的时间在1s内，因此从时间和准确性上面，最后还是采用了超级鹰打码平台。</p><h1 id="失败微信通知"><a href="#失败微信通知" class="headerlink" title="失败微信通知"></a>失败微信通知</h1><p>无论采用什么方式，都有可能出现失败的情况，我总不能采取 轮询 的方式，隔几个小时就去看看到底前面几次是否🆙成功，因此需要一个 异步通知 ，最开始想用 邮件，后来发现了 <a href="http://sc.ftqq.com/3.version" target="_blank" rel="noopener">Server酱</a> 这个神器，可以帮助我们发送微信通知，而且特别简单。</p><p>具体可以查看 <a href="http://sc.ftqq.com/3.version" target="_blank" rel="noopener">Server酱</a>。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s.%(msecs)03d %(levelname)s: %(message)s'</span>,</span><br><span class="line">                    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载验证码图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_captcha</span><span class="params">(captcha_url, agent)</span>:</span></span><br><span class="line">    <span class="comment"># findall返回的是一个列表</span></span><br><span class="line">    captcha_name = re.findall(<span class="string">"id=(.*?):"</span>, captcha_url)</span><br><span class="line">    filename = <span class="string">"douban_%s.jpg"</span> % (str(captcha_name[<span class="number">0</span>]))</span><br><span class="line">    logging.info(<span class="string">"文件名为: "</span> + filename)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 以二进制写入的模式在本地构建新文件</span></span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: agent,</span><br><span class="line">            <span class="string">'Referer'</span>: captcha_url</span><br><span class="line">        &#125;</span><br><span class="line">        f.write(requests.get(captcha_url, headers=header).content)</span><br><span class="line">        logging.info(<span class="string">"%s 下载完成"</span> % filename)</span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过超级鹰识别验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recognition_captcha</span><span class="params">(filename, code_type)</span>:</span></span><br><span class="line">    im = open(filename, <span class="string">'rb'</span>).read()</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'用户'</span>,</span><br><span class="line">        <span class="string">'pass2'</span>: md5(<span class="string">'密码'</span>.encode(<span class="string">'utf8'</span>)).hexdigest(),</span><br><span class="line">        <span class="string">'softid'</span>: <span class="string">'softid'</span>,</span><br><span class="line">        <span class="string">'codetype'</span>: code_type</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">    resp = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files,</span><br><span class="line">                         headers=headers).json()</span><br><span class="line">    <span class="comment"># 错误处理</span></span><br><span class="line">    <span class="keyword">if</span> resp.get(<span class="string">'err_no'</span>, <span class="number">0</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> resp.get(<span class="string">'pic_str'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result_verification</span><span class="params">(response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">302</span>:</span><br><span class="line">        logging.info(<span class="string">"豆瓣ding成功"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(response.status_code)</span><br><span class="line">        logging.info(response)</span><br><span class="line">        url = <span class="string">"https://sc.ftqq.com/你的SCKEY.send?text=douban失败"</span> + \</span><br><span class="line">              str(random.randint(<span class="number">0</span>, <span class="number">1000</span>))</span><br><span class="line">        requests.post(url)</span><br><span class="line">        logging.info(<span class="string">"豆瓣ding失败，发送失败信息到微信"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 豆瓣顶帖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">douban_ding</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 豆瓣具体帖子</span></span><br><span class="line">    url = <span class="string">"https://www.douban.com/group/topic/129122199/"</span></span><br><span class="line">    <span class="comment"># 豆瓣具体帖子回复的接口，格式是帖子链接+/add_comment</span></span><br><span class="line">    comment_url = url + <span class="string">"/add_comment"</span></span><br><span class="line">    cookie = <span class="string">'cookie'</span></span><br><span class="line">    referer = url</span><br><span class="line">    agent = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"www.douban.com"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: referer,</span><br><span class="line">        <span class="string">'User-Agent'</span>: agent,</span><br><span class="line">        <span class="string">"Cookie"</span>: cookie</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">"rv_comment"</span>: <span class="string">'🆙'</span>,</span><br><span class="line">        <span class="string">"ck"</span>: re.findall(<span class="string">"ck=(.*?);"</span>, headers[<span class="string">"Cookie"</span>])[<span class="number">-1</span>],</span><br><span class="line">        <span class="string">'start'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'submit_btn'</span>: <span class="string">'发送'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers, verify=<span class="keyword">False</span>).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    selector = html.fromstring(response)</span><br><span class="line">    captcha_image = selector.xpath(<span class="string">"//img[@id=\"captcha_image\"]/@src"</span>)</span><br><span class="line">    <span class="keyword">if</span> captcha_image:</span><br><span class="line">        logging.info(<span class="string">"发现验证码，下载验证码"</span>)</span><br><span class="line">        captcha_id = selector.xpath(<span class="string">"//input[@name=\"captcha-id\"]/@value"</span>)</span><br><span class="line">        filename = download_captcha(captcha_image[<span class="number">0</span>], agent)</span><br><span class="line">        captcha_solution = recognition_captcha(filename, <span class="number">1006</span>)</span><br><span class="line">        os.remove(filename)</span><br><span class="line">        params[<span class="string">'captcha-solution'</span>] = captcha_solution</span><br><span class="line">        params[<span class="string">'captcha-id'</span>] = captcha_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">"没有验证码"</span>)</span><br><span class="line">    response = requests.post(comment_url, headers=headers, allow_redirects=<span class="keyword">False</span>,</span><br><span class="line">                             data=params, verify=<span class="keyword">False</span>)</span><br><span class="line">    result_verification(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    douban_ding()</span><br></pre></td></tr></table></figure><p>运行结果：</p><ol><li><p>第1次：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-12-30 16:09:35.589 INFO: 没有验证码</span><br><span class="line">2018-12-30 16:09:36.436 INFO: 豆瓣ding成功</span><br></pre></td></tr></table></figure></li><li><p>第4次：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-12-30 16:13:02.135 INFO: 发现验证码，下载验证码</span><br><span class="line">2018-12-30 16:13:02.135 INFO: 文件名为: douban_OJGsVa0hST4O2WhFA0VpMnR9.jpg</span><br><span class="line">2018-12-30 16:13:02.554 INFO: douban_OJGsVa0hST4O2WhFA0VpMnR9.jpg 下载完成</span><br><span class="line">2018-12-30 16:13:09.687 INFO: 豆瓣ding成功</span><br></pre></td></tr></table></figure></li></ol><p>效果图：</p><p><img src="https://images.morethink.cn/b9eeaa536e309a201824eac764d11e33.png" alt=""></p><p>注：</p><ol><li>顶帖的时候控制好频率，不然容易被禁言。 <img src="https://images.morethink.cn/douban-ban.jpg" alt="" title="豆瓣禁言"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Netty接收HTTP文件上传及文件下载</title>
      <link href="/Netty%E6%8E%A5%E6%94%B6HTTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/Netty%E6%8E%A5%E6%94%B6HTTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>这个处理器的原理是接收HttpObject对象，按照HttpRequest，HttpContent来做处理，文件内容是在HttpContent消息带来的。</p><p>然后在HttpContent中一个chunk一个chunk读，chunk大小可以在初始化HttpServerCodec时设置。将每个chunk交个httpDecoder复制一份，当读到LastHttpContent对象时，表明上传结束，可以将httpDecoder中缓存的文件通过HttpDataFactory写到磁盘上，然后在删除缓存的HttpContent对象。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttUploadHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttUploadHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpDataFactory factory = <span class="keyword">new</span> DefaultHttpDataFactory(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_UPLOAD = <span class="string">"/data/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URI = <span class="string">"/upload"</span>;</span><br><span class="line">    <span class="keyword">private</span> HttpPostRequestDecoder httpDecoder;</span><br><span class="line">    HttpRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> HttpObject httpObject)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (httpObject <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line">            request = (HttpRequest) httpObject;</span><br><span class="line">            <span class="keyword">if</span> (request.uri().startsWith(URI) &amp;&amp; request.method().equals(HttpMethod.POST)) &#123;</span><br><span class="line">                httpDecoder = <span class="keyword">new</span> HttpPostRequestDecoder(factory, request);</span><br><span class="line">                httpDecoder.setDiscardThreshold(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//传递给下一个Handler</span></span><br><span class="line">                ctx.fireChannelRead(httpObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (httpObject <span class="keyword">instanceof</span> HttpContent) &#123;</span><br><span class="line">            <span class="keyword">if</span> (httpDecoder != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> HttpContent chunk = (HttpContent) httpObject;</span><br><span class="line">                httpDecoder.offer(chunk);</span><br><span class="line">                <span class="keyword">if</span> (chunk <span class="keyword">instanceof</span> LastHttpContent) &#123;</span><br><span class="line">                    writeChunk(ctx);</span><br><span class="line">                    <span class="comment">//关闭httpDecoder</span></span><br><span class="line">                    httpDecoder.destroy();</span><br><span class="line">                    httpDecoder = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ReferenceCountUtil.release(httpObject);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ctx.fireChannelRead(httpObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeChunk</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (httpDecoder.hasNext()) &#123;</span><br><span class="line">            InterfaceHttpData data = httpDecoder.next();</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; HttpDataType.FileUpload.equals(data.getHttpDataType())) &#123;</span><br><span class="line">                <span class="keyword">final</span> FileUpload fileUpload = (FileUpload) data;</span><br><span class="line">                <span class="keyword">final</span> File file = <span class="keyword">new</span> File(FILE_UPLOAD + fileUpload.getFilename());</span><br><span class="line">                log.info(<span class="string">"upload file: &#123;&#125;"</span>, file);</span><br><span class="line">                <span class="keyword">try</span> (FileChannel inputChannel = <span class="keyword">new</span> FileInputStream(fileUpload.getFile()).getChannel();</span><br><span class="line">                     FileChannel outputChannel = <span class="keyword">new</span> FileOutputStream(file).getChannel()) &#123;</span><br><span class="line">                    outputChannel.transferFrom(inputChannel, <span class="number">0</span>, inputChannel.size());</span><br><span class="line">                    ResponseUtil.response(ctx, request, <span class="keyword">new</span> GeneralResponse(HttpResponseStatus.OK, <span class="string">"SUCCESS"</span>, <span class="keyword">null</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.warn(<span class="string">"&#123;&#125;"</span>, cause);</span><br><span class="line">        ctx.channel().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (httpDecoder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            httpDecoder.cleanFiles();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>参考官方Demo： <a href="https://github.com/netty/netty/blob/4.1/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java" target="_blank" rel="noopener">https://github.com/netty/netty/blob/4.1/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java</a></p><p>做了改动：</p><ul><li>为了更高效的传输大数据，实例中用到了ChunkedWriteHandler编码器，它提供了以zero-memory-copy方式写文件。</li><li>通过ChannelProgressiveFutureListener对文件下载过程进行监听。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 新增ChunkedHandler，主要作用是支持异步发送大的码流（例如大文件传输），但是不占用过多的内存，防止发生java内存溢出错误</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line"><span class="comment">// 用于下载文件</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> HttpDownloadHandler());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpDownloadHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">FullHttpRequest</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpDownloadHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String filePath = <span class="string">"/data/body.csv"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, FullHttpRequest request)</span> </span>&#123;</span><br><span class="line">        String uri = request.uri();</span><br><span class="line">        <span class="keyword">if</span> (uri.startsWith(<span class="string">"/download"</span>) &amp;&amp; request.method().equals(HttpMethod.GET)) &#123;</span><br><span class="line">            GeneralResponse generalResponse = <span class="keyword">null</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"r"</span>);</span><br><span class="line">                <span class="keyword">long</span> fileLength = raf.length();</span><br><span class="line">                HttpResponse response = <span class="keyword">new</span> DefaultHttpResponse(HTTP_1_1, HttpResponseStatus.OK);</span><br><span class="line">                response.headers().set(HttpHeaderNames.CONTENT_LENGTH, fileLength);</span><br><span class="line">                response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">                response.headers().add(HttpHeaderNames.CONTENT_DISPOSITION, String.format(<span class="string">"attachment; filename=\"%s\""</span>, file.getName()));</span><br><span class="line">                ctx.write(response);</span><br><span class="line">                ChannelFuture sendFileFuture = ctx.write(<span class="keyword">new</span> DefaultFileRegion(raf.getChannel(), <span class="number">0</span>, fileLength), ctx.newProgressivePromise());</span><br><span class="line">                sendFileFuture.addListener(<span class="keyword">new</span> ChannelProgressiveFutureListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelProgressiveFuture future)</span></span></span><br><span class="line"><span class="function">                            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        log.info(<span class="string">"file &#123;&#125; transfer complete."</span>, file.getName());</span><br><span class="line">                        raf.close();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationProgressed</span><span class="params">(ChannelProgressiveFuture future,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">long</span> progress, <span class="keyword">long</span> total)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            log.warn(<span class="string">"file &#123;&#125; transfer progress: &#123;&#125;"</span>, file.getName(), progress);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            log.debug(<span class="string">"file &#123;&#125; transfer progress: &#123;&#125;/&#123;&#125;"</span>, file.getName(), progress, total);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                log.warn(<span class="string">"file &#123;&#125; not found"</span>, file.getPath());</span><br><span class="line">                generalResponse = <span class="keyword">new</span> GeneralResponse(HttpResponseStatus.NOT_FOUND, String.format(<span class="string">"file %s not found"</span>, file.getPath()), <span class="keyword">null</span>);</span><br><span class="line">                ResponseUtil.response(ctx, request, generalResponse);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.warn(<span class="string">"file &#123;&#125; has a IOException: &#123;&#125;"</span>, file.getName(), e.getMessage());</span><br><span class="line">                generalResponse = <span class="keyword">new</span> GeneralResponse(HttpResponseStatus.INTERNAL_SERVER_ERROR, String.format(<span class="string">"读取 file %s 发生异常"</span>, filePath), <span class="keyword">null</span>);</span><br><span class="line">                ResponseUtil.response(ctx, request, generalResponse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.fireChannelRead(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable e)</span> </span>&#123;</span><br><span class="line">        log.warn(<span class="string">"&#123;&#125;"</span>, e);</span><br><span class="line">        ctx.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载文件遇到的坑"><a href="#下载文件遇到的坑" class="headerlink" title="下载文件遇到的坑"></a>下载文件遇到的坑</h2><p>由于<code>RandomAccessFile</code>是一种文件资源，所以我习惯性的在最后关闭文件资源，采用的是Java7的 <code>try-with-resources</code> 语法，于是问题就出现了，由于 <code>ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());</code> 是异步的，在我关闭<code>RandomAccessFile</code>时，文件还未传输完毕，就会导致下载文件停止。</p><p>代码放在： <a href="https://github.com/morethink/code/tree/master/java/netty-example" target="_blank" rel="noopener">https://github.com/morethink/code/tree/master/java/netty-example</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker中执行Shell出现乱码</title>
      <link href="/Docker%E4%B8%AD%E6%89%A7%E8%A1%8CShell%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81/"/>
      <url>/Docker%E4%B8%AD%E6%89%A7%E8%A1%8CShell%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近遇到一个问题：<br>执行命令<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec f4af9b sh -c 'bash /tmp/build.sh'</span><br></pre></td></tr></table></figure></p><p>在docker中执行shell，会出现中文乱码的问题。但是在docker容器中单独执行shell脚本却没有出现乱码。查看环境变量存在<code>LANG=en_US.UTF-8</code>，因此从原理上来说是不应该出现乱码的。</p><p>但是既然出现了乱码，那么<code>LANG=en_US.UTF-8</code>应该就没有读取到，于是在 <code>build.sh</code>中运行<code>env</code>命令，发现通过<code>docker exec f4af9b sh -c &#39;bash /tmp/build.sh&#39;</code>方式没有<code>LANG=en_US.UTF-8</code>环境变量，那么原因是什么？</p><a id="more"></a><h1 id="原因定位"><a href="#原因定位" class="headerlink" title="原因定位"></a>原因定位</h1><p>原因如下：<br><code>docker exec f4af9b sh -c &#39;bash /tmp/build.sh&#39;</code> 对于docker 容器来说是非登录和非交互式shell，这样就不会读取某些配置文件，导致<code>LANG=en_US.UTF-8</code>没有加载成功。</p><h1 id="Linux-Shell"><a href="#Linux-Shell" class="headerlink" title="Linux Shell"></a>Linux Shell</h1><p>下面介绍一下Linux交互式和非交互式shell、登录和非登录shell之间的区别。</p><ul><li><p><strong>交互式shell（interactive shell）和非交互式shell（non-interactive shell）</strong>：</p><ul><li>交互式的shell会有一个输入提示符，并且它的标准输入、输出和错误输出都会显示在控制台上。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、退出。当你退出后，shell也终止了。  </li><li>非交互式shell是<code>bash script.sh</code>这类的shell。在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令，并且执行它们。当它读到文件的结尾EOF，shell也就终止了。</li></ul></li><li><p><strong>登录式shell（login shell）和非登陆式shell（no-login shell）</strong>：</p><ul><li>需要输入用户名和密码的shell就是登陆式shell。因此通常不管以何种方式登陆机器后用户获得的第一个shell就是login shell。不输入密码的ssh是公钥打通的，某种意义上说也是输入密码的。</li><li>非登陆式的就是在登陆后启动bash等，即不是远程登陆到主机这种。</li></ul></li></ul><p>对于常用环境变量设置文件，整理出如下加载情况表：</p><table><thead><tr><th style="text-align:center">文件</th><th style="text-align:center">非交互+登陆式</th><th style="text-align:center">交互+登陆式</th><th style="text-align:center">交互+非登陆式</th><th style="text-align:center">非交互+非登陆式</th></tr></thead><tbody><tr><td style="text-align:center">/etc/profile</td><td style="text-align:center">加载</td><td style="text-align:center">加载</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">/etc/bashrc</td><td style="text-align:center">加载</td><td style="text-align:center">加载</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">~/.bash_profile</td><td style="text-align:center">加载</td><td style="text-align:center">加载</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">~/.bashrc</td><td style="text-align:center">加载</td><td style="text-align:center">加载</td><td style="text-align:center">加载</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">BASH_ENV</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">加载</td></tr></tbody></table><p>执行脚本，如<code>bash script.sh</code>是属于non-login + non-interactive。</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>因而，执行命令<code>docker exec f4af9b sh -c &#39;bash /tmp/build.sh&#39;</code>对于docker容器来说是属于non-login + non-interactive。</p><p>将上面的<code>bash /tmp/build.sh</code>改为<code>bash --login /tmp/build.sh</code>变为登录shell，就可以读取/etc/profile和~/.bash_profile等文件。</p><p>或者在执行<code>bash /tmp/build.sh</code>时在<code>build.sh</code>加入<code>export LANG=&quot;en_US.UTF-8&quot;</code>手动设置。</p><h1 id="常见的shell变量"><a href="#常见的shell变量" class="headerlink" title="常见的shell变量"></a>常见的shell变量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH：决定了shell将到哪些目录中寻找命令或程序</span><br><span class="line">HOME：当前用户主目录</span><br><span class="line">MAIL：是指当前用户的邮件存放目录。</span><br><span class="line">SHELL：是指当前用户用的是哪种Shell。</span><br><span class="line">HISTSIZE：是指保存历史命令记录的条数</span><br><span class="line">LOGNAME：是指当前用户的登录名。</span><br><span class="line">HOSTNAME：是指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来取得的。</span><br><span class="line">LANG/LANGUGE：是和语言相关的环境变量，使用多种语言的用户可以修改此环境变量。</span><br><span class="line">PS1：是基本提示符，对于root用户是#，对于普通用户是$。</span><br><span class="line">PS2：是附属提示符，默认是&quot;&gt;&quot;。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Netty URL路由方案探讨</title>
      <link href="/Netty-URL-routing-scheme/"/>
      <url>/Netty-URL-routing-scheme/</url>
      
        <content type="html"><![CDATA[<p>最近在用Netty做开发，需要提供一个http web server，供调用方调用。采用Netty本身提供的<code>HttpServerCodec</code> handler进行Http协议的解析，但是需要自己提供路由。</p><p>最开始是通过对Http method及uri 采用多层if else 嵌套判断的方法路由到真正的controller类：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String uri = request.uri();</span><br><span class="line">HttpMethod method = request.method();</span><br><span class="line"><span class="keyword">if</span> (method == HttpMethod.POST) &#123;</span><br><span class="line">    <span class="keyword">if</span> (uri.startsWith(<span class="string">"/login"</span>)) &#123;</span><br><span class="line">        <span class="comment">//url参数解析，调用controller的方法</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uri.startsWith(<span class="string">"/logout"</span>)) &#123;</span><br><span class="line">        <span class="comment">//同上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == HttpMethod.GET) &#123;</span><br><span class="line">    <span class="keyword">if</span> (uri.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uri.startsWith(<span class="string">"/status"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在只需提供<code>login</code>及<code>logout</code>API时，代码可以完成功能，可是随着API的数量越来越多，需要支持的方法及uri越来越多，<code>else if</code> 越来越多，代码越来越复杂。</p><p><img src="https://images.morethink.cn/time-for-change.jpg" alt="time-for-change" title="是时候考虑重构了"></p><p>在阿里开发手册中也提到过：</p><p><img src="https://images.morethink.cn/e1a6f2bd638f0baf5aba0d7a63e77230.png" alt="" title="重构多层else if"></p><p>因此首先考虑采用状态设计模式及策略设计模式重构。</p><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><h2 id="状态模式的角色："><a href="#状态模式的角色：" class="headerlink" title="状态模式的角色："></a>状态模式的角色：</h2><ul><li>state状态<br>表示状态，定义了根据不同状态进行不同处理的接口，该接口是那些处理内容依赖于状态的方法集合，对应实例的state类</li><li>具体的状态<br>实现了state接口，对应daystate和nightstate</li><li>context<br>context持有当前状态的具体状态的实例，此外，他还定义了供外部调用者使用的状态模式的接口。</li></ul><p>首先我们知道每个http请求都是由method及uri来唯一标识的，所谓路由就是通过这个唯一标识定位到controller类的中的某个方法。</p><p>因此把HttpLabel作为状态<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpLabel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">    <span class="keyword">private</span> HttpMethod method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>状态接口：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">GeneralResponse <span class="title">call</span><span class="params">(FullHttpRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为每个状态添加状态实现：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例controller类</span></span><br><span class="line">    <span class="keyword">final</span> DemoController demoController = DemoController.getInstance();</span><br><span class="line">    Map&lt;HttpLabel, Route&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="keyword">new</span> HttpLabel(<span class="string">"/login"</span>, HttpMethod.POST), demoController::login);</span><br><span class="line">    map.put(<span class="keyword">new</span> HttpLabel(<span class="string">"/logout"</span>, HttpMethod.POST), demoController::login);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接到请求，判断状态，调用不同接口：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">FullHttpRequest</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, FullHttpRequest request)</span> </span>&#123;</span><br><span class="line">        String uri = request.uri();</span><br><span class="line">        GeneralResponse generalResponse;</span><br><span class="line">        <span class="keyword">if</span> (uri.contains(<span class="string">"?"</span>)) &#123;</span><br><span class="line">            uri = uri.substring(<span class="number">0</span>, uri.indexOf(<span class="string">"?"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        Route route = map.get(<span class="keyword">new</span> HttpLabel(uri, request.method()));</span><br><span class="line">        <span class="keyword">if</span> (route != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ResponseUtil.response(ctx, request, route.call(request));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            generalResponse = <span class="keyword">new</span> GeneralResponse(HttpResponseStatus.BAD_REQUEST, <span class="string">"请检查你的请求方法及url"</span>, <span class="keyword">null</span>);</span><br><span class="line">            ResponseUtil.response(ctx, request, generalResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用状态设计模式重构代码，在增加url时只需要网map里面put一个值就行了。</p><h1 id="类似SpringMVC路由功能"><a href="#类似SpringMVC路由功能" class="headerlink" title="类似SpringMVC路由功能"></a>类似SpringMVC路由功能</h1><p>后来看了 <a href="https://yuerblog.cc/2018/03/08/java-router-with-annotation/" target="_blank" rel="noopener">JAVA反射+运行时注解实现URL路由</a> 发现反射+注解的方式很优雅，代码也不复杂。</p><p>下面介绍Netty使用反射实现URL路由。</p><p>路由注解：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由的uri</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">uri</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>扫描classpath下带有<code>@RequestMapping</code>注解的方法，将这个方法放进一个路由Map：<code>Map&lt;HttpLabel, Action&lt;GeneralResponse&gt;&gt; httpRouterAction</code>，key为上面提到过的Http唯一标识  <code>HttpLabel</code>，value为通过反射调用的方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRouter</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;HttpLabel, Action&lt;GeneralResponse&gt;&gt; httpRouterAction = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String classpath = <span class="keyword">this</span>.getClass().getResource(<span class="string">""</span>).getPath();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; controllerBeans = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        String path = classpath + name.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes;</span><br><span class="line">        <span class="keyword">try</span> (InputStream ins = <span class="keyword">new</span> FileInputStream(path)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream()) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">                <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((b = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(buffer, <span class="number">0</span>, b);</span><br><span class="line">                &#125;</span><br><span class="line">                bytes = out.toByteArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRouter</span><span class="params">(String controllerClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cls = loadClass(controllerClass);</span><br><span class="line">            Method[] methods = cls.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method invokeMethod : methods) &#123;</span><br><span class="line">                Annotation[] annotations = invokeMethod.getAnnotations();</span><br><span class="line">                <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (annotation.annotationType() == RequestMapping.class) &#123;</span><br><span class="line">                        RequestMapping requestMapping = (RequestMapping) annotation;</span><br><span class="line">                        String uri = requestMapping.uri();</span><br><span class="line">                        String httpMethod = requestMapping.method().toUpperCase();</span><br><span class="line">                        <span class="comment">// 保存Bean单例</span></span><br><span class="line">                        <span class="keyword">if</span> (!controllerBeans.containsKey(cls.getName())) &#123;</span><br><span class="line">                            controllerBeans.put(cls.getName(), cls.newInstance());</span><br><span class="line">                        &#125;</span><br><span class="line">                        Action action = <span class="keyword">new</span> Action(controllerBeans.get(cls.getName()), invokeMethod);</span><br><span class="line">                        <span class="comment">//如果需要FullHttpRequest，就注入FullHttpRequest对象</span></span><br><span class="line">                        Class[] params = invokeMethod.getParameterTypes();</span><br><span class="line">                        <span class="keyword">if</span> (params.length == <span class="number">1</span> &amp;&amp; params[<span class="number">0</span>] == FullHttpRequest.class) &#123;</span><br><span class="line">                            action.setInjectionFullhttprequest(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 保存映射关系</span></span><br><span class="line">                        httpRouterAction.put(<span class="keyword">new</span> HttpLabel(uri, <span class="keyword">new</span> HttpMethod(httpMethod)), action);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"&#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getRoute</span><span class="params">(HttpLabel httpLabel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpRouterAction.get(httpLabel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过反射调用<code>controller</code> 类中的方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> injectionFullhttprequest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) method.invoke(object, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            log.warn(<span class="string">"&#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>ServerHandler.java</code>处理如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//根据不同的请求API做不同的处理(路由分发)</span></span><br><span class="line">Action&lt;GeneralResponse&gt; action = httpRouter.getRoute(<span class="keyword">new</span> HttpLabel(uri, request.method()));</span><br><span class="line"><span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.isInjectionFullhttprequest()) &#123;</span><br><span class="line">        ResponseUtil.response(ctx, request, action.call(request));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ResponseUtil.response(ctx, request, action.call());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//错误处理</span></span><br><span class="line">    generalResponse = <span class="keyword">new</span> GeneralResponse(HttpResponseStatus.BAD_REQUEST, <span class="string">"请检查你的请求方法及url"</span>, <span class="keyword">null</span>);</span><br><span class="line">    ResponseUtil.response(ctx, request, generalResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>DemoController</code> 方法配置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(uri = &quot;/login&quot;, method = &quot;POST&quot;)</span><br><span class="line">public GeneralResponse login(FullHttpRequest request) &#123;</span><br><span class="line">    User user = JsonUtil.fromJson(request, User.class);</span><br><span class="line">    log.info(&quot;/login called,user: &#123;&#125;&quot;, user);</span><br><span class="line">    return new GeneralResponse(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果如下：<br><img src="https://images.morethink.cn/5166aac96c36b6fca7645a5aca07f630.png" alt="" title="测试结果"></p><p>完整代码在 <a href="https://github.com/morethink/Netty-Route" target="_blank" rel="noopener">https://github.com/morethink/Netty-Route</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java使用UDP发送数据到InfluxDB</title>
      <link href="/Java-USES-InfluxDB-UDP-sending-data/"/>
      <url>/Java-USES-InfluxDB-UDP-sending-data/</url>
      
        <content type="html"><![CDATA[<p>最近在做压测引擎相关的开发，需要将聚合数据发送到InfluxDB保存以便实时分析和控制QPS。</p><p>下面介绍对InfluxDB的使用。</p><h1 id="什么是InfluxDB"><a href="#什么是InfluxDB" class="headerlink" title="什么是InfluxDB"></a>什么是InfluxDB</h1><p>InfluxDB是一款用Go语言编写的开源分布式时序、事件和指标数据库，无需外部依赖。该数据库现在主要用于存储涉及大量的时间戳数据，如DevOps监控数据，APP metrics, loT传感器数据和实时分析数据。</p><a id="more"></a><p>InfluxDB特征：</p><ul><li>无结构(无模式)：可以是任意数量的列(tags)。</li><li>可以设置metric的保存时间。</li><li>支持与时间有关的相关函数(如min、max、sum、count、mean、median等)，方便统计。</li><li>支持存储策略：可以用于数据的删改(influxDB没有提供数据的删除与修改方法)。</li><li>支持连续查询：是数据库中自动定时启动的一组语句，和存储策略搭配可以降低InfluxDB的系统占用量。</li><li>原生的HTTP支持，内置HTTP API。</li><li>支持类似SQL语法。</li><li>支持设置数据在集群中的副本数。</li><li>支持定期采样数据，写入另外的measurement，方便分粒度存储数据。</li><li>自带web管理界面，方便使用(登入方式：http://&lt; InfluxDB-IP &gt;:8083)。</li><li>支持Grafana画图展示。</li></ul><p>PS：有了InfluxDB+Grafana后，你就可以写一些简单的程序了，可以只负责写后端逻辑部分，数据都可以存入InfluxDB，然后通过Grafana展示出来。</p><h1 id="Mac安装InfluxDB"><a href="#Mac安装InfluxDB" class="headerlink" title="Mac安装InfluxDB"></a>Mac安装InfluxDB</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line">brew install influxdb</span><br><span class="line"><span class="meta">#</span> 启动</span><br><span class="line">influxd -config /usr/local/etc/influxdb.conf</span><br><span class="line"><span class="meta">#</span> 查看influxdb运行配置</span><br><span class="line">influxd config</span><br><span class="line"><span class="meta">#</span> 启动客户端</span><br><span class="line">influx -precision rfc3339</span><br></pre></td></tr></table></figure><h1 id="InfluxDB开启UDP配置"><a href="#InfluxDB开启UDP配置" class="headerlink" title="InfluxDB开启UDP配置"></a>InfluxDB开启UDP配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/etc/influxdb.conf</span><br></pre></td></tr></table></figure><p>开启udp配置，其他为默认值<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[[udp]]</span><br><span class="line">  enabled = true</span><br></pre></td></tr></table></figure></p><p>udp配置含义：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[[udp]] – udp配置</span><br><span class="line"></span><br><span class="line">    enabled：是否启用该模块，默认值：false。</span><br><span class="line"></span><br><span class="line">    bind-address：绑定地址，默认值：”:8089″。</span><br><span class="line"></span><br><span class="line">    database：数据库名称，默认值：”udp”。</span><br><span class="line"></span><br><span class="line">    retention-policy：存储策略，无默认值。</span><br><span class="line"></span><br><span class="line">    batch-size：默认值：5000。</span><br><span class="line"></span><br><span class="line">    batch-pending：默认值：10。</span><br><span class="line"></span><br><span class="line">    read-buffer：udp读取buffer的大小，0表示使用操作系统提供的值，如果超过操作系统的默认配置则会出错。 该配置的默认值：0。</span><br><span class="line"></span><br><span class="line">    batch-timeout：超时时间，默认值：”1s”。</span><br><span class="line"></span><br><span class="line">    precision：时间精度，无默认值。</span><br></pre></td></tr></table></figure></p><h1 id="Java发送UDP数据报"><a href="#Java发送UDP数据报" class="headerlink" title="Java发送UDP数据报"></a>Java发送UDP数据报</h1><p>我们知道InfluxDB是支持Http的，为什么我们还要采用UDP方式发送数据呢？</p><p>基于下列原因：</p><ol><li>TCP数据传输慢，UDP数据传输快。</li><li>网络带宽需求较小，而实时性要求高。</li><li>InfluxDB和服务器在同机房，发生数据丢包的可能性较小，即使真的发生丢包，对整个请求流量的收集影响也较小。</li></ol><p>我们采用了worker线程调用<code>addMetric</code>方法将数据存储到缓存 <code>map</code> 中，send线程池来进行每个指定时间发送数据到Influxdb。</p><p>代码如下(也可参考<code>Jmeter</code>的<code>UdpMetricsSender</code>类)：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfluxDBClient</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String measurement = <span class="string">"example"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InetAddress hostAddress;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> udpPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, List&lt;Response&gt;&gt; metrics = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String transaction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfluxDBClient</span><span class="params">(String influxdbUrl, String transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transaction = transaction;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">"Setting up with url:&#123;&#125;"</span>, influxdbUrl);</span><br><span class="line">            String[] urlComponents = influxdbUrl.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span> (urlComponents.length == <span class="number">2</span>) &#123;</span><br><span class="line">                hostAddress = InetAddress.getByName(urlComponents[<span class="number">0</span>]);</span><br><span class="line">                udpPort = Integer.parseInt(urlComponents[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"InfluxDBClient url '"</span> + influxdbUrl + <span class="string">"' is wrong. The format shoule be &lt;host/ip&gt;:&lt;port&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"InfluxDBClient url '"</span> + influxdbUrl + <span class="string">"' is wrong. The format shoule be &lt;host/ip&gt;:&lt;port&gt;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMetric</span><span class="params">(Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (metrics.containsKey(response.getLabel())) &#123;</span><br><span class="line">                metrics.get(response.getLabel()).add(response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                metrics.put(response.getLabel(), <span class="keyword">new</span> ArrayList&lt;&gt;(Collections.singletonList(response)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sendMetrics();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMetrics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;Response&gt;&gt; tempMetrics;</span><br><span class="line">        <span class="comment">//复制数据到tempMetrics，清空原来metrics并初始化上次的大小</span></span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty(metrics)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            time = System.currentTimeMillis();</span><br><span class="line">            tempMetrics = metrics;</span><br><span class="line">            metrics = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;Response&gt;&gt; entry : tempMetrics.entrySet()) &#123;</span><br><span class="line">                metrics.put(entry.getKey(), <span class="keyword">new</span> ArrayList&lt;&gt;(entry.getValue().size()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, List&lt;Response&gt;&gt; copyMetrics = tempMetrics;</span><br><span class="line">        <span class="keyword">final</span> List&lt;MetricTuple&gt; aggregateMetrics = aggregate(copyMetrics);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(aggregateMetrics.size() * <span class="number">200</span>);</span><br><span class="line">        <span class="comment">//发送tempMetrics,生成一行数据，然后换行</span></span><br><span class="line">        <span class="keyword">for</span> (MetricTuple metric : aggregateMetrics) &#123;</span><br><span class="line">            sb.append(metric.getMeasurement()).append(metric.getTag()).append(<span class="string">" "</span>)</span><br><span class="line">                    .append(metric.getField()).append(<span class="string">" "</span>).append(metric.getTimestamp() + <span class="string">"000000"</span>).append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//udp发送数据到Influxdb</span></span><br><span class="line">        <span class="keyword">try</span> (DatagramSocket ds = <span class="keyword">new</span> DatagramSocket()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buf = sb.toString().getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">this</span>.hostAddress, <span class="keyword">this</span>.udpPort);</span><br><span class="line">            ds.send(dp);</span><br><span class="line">            log.debug(<span class="string">"send &#123;&#125; to influxdb"</span>, sb.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Cannot open udp port!"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Error in transferring udp package"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到聚合数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metrics</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;MetricTuple&gt; <span class="title">aggregate</span><span class="params">(Map&lt;String, List&lt;Response&gt;&gt; metrics)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Map&lt;String, List&lt;Response&gt;&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;Response&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!entry.getValue().isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>参考文档</strong>：</p><ol><li><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/" target="_blank" rel="noopener">InfluxDB中文文档</a></li><li><a href="http://www.ywnds.com/?p=10763" target="_blank" rel="noopener">玩转时序数据库InfluxDB</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InfluxDB </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java压缩/解压 .zip、.tar.gz、.tar.bz2(支持中文)</title>
      <link href="/Java%E5%8E%8B%E7%BC%A9/%E8%A7%A3%E5%8E%8B%20.zip%E3%80%81.tar.gz%E3%80%81.tar.bz2(%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87)/"/>
      <url>/Java%E5%8E%8B%E7%BC%A9/%E8%A7%A3%E5%8E%8B%20.zip%E3%80%81.tar.gz%E3%80%81.tar.bz2(%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87)/</url>
      
        <content type="html"><![CDATA[<p>本文介绍Java压缩/解压.zip、.tar.gz、.tar.bz2的方式。</p><ol><li>对于zip文件：使用<code>java.util.zip.ZipEntry</code> 和 <code>java.util.zip.ZipFile</code>，通过设置<code>Charset</code>为<code>StandardCharsets.UTF_8</code>支持中文。</li><li>对于.tar.gz、tgz文件：可以看做先用tar打包，再使用gz进行压缩。使用<code>commons-compress</code>包的<code>TarArchiveInputStream</code>和<code>GzipCompressorInputStream</code>。</li><li>对于.tar.bz2文件：可以看做先用tar打包，再使用bz2进行压缩。使用<code>commons-compress</code>包的<code>TarArchiveInputStream</code>和<code>BZip2CompressorInputStream</code>。</li></ol><p>在这里有个问题如果使用<code>TarInputStream</code>搭配jdk的 <code>GZIPInputStream</code>会产生乱码。而使用<code>commons-compress</code>包的<code>TarArchiveInputStream</code>和<code>GzipCompressorInputStream</code>则可解决乱码问题。</p><a id="more"></a><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ZipUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span> * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ZipUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有函数将文件集合压缩成tar包后返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> files  要压缩的文件集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target tar 输出流的目标文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> File  指定返回的目标文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> File <span class="title">pack</span><span class="params">(List&lt;File&gt; files, File target)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(target)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos, BUFFER_SIZE)) &#123;</span><br><span class="line">                <span class="keyword">try</span> (TarArchiveOutputStream taos = <span class="keyword">new</span> TarArchiveOutputStream(bos)) &#123;</span><br><span class="line">                    <span class="comment">//解决文件名过长问题</span></span><br><span class="line">                    taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);</span><br><span class="line">                    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                        taos.putArchiveEntry(<span class="keyword">new</span> TarArchiveEntry(file));</span><br><span class="line">                        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(file)) &#123;</span><br><span class="line">                            IOUtils.copy(fis, taos);</span><br><span class="line">                            taos.closeArchiveEntry();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将tar压缩成tar.gz文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outPutPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">compress</span><span class="params">(List&lt;File&gt; list, String outPutPath, String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File outPutFile = <span class="keyword">new</span> File(outPutPath + File.separator + fileName + <span class="string">".tar.gz"</span>);</span><br><span class="line">        File tempTar = <span class="keyword">new</span> File(<span class="string">"temp.tar"</span>);</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(pack(list, tempTar))) &#123;</span><br><span class="line">            <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis, BUFFER_SIZE)) &#123;</span><br><span class="line">                <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(outPutFile)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> (GZIPOutputStream gzp = <span class="keyword">new</span> GZIPOutputStream(fos)) &#123;</span><br><span class="line">                        <span class="keyword">int</span> count;</span><br><span class="line">                        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">                        <span class="keyword">while</span> ((count = bis.read(data, <span class="number">0</span>, BUFFER_SIZE)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            gzp.write(data, <span class="number">0</span>, count);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.deleteIfExists(tempTar.toPath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outPutFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">decompress</span><span class="params">(String filePath, String outputDir, <span class="keyword">boolean</span> isDeleted)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            LOG.error(<span class="string">"decompress file not exist."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (filePath.endsWith(<span class="string">".zip"</span>)) &#123;</span><br><span class="line">                unZip(file, outputDir);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (filePath.endsWith(<span class="string">".tar.gz"</span>) || filePath.endsWith(<span class="string">".tgz"</span>)) &#123;</span><br><span class="line">                decompressTarGz(file, outputDir);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (filePath.endsWith(<span class="string">".tar.bz2"</span>)) &#123;</span><br><span class="line">                decompressTarBz2(file, outputDir);</span><br><span class="line">            &#125;</span><br><span class="line">            filterFile(<span class="keyword">new</span> File(outputDir));</span><br><span class="line">            <span class="keyword">if</span> (isDeleted) &#123;</span><br><span class="line">                FileUtils.deleteQuietly(file);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"decompress occur error."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压 .zip 文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      要解压的zip文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputDir 要解压到某个指定的目录下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unZip</span><span class="params">(File file, String outputDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (ZipFile zipFile = <span class="keyword">new</span> ZipFile(file, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">            <span class="comment">//创建输出目录</span></span><br><span class="line">            createDirectory(outputDir, <span class="keyword">null</span>);</span><br><span class="line">            Enumeration&lt;?&gt; enums = zipFile.entries();</span><br><span class="line">            <span class="keyword">while</span> (enums.hasMoreElements()) &#123;</span><br><span class="line">                ZipEntry entry = (ZipEntry) enums.nextElement();</span><br><span class="line">                <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//创建空目录</span></span><br><span class="line">                    createDirectory(outputDir, entry.getName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> (InputStream in = zipFile.getInputStream(entry)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> (OutputStream out = <span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                                <span class="keyword">new</span> File(outputDir + File.separator + entry.getName()))) &#123;</span><br><span class="line">                            writeFile(in, out);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompressTarGz</span><span class="params">(File file, String outputDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (TarArchiveInputStream tarIn = <span class="keyword">new</span> TarArchiveInputStream(</span><br><span class="line">                <span class="keyword">new</span> GzipCompressorInputStream(</span><br><span class="line">                        <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                                <span class="keyword">new</span> FileInputStream(file))))) &#123;</span><br><span class="line">            <span class="comment">//创建输出目录</span></span><br><span class="line">            createDirectory(outputDir, <span class="keyword">null</span>);</span><br><span class="line">            TarArchiveEntry entry = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((entry = tarIn.getNextTarEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//是目录</span></span><br><span class="line">                <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//创建空目录</span></span><br><span class="line">                    createDirectory(outputDir, entry.getName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//是文件</span></span><br><span class="line">                    <span class="keyword">try</span> (OutputStream out = <span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                            <span class="keyword">new</span> File(outputDir + File.separator + entry.getName()))) &#123;</span><br><span class="line">                        writeFile(tarIn, out);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压缩tar.bz2文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      压缩包文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputDir 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompressTarBz2</span><span class="params">(File file, String outputDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (TarArchiveInputStream tarIn =</span><br><span class="line">                     <span class="keyword">new</span> TarArchiveInputStream(</span><br><span class="line">                             <span class="keyword">new</span> BZip2CompressorInputStream(</span><br><span class="line">                                     <span class="keyword">new</span> FileInputStream(file)))) &#123;</span><br><span class="line">            createDirectory(outputDir, <span class="keyword">null</span>);</span><br><span class="line">            TarArchiveEntry entry;</span><br><span class="line">            <span class="keyword">while</span> ((entry = tarIn.getNextTarEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                    createDirectory(outputDir, entry.getName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> (OutputStream out = <span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                            <span class="keyword">new</span> File(outputDir + File.separator + entry.getName()))) &#123;</span><br><span class="line">                        writeFile(tarIn, out);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(InputStream in, OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="keyword">while</span> ((length = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(b, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputDir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subDir</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createDirectory</span><span class="params">(String outputDir, String subDir)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(outputDir);</span><br><span class="line">        <span class="comment">//子目录不为空</span></span><br><span class="line">        <span class="keyword">if</span> (!(subDir == <span class="keyword">null</span> || subDir.trim().equals(<span class="string">""</span>))) &#123;</span><br><span class="line">            file = <span class="keyword">new</span> File(outputDir + File.separator + subDir);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">                file.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Mac压缩再解压产生的 __MACOSX 文件夹和 .开头的其他文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filteredFile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterFile</span><span class="params">(File filteredFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (filteredFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File[] files = filteredFile.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.getName().startsWith(<span class="string">"."</span>) ||</span><br><span class="line">                        (file.isDirectory() &amp;&amp; file.getName().equals(<span class="string">"__MACOSX"</span>))) &#123;</span><br><span class="line">                    FileUtils.deleteQuietly(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码地址： <a href="https://github.com/morethink/code/blob/master/java/tools/src/main/java/cn/morethink/tools/util/ZipUtil.java" target="_blank" rel="noopener">https://github.com/morethink/code/blob/master/java/tools/src/main/java/cn/morethink/tools/util/ZipUtil.java</a></p><p><strong>参考文档</strong>：</p><ol><li><a href="https://www.programcreek.com/java-api-examples/?api=org.apache.commons.compress.archivers.tar.TarArchiveInputStream" target="_blank" rel="noopener">commons-compress官方实例</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git为某个域名设置代理</title>
      <link href="/Git-set-proxy-for-a-domain/"/>
      <url>/Git-set-proxy-for-a-domain/</url>
      
        <content type="html"><![CDATA[<p>国内访问Github很慢，可以通过配置代理来加快访问速度，但是对公司内部git服务器却不能使用代理。</p><p>下面通过更改Git配置文件对不同的域名使用不同的代理配置。<br><br><a id="more"></a></p><ol><li><p>打开Git 配置文件</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.gitconfig</span><br></pre></td></tr></table></figure></li><li><p>添加如下配置：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[http "https://github.com/"]</span><br><span class="line">    proxy = http://127.0.0.1:1081</span><br><span class="line">[https "https://github.com/"]</span><br><span class="line">    proxy = http://127.0.0.1:1081</span><br><span class="line">[http "https://my.comapnyserver.com/"]</span><br><span class="line">    proxy = ""</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MongoDB 及 Mysql 背后的 B/B+树</title>
      <link href="/data-structure-behind-the-index/"/>
      <url>/data-structure-behind-the-index/</url>
      
        <content type="html"><![CDATA[<p>索引是数据库常见的数据结构，每个后台开发人员都应该对索引背后的数据结构有所了解。</p><p>本文通过分析B-Tree及B-/+Tree数据结构及索引性能分析及磁盘存取原理尝试着回答一下问题：</p><ol><li>为什么B-Tree适合数据库索引及红黑树的二叉平衡树不适合作为索引</li><li>B+Tree比BTree做索引的优势</li><li>为什么MongoDB采用B-Tree作为索引结构而MySQL采用B+Tree作为索引存储结构</li></ol><a id="more"></a><h1 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h1><p>B 树（B-Tree）是为磁盘等辅助存取设备设计的一种平衡查找树，它实现了以 $O(\lg n)$ 时间复杂度执行查找、顺序读取、插入和删除操作。由于 B 树和 B 树的变种在降低磁盘 I/O 操作次数方面表现优异，所以经常用于设计文件系统和数据库。</p><p>使用阶来定义 B 树，一棵 m 阶的 B 树，需要满足下列条件：</p><ol><li>每个节点最多拥有m个子节点且m&gt;=2，空树除外</li><li><strong>除根节点外每个节点的关键字数量大于等于<code>ceil(m/2)-1</code>，小于等于<code>m-1</code>，非根节点关键字数必须&gt;=2</strong></li><li>所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子</li><li><strong>如果一个非叶节点有n个子节点，则该节点的关键字数等于n-1</strong></li><li>所有节点关键字是按递增次序排列，并遵循左小右大原则</li></ol><p>注：</p><ol><li>m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树，m=3则是3叉。</li><li>ceil()是个朝正无穷方向取整的函数，如ceil(1.1)结果为2，即向上取整。</li></ol><p><img src="https://images.morethink.cn/B-Tree-1.jpg" alt="B-Tree" title="B-Tree"></p><p>B 树中的节点分为内部节点（Internal Node）和叶节点（Leaf Node），内部节点也就是非叶节点（Non-Leaf Node）。</p><h2 id="B-Tree的查找"><a href="#B-Tree的查找" class="headerlink" title="B-Tree的查找"></a>B-Tree的查找</h2><p>B-Tree的查找过程：根据给定值查找结点和在结点的关键字中进行查找交叉进行。</p><p>首先从根结点开始重复如下过程：若比结点的第一个关键字小，则查找在该结点第一个指针指向的结点进行；若等于结点中某个关键字，则查找成功；若在两个关键字之间，则查找在它们之间的指针指向的结点进行；若比该结点所有关键字大，则查找在该结点最后一个指针指向的结点进行；若查找已经到达某个叶结点，则说明给定值对应的数据记录不存在，查找失败。</p><p>例如：<br>在一棵 5 阶B-树中查找元素 29</p><p><img src="https://upload-images.jianshu.io/upload_images/1630488-43897a4dd77bf18f.gif" alt="" title="B-Tree的查询"></p><p>首先29比根节点值大，所以找根节点的右子数，然后再根据值得判断，发现 29 介于 28 和 48 之间，然后在从中间子树继续查找下去。</p><h2 id="B-Tree的插入"><a href="#B-Tree的插入" class="headerlink" title="B-Tree的插入"></a>B-Tree的插入</h2><p>插入的过程分两步完成：</p><ol><li><p>利用前述的B-树的查找算法查找关键字的插入位置。若找到，则说明该关键字已经存在，直接返回。否则查找操作必失败于某个最低层的非终端结点上。</p></li><li><p>判断该结点是否还有空位置。<strong>即判断该结点的关键字总数是否满足n&lt;=m-1</strong>。若满足，则说明该结点还有空位置，直接把关键字k插入到该结点的合适位置上。若不满足，说明该结点己没有空位置，需要把结点分裂成两个。</p></li></ol><p>分裂的方法是：<br>生成一新结点。把原结点上的关键字和k按升序排序后，<strong>从中间位置把关键字（不包括中间位置的关键字）分成两部分</strong>。左部分所含关键字放在旧结点中，右部分所含关键字放在新结点中，中间位置的关键字连同新结点的存储位置插入到父结点中。如果父结点的关键字个数也超过（m-1），则要再分裂，再往上插。直至这个过程传到根结点为止。</p><p>例子：</p><p><strong>如果该节点的元素个数还没达到 m，则插入完后无需处理</strong><br>比如：</p><p><img src="https://upload-images.jianshu.io/upload_images/1630488-25083e10d9708891.gif" alt="" title="在 B-树中插入元素 3"></p><p><strong>如果该节点元素个数达到 m 时，这时候将元素插入到合适的位置，将最中间的元素取出，成为该节点的父节点元素，然后将其余左右元素拆成两个新节点</strong></p><p>比如：</p><p><img src="https://upload-images.jianshu.io/upload_images/1630488-afa3b6b35908cf99.gif" alt="" title="在 B-树中插入元素 44"></p><p><strong>刚才的操作可能导致父节点的元素个数达到 m，这时候用情况 2 迭代处理，直到如果遇到根结点元素个数达到 m，则最中间元素将成为新的根结点。</strong></p><p>比如：</p><p><img src="https://upload-images.jianshu.io/upload_images/1630488-8dda91b45852ba9d.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="" title="在 B-树中插入元素 45"></p><h2 id="B-Tree-的删除"><a href="#B-Tree-的删除" class="headerlink" title="B-Tree 的删除"></a>B-Tree 的删除</h2><p>我们需要分两种情况进行讨论：</p><ul><li>如果该元素存在于叶子结点，直接删除它，无需进行其它处理。</li><li>如果该元素存在于非叶子节点，那么删除它将会留下一个空位，这时候我们需要一些处理来填充该位置。<br>因为节点的元素个数在 [M/2, M] 的范围内，所以比如这里我们以 5 阶B-树为例，判断节点元素是否充足即满足个数则至少拥有三（2 + 1）个元素的节点才算是有充足的元素。<ol><li>如果被删元素的左子树拥有足够的元素，这时候我们只需拿左子节点的最大值元素上来填充即可</li><li>当左子树不够元素而右子树元素充足时，这时候我们拿右子树的最小值元素上来进行填充</li><li>当左右子树所含元素均不足时，但左子树的左边兄弟节点的元素个数充足，这时我们需要拿左边的兄弟节点来进行调整。</li><li>当左右子树所含元素均不足时，但左子树的左边兄弟节点的元素个数也不足时，这时候我们还是拿左子树的最大值元素进行填充，之后再将该节点与其他节点合并形成新的节点。</li></ol></li></ul><h1 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h1><p>B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p><p>与B-Tree相比，B+Tree有以下不同点：</p><ul><li>每个节点的指针上限为2d而不是2d+1。</li><li>B+Tree叶子节点保存了父节点的所有关键字和关键字记录的指针，每个叶子节点的关键字从小到大链接</li><li>内节点不存储data，只存储key；叶子节点不存储指针。因此所有数据地址必须要到叶子节点才能获取到，所以每次数据查询的次数都一样。<br><img src="https://images.morethink.cn/B+Tree.jpg" alt="" title="B+Tree"></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用B-/+Tree作为索引结构，这一节将结合计算机组成原理相关知识讨论B-/+Tree作为索引的理论基础。</p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，<strong>索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数</strong>。</p><p>下面先介绍内存和磁盘存取原理，然后再结合这些原理分析B-/+Tree作为索引的效率。</p><h1 id="磁盘存取原理"><a href="#磁盘存取原理" class="headerlink" title="磁盘存取原理"></a>磁盘存取原理</h1><p>索引一般以文件形式存储在磁盘上，索引检索需要磁盘I/O操作。与主存不同，磁盘I/O存在机械运动耗费，因此磁盘I/O的时间消耗是巨大的。</p><p>下面是磁盘的整体结构示意图：</p><p><img src="http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/6.png" alt="" title="磁盘的整体结构"></p><p>一个磁盘由大小相同且同轴的圆形盘片组成，磁盘可以转动（各个磁盘必须同步转动）。在磁盘的一侧有磁头支架，磁头支架固定了一组磁头，每个磁头负责存取一个磁盘的内容。磁头不能转动，但是可以沿磁盘半径方向运动（实际是斜切向运动），每个磁头同一时刻也必须是同轴的，即从正上方向下看，所有磁头任何时候都是重叠的（不过目前已经有多磁头独立技术，可不受此限制）。</p><p>下面是磁盘结构的示意图：</p><p><img src="http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/7.png" alt="" title="磁盘结构"></p><p>盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个磁道，所有半径相同的磁道组成一个柱面。磁道被沿半径线划分成一个个小的段，每个段叫做一个扇区，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。</p><p>当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做寻道，所耗费时间叫做寻道时间，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做旋转时间。</p><h2 id="局部性原理与磁盘预读"><a href="#局部性原理与磁盘预读" class="headerlink" title="局部性原理与磁盘预读"></a>局部性原理与磁盘预读</h2><p>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。</p><p>这样做的理论依据是计算机科学中著名的局部性原理：</p><blockquote><p>当一个数据被用到时，其附近的数据也通常会马上被使用。</p></blockquote><p>程序运行期间所需要的数据通常比较集中。</p><p>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。</p><p>预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p><h1 id="B-Tree索引的性能分析"><a href="#B-Tree索引的性能分析" class="headerlink" title="B-/+Tree索引的性能分析"></a>B-/+Tree索引的性能分析</h1><p>一般使用磁盘I/O次数评价索引结构的优劣。先从B-Tree分析，根据B-Tree的定义，可知检索一次最多需要访问h个节点。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：</p><p>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</p><p>B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为$O(h)=O(\log_d N)$。一般实际应用中，出度d是非常大的数字，通常超过100，因此h非常小（通常不超过3）。</p><p>综上所述，用B-Tree作为索引结构效率是非常高的。</p><p><strong>而红黑树这种结构，h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I/O渐进复杂度也为O(h)，效率明显比B-Tree差很多。</strong></p><p>上文还说过，B+Tree更适合外存索引，原因和内节点出度d有关。从上面分析可以看到，d越大索引的性能越好，而出度的上限取决于节点内key和data的大小：</p><p>$$<br>d_{max}=floor({pagesize \over keysize+datasize+pointsize})<br>$$</p><p>floor表示向下取整。</p><p><strong>由于B+Tree内节点去掉了data域，因此可以拥有更大的出度，容纳更多的节点，能够有效减少磁盘IO次数</strong>。</p><p>一般在数据库系统或文件系统中使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。</p><p><img src="https://images.morethink.cn/B+Tree.jpg" alt="" title="B+Tree"></p><p>如上图图所示，在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，<strong>只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率</strong>。</p><p>综上所述：<br>B+Tree做索引的优势是：</p><ol><li>内部节点取消data域，每一页可以容纳更多的数据，有效减少磁盘IO次数。</li><li>数据都存储在叶子节点，所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。所以B+树查询时间复杂度为log n，而B树查询时间复杂度不固定，与所查结点在树中的位置有关，最好为O(1)。</li><li>通过增加顺序访问指针提高区间查询效率。</li></ol><p>而MongoDB索引选择B树可能是因为：<br>MongoDB 是文档型的数据库，是一种nosql，它使用BSON格式保存数据，归属于聚合型数据库。被设计用在数据模型简单，性能要求高的场合。之所以采用B树，是因为B树key和data域聚合在一起。因此并不需要类似于区间查询的操作。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></li><li><a href="https://www.cnblogs.com/gaochundong/p/btree_and_bplustree.html#bplustree_implementation" target="_blank" rel="noopener">人人都是 DBA（VII）B 树和 B+ 树</a></li><li><a href="https://zhuanlan.zhihu.com/p/27700617" target="_blank" rel="noopener">平衡二叉树、B-Tree、B+Tree、B*树 理解其中一种你就都明白了</a></li><li><a href="https://zh.wikipedia.org/wiki/B%E6%A0%91" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/B%E6%A0%91</a></li><li>B-Tree gif：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></li><li><a href="https://www.jianshu.com/p/ed76dbc0536d" target="_blank" rel="noopener">6. 数据结构 - B 树</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MAC安装RabbitMQ</title>
      <link href="/MAC%E5%AE%89%E8%A3%85RabbitMQ/"/>
      <url>/MAC%E5%AE%89%E8%A3%85RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install rabbitmq</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li>添加环境变量<ul><li>打开配置文件<code>$ vi ~/.bash_profile</code></li><li>添加 <code>export PATH=$PATH:/usr/local/sbin</code><br>到末尾，编辑完后:wq保存退出。</li><li>使环境变量立即生效 <code>$ source ~/.bash_profile</code></li></ul></li><li>启动RabbitMQ服务<br>上面配置完成后，需要关闭终端窗口，重新打开，然后输入下面命令即可启动RabbitMQ服务：<code>rabbitmq-server</code></li><li>登录Web管理界面<br>浏览器输入localhost：15672，账号密码全输入guest即可登录。</li></ol><p>这里需要注意下，从3.3.1版本开始，RabbitMQ默认不允许远程ip登录，即只能使用localhost登录。如果希望远程登录，需要添加用户权限。</p><h1 id="设置RabbitMQ远程ip登录"><a href="#设置RabbitMQ远程ip登录" class="headerlink" title="设置RabbitMQ远程ip登录"></a>设置RabbitMQ远程ip登录</h1><p>由于账号guest具有所有的操作权限，并且又是默认账号，出于安全因素的考虑，guest用户只能通过localhost登陆使用，并建议修改guest用户的密码以及新建其他账号管理使用rabbitmq。<br>这里我们以创建个test帐号，密码123456为例，创建一个账号并支持远程ip访问。</p><ul><li><p>创建账号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user test 123456</span><br></pre></td></tr></table></figure></li><li><p>设置用户角色</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl  set_user_tags  test  administrator</span><br></pre></td></tr></table></figure></li><li><p>设置用户权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; test &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置完成后可以查看当前用户和角色(需要开启服务)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure></li></ul><p>这是你就可以通过其他主机的访问RabbitMQ的Web管理界面了，访问方式，浏览器输入：serverip:15672。其中serverip是RabbitMQ-Server所在主机的ip。</p><h1 id="RabbitMQ常用操作"><a href="#RabbitMQ常用操作" class="headerlink" title="RabbitMQ常用操作"></a>RabbitMQ常用操作</h1><ol><li><p>用户管理<br>用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。</p><ul><li><p>新增一个用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl  add_user  Username  Password</span><br></pre></td></tr></table></figure></li><li><p>删除一个用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl  delete_user  Username</span><br></pre></td></tr></table></figure></li><li><p>修改用户的密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl  change_password  Username  Newpassword</span><br></pre></td></tr></table></figure></li><li><p>查看当前用户列表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl  list_users</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> MAC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>科学上网之在VPS上安装SSR</title>
      <link href="/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B9%8B%E5%9C%A8VPS%E4%B8%8A%E5%AE%89%E8%A3%85SSR/"/>
      <url>/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B9%8B%E5%9C%A8VPS%E4%B8%8A%E5%AE%89%E8%A3%85SSR/</url>
      
        <content type="html"><![CDATA[<p>本文对VPS安装SSR的过程进行总结，免得因为XX重新安装SSR时找不到安装方法。</p><h1 id="安装SSR"><a href="#安装SSR" class="headerlink" title="安装SSR"></a>安装SSR</h1><p>简单的来说，如果你什么都不懂，那么你直接一路回车就可以了！<br><a id="more"></a><br>本脚本需要Linux root账户权限才能正常安装运行，所以 <strong>如果不是 root账号，请先切换为root，如果是 root账号，那么请跳过</strong>！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>输入上面代码回车后会提示你输入当前用户的密码，输入并回车后，没有报错就继续下面的步骤安装ShadowsocksR。</p><p>v2.0.0 版本以后的脚本，请先卸载旧脚本ShadowsocksR服务端，再重新安装！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>备用下载地址（上面的链接无法下载，就用这个）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure></p><p>下载运行后会提示你输入数字来选择要做什么。</p><p>运行脚本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure><p>输入对应的数字来执行相应的命令。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  请输入一个数字来选择菜单选项</span><br><span class="line"></span><br><span class="line"> 1. 安装 ShadowsocksR</span><br><span class="line"> 2. 更新 ShadowsocksR</span><br><span class="line"> 3. 卸载 ShadowsocksR</span><br><span class="line"> 4. 安装 libsodium(chacha20)</span><br><span class="line">————————————</span><br><span class="line"> 5. 查看 账号信息</span><br><span class="line"> 6. 显示 连接信息</span><br><span class="line"> 7. 设置 用户配置</span><br><span class="line"> 8. 手动 修改配置</span><br><span class="line"> 9. 切换 端口模式</span><br><span class="line">————————————</span><br><span class="line"> 10. 启动 ShadowsocksR</span><br><span class="line"> 11. 停止 ShadowsocksR</span><br><span class="line"> 12. 重启 ShadowsocksR</span><br><span class="line"> 13. 查看 ShadowsocksR 日志</span><br><span class="line">————————————</span><br><span class="line"> 14. 其他功能</span><br><span class="line"> 15. 升级脚本</span><br><span class="line"></span><br><span class="line"> 当前状态: 已安装 并 已启动</span><br><span class="line"> 当前模式: 单端口</span><br><span class="line"></span><br><span class="line">请输入数字(1-15)：</span><br></pre></td></tr></table></figure></p><h1 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h1><ul><li>安装目录：<code>/usr/local/shadowsocksr</code></li><li>配置文件：<code>/etc/shadowsocksr/user-config.json</code></li></ul><h1 id="设置为系统服务"><a href="#设置为系统服务" class="headerlink" title="设置为系统服务"></a>设置为系统服务</h1><p>ShadowsocksR 安装后，自动设置为 系统服务，所以支持使用服务来启动/停止等操作，同时支持开机启动。</p><ul><li>启动 ShadowsocksR：<code>/etc/init.d/ssr start</code></li><li>停止 ShadowsocksR：<code>/etc/init.d/ssr stop</code></li><li>重启 ShadowsocksR：<code>/etc/init.d/ssr restart</code></li><li>查看 ShadowsocksR状态：<code>/etc/init.d/ssr status</code></li></ul><p>ShadowsocksR 默认支持UDP转发，服务端无需任何设置。</p><h1 id="定时重启"><a href="#定时重启" class="headerlink" title="定时重启"></a>定时重启</h1><p>一些人可能需要定时重启ShadowsocksR服务端来保证稳定性等，所以这里用 crontab 定时。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 输入这个命令可以查看当前配置的定时任务</span><br><span class="line">crontab -l</span><br><span class="line"># 如果提示命令不存在，下面是安装命令</span><br><span class="line"># CentOS系统：</span><br><span class="line">yum update</span><br><span class="line">yum install -y crond</span><br><span class="line"># Debian/Ubuntu系统：</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y cron</span><br></pre></td></tr></table></figure><p>安装 crontab 后，我们就能开始添加定时任务了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -l &gt; &quot;crontab.bak&quot;</span><br><span class="line">sed -i &quot;/ssr restart/d&quot; &quot;crontab.bak&quot;</span><br><span class="line">echo -e &quot;\n10 3 * * * /etc/init.d/ssr restart&quot; &gt;&gt; &quot;crontab.bak&quot;</span><br><span class="line">crontab &quot;crontab.bak&quot;</span><br><span class="line">rm -r &quot;crontab.bak&quot;</span><br></pre></td></tr></table></figure><p>下面是定时任务规则(代码前面的 <em> </em> <em> </em> * 分别对应：分钟 小时 日 月 星期)参考：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 2 * * * /etc/init.d/ssr restart</span><br><span class="line"># 这个代表 每天2点10分重启一次 ShadowsocksR</span><br><span class="line"></span><br><span class="line">10 2 */2 * * /etc/init.d/ssr restart</span><br><span class="line"># 这个代表 每隔2天的2点10分重启一次 ShadowsocksR</span><br><span class="line"></span><br><span class="line">10 */4 * * * /etc/init.d/ssr restart</span><br><span class="line"># 这个代表 每隔4小时的第10分重启一次 ShadowsocksR</span><br></pre></td></tr></table></figure><h1 id="BBR和锐速"><a href="#BBR和锐速" class="headerlink" title="BBR和锐速"></a>BBR和锐速</h1><p>BBR和锐速都是用来提高翻墙速度的。</p><p>BBR是来自于Google的黑科技，目的是通过优化和控制TCP的拥塞，充分利用带宽并降低延迟，其目的就是要尽量跑满带宽，并且尽量不要有排队的情况。<br>BBR 这个特性其实是在 Linux 内核 4.9 才计划加入的。所以，要开启BBR，需要内核版本在Linux kernel 4.9以上，脚本会帮助我们安装。</p><p>在BBR之前，比较有名的就是国产的锐速了，不过，由于锐速是个国产的闭源软件，可能存在安全性问题，因此 <strong>推荐使用安装BBR</strong>。</p><ul><li><p>启动脚本：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure></li><li><p>选择<code>14. 其他功能</code></p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1. 配置 BBR</span><br><span class="line">  2. 配置 锐速(ServerSpeeder)</span><br><span class="line">  3. 配置 LotServer(锐速母公司)</span><br><span class="line">  注意： 锐速/LotServer/BBR 不支持 OpenVZ！</span><br><span class="line">  注意： 锐速/LotServer/BBR 不能共存！</span><br><span class="line">————————————</span><br><span class="line">  4. 一键封禁 BT/PT/SPAM (iptables)</span><br><span class="line">  5. 一键解封 BT/PT/SPAM (iptables)</span><br><span class="line">  6. 切换 ShadowsocksR日志输出模式</span><br><span class="line">  ——说明：SSR默认只输出错误日志，此项可切换为输出详细的访问日志</span><br></pre></td></tr></table></figure></li><li><p>安装BBR或者锐速(推荐BBR)</p></li></ul><h1 id="TCP优化"><a href="#TCP优化" class="headerlink" title="TCP优化"></a>TCP优化</h1><ul><li><p>增加TCP连接数量</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure></li><li><p>添加两行：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nofile 51200</span><br><span class="line">* hard nofile 51200</span><br></pre></td></tr></table></figure></li><li><p>设置ulimit：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ulimit -n 51200</span><br></pre></td></tr></table></figure></li><li><p>添加一些优化内容</p><ul><li><p>修改sysctl.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi  /etc/sysctl.conf</span><br></pre></td></tr></table></figure></li><li><p>插入代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#TCP配置优化(不然你自己根本不知道你在干什么)</span><br><span class="line">fs.file-max = 51200</span><br><span class="line">#提高整个系统的文件限制</span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line">net.core.netdev_max_backlog = 250000</span><br><span class="line">net.core.somaxconn = 4096</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line">net.ipv4.tcp_mem = 25600 51200 102400</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br><span class="line">#END OF LINE</span><br></pre></td></tr></table></figure></li><li><p>应用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>重启SSR</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssr restart</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>参考文档</strong>：</p><ol><li><a href="https://jasper-1024.github.io/2016/06/26/VPS%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">科学上网教程（一）——VPS上搭建SSR</a></li><li><a href="https://doub.io/ss-jc42" target="_blank" rel="noopener">『原创』CentOS/Debian/Ubuntu ShadowsocksR 单/多端口 一键管理脚本</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>给你的博客园图片添加标题</title>
      <link href="/%E7%BB%99%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%A0%87%E9%A2%98/"/>
      <url>/%E7%BB%99%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%A0%87%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一直以来都觉得在图片下面添加一个标题可以更加清晰的表示这张图片的含义，可是博客园原生并不支持这种渲染方式，再加上博客园可以自己写js来更改主题，于是通过搜索资料完成给博客园图片添加标题的功能。</p><a id="more"></a><p>当我们如下书写markdown时：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](https://images.morethink.cn/092017231747399.jpg "TCP的三次握手和四次挥手")</span><br></pre></td></tr></table></figure></p><p>会被博客园渲染成<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.morethink.cn/092017231747399.jpg"</span> <span class="attr">title</span>=<span class="string">"TCP的三次握手和四次挥手"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>于是我就想通过在img标签后面动态添加一个带有<code>title</code>的p标签来给博客园图片添加标题。</p><p>将下面代码放入<code>页首Html代码</code>代码中即可(需要申请js权限)。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//给每张图片添加标题,div.cnblogs_post_body是博客主体</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"div[id=cnblogs_post_body] img"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> title = $(<span class="keyword">this</span>).attr(<span class="string">"title"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (title != <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> boardp_style = <span class="string">"style='display: block; text-align: center; color: #969696;padding: 10px;border-bottom: 1px solid #d9d9d9;margin: 0 auto;"</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">"width: "</span> + ($(<span class="keyword">this</span>).width() * <span class="number">0.8</span>) + <span class="string">"px;"</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">"height: 28px;"</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">"'&gt;"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> boardp = <span class="string">"&lt;p "</span> + boardp_style + title + <span class="string">"&lt;/p"</span>;</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).after(boardp);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将img变为块级元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    img &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>markdown图片：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](https://images.morethink.cn/092017231747399.jpg "TCP的三次握手和四次挥手")</span><br></pre></td></tr></table></figure></p><p><img src="https://images.morethink.cn/092017231747399.jpg" alt="" title="TCP的三次握手和四次挥手"></p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Cron表达式</title>
      <link href="/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>Cron表达式范例：</strong></p><ul><li><code>*/5 * * * * ?</code>  ：每隔5<code>秒</code>执行一次</li><li><code>0 */1 * * * ?</code>  ：每隔1分钟执行一次</li><li><code>0 0 23 * * ?</code>   ：每天23点执行一次</li><li><code>0 0 1 * * ?</code>    ：每天凌晨1点执行一次：</li><li><code>0 0 1 1 * ?</code>  ：每月1号凌晨1点执行一次</li><li><code>0 0 23 L * ?</code> ： 每月最后一天23点执行一次</li><li><code>0 0 1 ? * L</code>  ：每周星期天凌晨1点实行一次</li><li><code>0 26,29,33 * * * ?</code> ： 在26分、29分、33分执行一次</li><li><code>0 0 0,13,18,21 * * ?</code> ： 每天的0点、13点、18点、21点都执行一次<a id="more"></a><h1 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h1></li></ul><p>Cron表达式由7个部分组成，各部分用空格隔开，Cron表达式的7个部分从左到右代表的含义如下：</p><p><code>秒</code> <code>分</code> <code>时</code> <code>日</code> <code>月</code> <code>周</code> <code>年</code><br>其中 <code>年</code>是可选的。</p><table><thead><tr><th>字段名</th><th>允许的值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td><code>秒</code></td><td>0-59</td><td>,- * /</td><td></td></tr><tr><td><code>分</code></td><td>0-59</td><td>,- * /</td><td></td></tr><tr><td><code>时</code></td><td>0-23</td><td>,- * /</td><td></td></tr><tr><td><code>日</code></td><td>1-31</td><td>,- * ? / L W C</td><td></td></tr><tr><td><code>月</code></td><td>1-12 or JAN-DEC</td><td>,- * /</td><td></td></tr><tr><td><code>周</code></td><td>1-7 or SUN-SAT</td><td>,- * ? / L C #</td><td></td></tr><tr><td><code>年</code> (可选字段)</td><td>empty，1970-2099</td><td>,- * /</td></tr></tbody></table><h1 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h1><ul><li><code>,</code>：表示列出枚举值值。例如在<code>分</code>使用5,20，则意味着在5和20分每分钟触发一次。</li><li><code>-</code>：表示范围。例如在<code>分</code>使用5-20，表示从5分到20分钟每分钟触发一次。</li><li><code>*</code> ：表示匹配该域的任意值。假如在<code>分</code>域使用<code>*</code>，即表示每分钟都会触发事件。</li><li><code>/</code> ：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次。</li><li><code>?</code> ：只能用在<code>周</code>和<code>日</code>。它也匹配域的任意值，但实际不会。因为<code>周</code>和<code>日</code>会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 <em> ?,其中最后一位只能用？，而不能使用</em>，如果使用*表示不管星期几都会触发，实际上并不是这样。    </li><li><code>L</code> ： 表示最后，只能出现在<code>日</code>和<code>周</code>，如果在<code>日</code>使用5L,意味着在最后的一个星期四触发。  </li><li><code>W</code>：表示有效工作日(周一到周五),只能出现在<code>周</code>域，系统将在离指定日期的最近的有效工作日触发事件。例如：在<code>日</code>使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份。</li><li><code>#</code>：用于确定每个月第几个星期几，只能出现在<code>周</code>。例如在4#2，表示某月的第二个星期三。</li></ul><p><strong>参考文档</strong>：</p><ol><li><a href="http://Cron.qqe2.com/" target="_blank" rel="noopener">在线Cron表达式生成器</a></li><li><a href="https://www.jianshu.com/p/f03b1497122a" target="_blank" rel="noopener">QuartZ Cron表达式详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GitHub更新已经fork的项目</title>
      <link href="/GitHub%E6%9B%B4%E6%96%B0%E5%B7%B2%E7%BB%8Ffork%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/GitHub%E6%9B%B4%E6%96%B0%E5%B7%B2%E7%BB%8Ffork%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>当我们fork一个项目后，在我们使用代码的时候就会以我们本地为准，不会跟随我们fork前的项目，如果需要同步对方的代码，需要进行同步操作。</p><a id="more"></a><ol><li>clone 自己的 fork 分支到本地<br>可以直接使用 GitHub 客户端，clone 到本地，如果使用命令行，命令为：<br><code>$ git clone  git@github.com:morethink/git-recipes.git</code></li><li><p>进入仓库，增加源分支地址到你项目远程分支列表中<br>此处是关键，先得将原来的仓库指定为 upstream，命令为：<br><code>$ git remote add upstream git@github.com:geeeeeeeeek/git-recipes.git</code><br>此处可使用 <code>git remote -v</code> 查看远程分支列表</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:morethink/git-recipes.git (fetch)</span><br><span class="line">origingit@github.com:morethink/git-recipes.git (push)</span><br><span class="line">upstreamgit@github.com:geeeeeeeeek/git-recipes.git (fetch)</span><br><span class="line">upstreamgit@github.com:geeeeeeeeek/git-recipes.git (push)</span><br></pre></td></tr></table></figure></li><li><p>fetch 源分支的新版本到本地<br><code>$ git fetch upstream</code></p></li><li>切换到本地master分支<br><code>$ git checkout master</code></li><li>合并两个版本的代码<br><code>$ git merge upstream/master</code></li><li>将合并后的代码 push 到 GitHub 上去<br><code>$ git push origin master</code></li></ol><p><strong>参考文档：</strong></p><ol><li>添加远程分支<br><a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/" target="_blank" rel="noopener">https://help.github.com/articles/configuring-a-remote-for-a-fork/</a></li><li>完成同步<br><a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="noopener">https://help.github.com/articles/syncing-a-fork/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见web攻击总结</title>
      <link href="/%E5%B8%B8%E8%A7%81web%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/"/>
      <url>/%E5%B8%B8%E8%A7%81web%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>搞Web开发离不开安全这个话题，确保网站或者网页应用的安全性，是每个开发人员都应该了解的事。本篇主要简单介绍在Web领域几种常见的攻击手段及Java Web中的预防方式。</p><ul><li><a href="#XSS">XSS</a></li><li><a href="#SQL注入">SQL注入</a></li><li><a href="#DDOS">DDOS</a></li><li><a href="#CSRF">CSRF</a></li></ul><a id="more"></a><p>项目地址： <a href="https://github.com/morethink/web-security" target="_blank" rel="noopener">https://github.com/morethink/web-security</a></p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h2><p>XSS攻击：跨站脚本攻击(Cross-Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。XSS是一种常见的web安全漏洞，它允许攻击者将恶意代码植入到提供给其它用户使用的页面中。不同于大多数攻击(一般只涉及攻击者和受害者)，XSS涉及到三方，即攻击者、客户端与Web应用。XSS的攻击目标是为了盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互。</p><p>XSS通常可以分为两大类：</p><ol><li>存储型XSS，主要出现在让用户输入数据，供其他浏览此页的用户进行查看的地方，包括留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来，攻击者在相关页面输入恶意的脚本数据后，用户浏览此类页面时就可能受到攻击。这个流程简单可以描述为：<code>恶意用户的Html输入Web程序-&gt;进入数据库-&gt;Web程序-&gt;用户浏览器</code>。</li><li>反射型XSS，主要做法是将脚本代码加入URL地址的请求参数里，请求参数进入程序后在页面直接输出，用户点击类似的恶意链接就可能受到攻击。</li></ol><p>比如说我写了一个网站，然后攻击者在上面发布了一个文章，内容是这样的 <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>,如果我没有对他的内容进行处理，直接存储到数据库，那么下一次当其他用户访问他的这篇文章的时候，服务器从数据库读取后然后响应给客户端，浏览器执行了这段脚本，就会将cookie展现出来，这就是典型的存储型XSS。</p><p>如图：<br><img src="https://images.morethink.cn/a1c6ebf6de227e086d0289f34d8c5f76.png" alt=""></p><h2 id="如何预防XSS"><a href="#如何预防XSS" class="headerlink" title="如何预防XSS"></a>如何预防XSS</h2><p>答案很简单，坚决不要相信用户的任何输入，并过滤掉输入中的所有特殊字符。这样就能消灭绝大部分的XSS攻击。</p><p>目前防御XSS主要有如下几种方式：</p><ol><li>过滤特殊字符<br>避免XSS的方法之一主要是将用户所提供的内容进行过滤(如上面的<code>script</code>标签)。</li><li>使用HTTP头指定类型<br><code>w.Header().Set(&quot;Content-Type&quot;,&quot;text/javascript&quot;)</code><br>这样就可以让浏览器解析javascript代码，而不会是html输出。</li></ol><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p>攻击者成功的向服务器提交恶意的SQL查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。</p><p>举例：<code>&#39; OR &#39;1&#39;=&#39;1</code></p><p>这是最常见的 SQL注入攻击，当我们输如用户名 admin ，然后密码输如<code>&#39; OR &#39;1&#39;=1=&#39;1</code>的时候，我们在查询用户名和密码是否正确的时候，本来要执行的是<code>SELECT * FROM user WHERE username=&#39;&#39; and password=&#39;&#39;</code>,经过参数拼接后，会执行 SQL语句 <code>SELECT * FROM user WHERE username=&#39;&#39; and password=&#39;&#39; OR &#39;1&#39;=&#39;1&#39;</code>，这个时候1=1是成立，自然就跳过验证了。<br>如下图所示：</p><p><img src="https://images.morethink.cn/69855b1538333659f26afc281feb4e30.png" alt=""></p><p>但是如果再严重一点，密码输如的是<code>&#39;;DROP TABLE user;--</code>，那么 SQL命令为<code>SELECT *  FROM user WHERE username=&#39;admin&#39; and password=&#39;&#39;;drop table user;--&#39;</code> 这个时候我们就直接把这个表给删除了。</p><h2 id="如何预防SQL注入"><a href="#如何预防SQL注入" class="headerlink" title="如何预防SQL注入"></a>如何预防SQL注入</h2><ul><li>在Java中，我们可以使用预编译语句(PreparedStatement)，这样的话即使我们使用 SQL语句伪造成参数，到了服务端的时候，这个伪造 SQL语句的参数也只是简单的字符，并不能起到攻击的作用。</li><li>对进入数据库的特殊字符（<code>&#39;&quot;\尖括号&amp;*</code>;等）进行转义处理，或编码转换。</li><li>在应用发布之前建议使用专业的SQL注入检测工具进行检测，以及时修补被发现的SQL注入漏洞。网上有很多这方面的开源工具，例如sqlmap、SQLninja等。</li><li>避免网站打印出SQL错误信息，比如类型错误、字段不匹配等，把代码里的SQL语句暴露出来，以防止攻击者利用这些错误信息进行SQL注入。</li></ul><p>在上图展示中，使用了Java JDBC中的<code>PreparedStatement</code>预编译预防SQL注入，可以看到将所有输入都作为了字符串，避免执行恶意SQL。</p><h1 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h1><h2 id="什么是DDOS"><a href="#什么是DDOS" class="headerlink" title="什么是DDOS"></a>什么是DDOS</h2><p>DDOS：分布式拒绝服务攻击（Distributed Denial of Service），简单说就是发送大量请求是使服务器瘫痪。DDos攻击是在DOS攻击基础上的，可以通俗理解，dos是单挑，而ddos是群殴，因为现代技术的发展，dos攻击的杀伤力降低，所以出现了DDOS，攻击者借助公共网络，将大数量的计算机设备联合起来，向一个或多个目标进行攻击。</p><p>在技术角度上，DDoS攻击可以针对网络通讯协议的各层，手段大致有：TCP类的SYN Flood、ACK Flood，UDP类的Fraggle、Trinoo，DNS Query Flood，ICMP Flood，Slowloris类等等。一般会根据攻击目标的情况，针对性的把技术手法混合，以达到最低的成本最难防御的目的，并且可以进行合理的节奏控制，以及隐藏保护攻击资源。</p><p>下面介绍一下TCP协议中的SYN攻击。</p><h2 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h2><p>在三次握手过程中，服务器发送 <code>SYN-ACK</code> 之后，收到客户端的 <code>ACK</code> 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 <code>SYN_RCVD</code> 状态。当收到 ACK 后，服务器才能转入 <code>ESTABLISHED</code> 状态.</p><p><code>SYN</code>攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送<code>SYN</code>包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的<code>SYN</code>包将长时间占用未连接队列，正常的<code>SYN</code>请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p><h2 id="如何预防DDOS"><a href="#如何预防DDOS" class="headerlink" title="如何预防DDOS"></a>如何预防DDOS</h2><p>阿里巴巴的安全团队在实战中发现，DDoS 防御产品的核心是检测技术和清洗技术。检测技术就是检测网站是否正在遭受 DDoS 攻击，而清洗技术就是清洗掉异常流量。而检测技术的核心在于对业务深刻的理解，才能快速精确判断出是否真的发生了 DDoS 攻击。清洗技术对检测来讲，不同的业务场景下要求的粒度不一样。</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h2><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p><p>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><h2 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h2><p>下图简单阐述了CSRF攻击的思<br><img src="https://images.morethink.cn/138ad4f05b47533bf46904dc165167cc.png" alt=""></p><p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><ol><li>登录受信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ol><p>看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p><ol><li>你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</li><li>你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</li><li>上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</li></ol><p>下面讲一讲java解决CSRF攻击的方式。</p><h2 id="模拟CSRF攻击"><a href="#模拟CSRF攻击" class="headerlink" title="模拟CSRF攻击"></a>模拟CSRF攻击</h2><h3 id="登录A网站"><a href="#登录A网站" class="headerlink" title="登录A网站"></a>登录A网站</h3><p>用户名和密码都是admin。</p><p><code>http://localhost:8081/login.html</code>:<br><img src="https://images.morethink.cn/e298f8ef08869557b8fb60034f06bb80.png" alt=""></p><h3 id="你有权限删除1号帖子"><a href="#你有权限删除1号帖子" class="headerlink" title="你有权限删除1号帖子"></a>你有权限删除1号帖子</h3><p><code>http://localhost:8081/deletePost.html</code>:<br><img src="https://images.morethink.cn/897d358f2677d053bb9555ff69d112ac.png" alt=""></p><h3 id="登录有CSRF攻击A网站的B网站"><a href="#登录有CSRF攻击A网站的B网站" class="headerlink" title="登录有CSRF攻击A网站的B网站"></a>登录有CSRF攻击A网站的B网站</h3><p><code>http://localhost:8082/deletePost.html</code>:</p><p><img src="https://images.morethink.cn/csrf-attack.gif" alt=""></p><p>明显看到B网站是8082端口，A网站是8081端口，但是B网站的删除2号帖子功能依然实现。</p><h2 id="如何预防CSRF攻击"><a href="#如何预防CSRF攻击" class="headerlink" title="如何预防CSRF攻击"></a>如何预防CSRF攻击</h2><p>简单来说，CSRF 就是网站 A 对用户建立信任关系后，在网站 B 上利用这种信任关系，跨站点向网站 A 发起一些伪造的用户操作请求，以达到攻击的目的。</p><p>而之所以可以完成攻击是因为B向A发起攻击的时候会把A网站的cookie带给A网站，也就是说cookie已经不安全了。</p><h3 id="通过Synchronizer-Tokens"><a href="#通过Synchronizer-Tokens" class="headerlink" title="通过Synchronizer Tokens"></a>通过Synchronizer Tokens</h3><p>Synchronizer Tokens： 在表单里隐藏一个随机变化的 csrf_token csrf_token 提交到后台进行验证，如果验证通过则可以继续执行操作。这种情况有效的主要原因是网站 B 拿不到网站 A 表单里的 csrf_token</p><p>这种方式的使用条件是PHP和JSP等。因为cookie已经不安全了，因此把csrf_token值存储在session中，然后每次表单提交时都从session取出来放到form表单的隐藏域中，这样B网站不可以得到这个存储到session中的值。</p><p>下面是JSP的：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;input type="hidden" name="random_form" value=&lt;%=random%&gt;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure></p><p>但是我现在的情况是html，不是JSP，并不能动态的从session中取出csrf_token值。只能采用加密的方式了。</p><h3 id="Hash加密cookie中csrf-token值"><a href="#Hash加密cookie中csrf-token值" class="headerlink" title="Hash加密cookie中csrf_token值"></a>Hash加密cookie中csrf_token值</h3><p>这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了。</p><p>我采用的hash加密方法是JS实现Java的HashCode方法，得到hash值，这个比较简单。也可以采用其他的hash算法。</p><p>前端向后台传递hash之后的csrf_token值和cookie中的csrf_token值，后台拿到cookie中的csrf_token值后得到hashCode值然后与前端传过来的值进行比较，一样则通过。</p><h4 id="你有权限删除3号帖子"><a href="#你有权限删除3号帖子" class="headerlink" title="你有权限删除3号帖子"></a>你有权限删除3号帖子</h4><p><code>http://localhost:8081/deletePost.html</code></p><p><img src="https://images.morethink.cn/2ac5eab98780646c6c36dcdc98fa50c7.png" alt=""></p><h4 id="B网站的他已经没有权限了"><a href="#B网站的他已经没有权限了" class="headerlink" title="B网站的他已经没有权限了"></a>B网站的他已经没有权限了</h4><p>我们通过UserFilter.java给攻击者返回的是403错误，表示服务器理解用户客户端的请求但拒绝处理。</p><p><code>http://localhost:8082/deletePost.html</code>:<br><img src="https://images.morethink.cn/csrf-attack-fail-failure.gif" alt=""></p><p>攻击者不能删除4号帖子。</p><p>前端代码：</p><p>deletePost.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>deletePost<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">deletePost</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> url = <span class="string">'/post/'</span> + <span class="built_in">document</span>.getElementById(<span class="string">"postId"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrf_token = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/(?:(?:^|.*;\s*)csrf_token\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">"$1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'csrf_token='</span> + csrf_token);</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                type: <span class="string">"post"</span>,<span class="comment">//请求方式</span></span></span><br><span class="line"><span class="javascript">                url: url,  <span class="comment">//发送请求地址</span></span></span><br><span class="line"><span class="javascript">                timeout: <span class="number">30000</span>,<span class="comment">//超时时间：30秒</span></span></span><br><span class="line"><span class="undefined">                data: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"_method"</span>: <span class="string">"delete"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"csrf_token"</span>: hash(csrf_token) <span class="comment">// 对csrf_token进行hash加密</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">"json"</span>,<span class="comment">//设置返回数据的格式</span></span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (result.message == <span class="string">"success"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#result"</span>).text(<span class="string">"删除成功"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#result"</span>).text(<span class="string">"删除失败"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//请求出错的处理</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#result"</span>).text(<span class="string">"请求出错"</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// javascript的String到int(32位)的hash算法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hash = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (str.length == <span class="number">0</span>) <span class="keyword">return</span> hash;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">                char = str.charCodeAt(i);</span></span><br><span class="line"><span class="undefined">                hash = ((hash &lt;&lt; 5) - hash) + char;</span></span><br><span class="line"><span class="javascript">                hash = hash &amp; hash; <span class="comment">// Convert to 32bit integer</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> hash;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>删除帖子<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">帖子编号 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"postId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"deletePost();"</span>&gt;</span>deletePost<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台代码：</p><p>UserInterceptor.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.morethink.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.morethink.util.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> cn.morethink.util.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/1/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"POST"</span>) || method.equalsIgnoreCase(<span class="string">"DELETE"</span>)</span><br><span class="line">                || method.equalsIgnoreCase(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">            String csrf_token = request.getParameter(<span class="string">"csrf_token"</span>);</span><br><span class="line">            Cookie[] cookies = request.getCookies();</span><br><span class="line">            <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span> &amp;&amp; csrf_token != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"csrf_token"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Integer.valueOf(csrf_token) == cookie.getValue().hashCode()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result(<span class="string">"403"</span>, <span class="string">"你还想攻击我??????????"</span>, <span class="string">""</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(JsonUtil.toJson(result));</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>cookie必须要设置PATH才可以生效，否则在下一次请求的时候无法带给服务器。</li><li>Spring Boot 出现启动找不到主类的问题时可以mvn clean一下。</li><li>Filter设置response.sendError(403)在Spring Boot没有效果。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面一共提到了4种攻击方式，分别是XSS攻击（关键是脚本，利用恶意脚本发起攻击），SQL注入（关键是通过用SQL语句伪造参数发出攻击），DDOS攻击（关键是发出大量请求，最后令服务器崩溃），CSRF攻击（关键是借助本地cookie进行认证，伪造发送请求）。</p><p><strong>参考文档</strong>：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/24249045" target="_blank" rel="noopener">XSS实战：我是如何拿下你的百度账号</a></li><li><a href="http://www.cnblogs.com/-new/p/7135814.html" target="_blank" rel="noopener">总结几种常见web攻击手段及其防御方式</a></li><li><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">浅谈CSRF攻击方式</a></li><li><a href="http://blog.csdn.net/zzhongcy/article/details/20133883" target="_blank" rel="noopener">jQueue 动态设置form表单的action属性的值和方法</a></li><li><a href="https://www.thinksaas.cn/group/topic/304242/" target="_blank" rel="noopener">javascript的String到int(32位)的hash算法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git同时push到多个远程仓库</title>
      <link href="/Git%E5%90%8C%E6%97%B6push%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/Git%E5%90%8C%E6%97%B6push%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>添加第二个远程地址时使用以下命令：<br><code>git remote set-url --add origin git@github.com:morethink/programming.git</code></p><p>查看远程分支：<code>git remote -v</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origingit@git.coding.net:morethink/programming.git (fetch)</span><br><span class="line">origingit@git.coding.net:morethink/programming.git (push)</span><br><span class="line">originhexo@MyHost2:/var/repo/gitbook.git (push)</span><br></pre></td></tr></table></figure><p>也可以同时 push 到多个远程地址：<code>git push origin master</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Everything up-to-date</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树从右边看到的节点</title>
      <link href="/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%8E%E5%8F%B3%E8%BE%B9%E7%9C%8B%E5%88%B0%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%8E%E5%8F%B3%E8%BE%B9%E7%9C%8B%E5%88%B0%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>本文是对 LeetCode <a href="https://leetcode.com/problems/binary-tree-right-side-view/description/" target="_blank" rel="noopener">Binary Tree Right Side View</a> 解法的探讨。</p><p>题目：<br>Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.<br><a id="more"></a><br>For example:<br>Given the following binary tree,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1            &lt;---</span><br><span class="line"> /   \</span><br><span class="line">2     3         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  5     4       &lt;---</span><br></pre></td></tr></table></figure></p><p>You should return [1, 3, 4].</p><p>解法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 因为题目的二叉树并不是满二叉树，所以采用层序遍历的方式。</span></span><br><span class="line"><span class="comment"> * 将以前层序遍历中一个个出队的方式变为一层层出队，</span></span><br><span class="line"><span class="comment"> * 这样就能定位最右边的节点。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="comment">//将每一层的节点都出队</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode treeNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(treeNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(treeNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(treeNode.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>求小于n的素数个数</title>
      <link href="/%E6%B1%82%E5%B0%8F%E4%BA%8En%E7%9A%84%E7%B4%A0%E6%95%B0%E4%B8%AA%E6%95%B0/"/>
      <url>/%E6%B1%82%E5%B0%8F%E4%BA%8En%E7%9A%84%E7%B4%A0%E6%95%B0%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>本文是对 LeetCode <a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="noopener">Count Primes</a> 解法的探讨。</p><p>题目：<br>Count the number of prime numbers less than a non-negative number, n.</p><p>尽管题目并没有要我们写一个最优的算法，但是身为一个程序员，优化应该是一种习惯，在编程的过程中，随着思考进行优化。只要求我们满足给定的时间和空间即可。</p><p>如果你只能想出一个最简单的方法，难道你会有什么竞争力吗？</p><a id="more"></a><h1 id="穷举"><a href="#穷举" class="headerlink" title="穷举"></a>穷举</h1><p>最开始我用的就是这个方法，可以说这是最简单的一种方法了，而且最开始，我就是想的这种方法，说明：我没有对这个问题进行思考，没有去优化它，而作为一个程序员，如何提高效率是拿到一个问题首先要思考的事情。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i - <span class="number">1</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取开始时</span></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"The num is "</span> + <span class="keyword">new</span> L_204_Count_Primes().countPrimes(<span class="number">2000000</span>));</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//获取结束时间</span></span><br><span class="line">    System.out.println(<span class="string">"程序运行时间： "</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间太长，已经不能计算。</p></blockquote><h1 id="只能是奇数且小于-sqrt-n"><a href="#只能是奇数且小于-sqrt-n" class="headerlink" title="只能是奇数且小于$\sqrt{n}$"></a>只能是奇数且小于$\sqrt{n}$</h1><p>思考后发现</p><ol><li>素数一定是奇数</li><li>若 n=ab 是个合数（其中 a 与 b ≠ 1）, 则其中一个约数 a 或 b 必定至大为  $\sqrt{n}$.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= (<span class="keyword">int</span>) Math.sqrt(i); j++)</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The num is 148933<br>程序运行时间： 1124ms</p></blockquote><h1 id="试除法：数学知识的运用"><a href="#试除法：数学知识的运用" class="headerlink" title="试除法：数学知识的运用"></a>试除法：数学知识的运用</h1><p>查阅 <a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">算术基本定理</a>可知：</p><blockquote><p><strong>算术基本定理</strong> :<br>每个大于1的整数均可写成一个以上的素数之乘积，且除了质约数的排序不同外是唯一的</p></blockquote><p>也就是说我们可以每个数来除以得到的素数，这样可大大减少运行次数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//0 1 不算做素数,2一定是素数</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.size() &amp;&amp; list.get(j) &lt;= (<span class="keyword">int</span>) Math.sqrt(n); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % list.get(j) == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The num is 148933<br>程序运行时间： 383ms</p></blockquote><h1 id="筛选法"><a href="#筛选法" class="headerlink" title="筛选法"></a>筛选法</h1><blockquote><p>埃拉托斯特尼筛法，简称埃氏筛，也有人称素数筛。这是一种简单且历史悠久的筛法，用来找出一定范围内所有的素数。</p><p>所使用的原理是从2开始，将每个素数的各个倍数，标记成合数。一个素数的各个倍数，是一个差为此素数本身的等差数列。此为这个筛法和试除法不同的关键之处，后者是以素数来测试每个待测数能否被整除。</p></blockquote><p>筛选法的策略是将素数的倍数全部筛掉，剩下的就是素数了，下图很生动的体现了筛选的过程：</p><p><img src="https://images.morethink.cn/dcp5x843_338cbm3tmg7_b.gif" alt="" title="筛选法"></p><p>筛选的过程是先筛掉非素数，针对本文的题目，每筛掉一个，素数数量-1即可，上面说过素数的一个特点，除了2，其它的素数都是奇数，所以我们只需在奇数范围内筛选就可以了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes4</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//false代表素数，true代表非素数</span></span><br><span class="line">    <span class="keyword">boolean</span>[] flags = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">    <span class="comment">//0不是素数</span></span><br><span class="line">    flags[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//1不是素数</span></span><br><span class="line">    flags[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> num = n - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= (<span class="keyword">int</span>) Math.sqrt(n); i++) &#123;</span><br><span class="line">        <span class="comment">//当i为素数时，i的所有倍数都不是素数</span></span><br><span class="line">        <span class="keyword">if</span> (!flags[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt; n; j += i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flags[j]) &#123;</span><br><span class="line">                    flags[j] = <span class="keyword">true</span>;</span><br><span class="line">                    num--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The num is 148933<br>程序运行时间： 43ms</p></blockquote><p>全部代码放在：<br> <a href="https://github.com/morethink/algorithm/blob/master/src/algorithm/leetcode/L_204_Count_Primes.java" target="_blank" rel="noopener">https://github.com/morethink/algorithm/blob/master/src/algorithm/leetcode/L_204_Count_Primes.java</a></p><p><strong>参考文档</strong>：</p><ol><li><a href="https://program-think.blogspot.com/2011/12/prime-algorithm-1.html" target="_blank" rel="noopener">求质数算法的N种境界[1] - 试除法和初级筛法</a></li><li><a href="http://blog.csdn.net/ghsau/article/details/78768157" target="_blank" rel="noopener"> 求素数个数</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="noopener">埃拉托斯特尼筛法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java实现单链表的快速排序和归并排序</title>
      <link href="/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>本文描述了LeetCode 148题 <a href="https://leetcode.com/problems/sort-list/description/" target="_blank" rel="noopener">sort-list</a> 的解法。</p><p>题目描述如下:<br>Sort a linked list in O(n log n) time using constant space complexity.</p><p>题目要求我们在O(n log n)时间复杂度下完成对单链表的排序，我们知道平均时间复杂度为O(n log n)的排序方法有快速排序、归并排序和堆排序。而一般是用数组来实现二叉堆，当然可以用二叉树来实现，但是这么做太麻烦，还得花费额外的空间构建二叉树，于是不采用堆排序。<br><a id="more"></a><br>故本文采用快速排序和归并排序来对单链表进行排序。</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>在一般实现的快速排序中，我们通过首尾指针来对元素进行切分，下面采用快排的另一种方法来对元素进行切分。</p><p>我们只需要两个指针p1和p2，这两个指针均往next方向移动，移动的过程中保持p1之前的key都小于选定的key，p1和p2之间的key都大于选定的key，那么当p2走到末尾时交换p1与key值便完成了一次切分。</p><p>图示如下：<br><img src="http://img.blog.csdn.net/20140326225106296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG91ZmVpX2Njc3Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//采用快速排序</span></span><br><span class="line">   quickSort(head, <span class="keyword">null</span>);</span><br><span class="line">   <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(ListNode head, ListNode end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head != end) &#123;</span><br><span class="line">        ListNode node = partion(head, end);</span><br><span class="line">        quickSort(head, node);</span><br><span class="line">        quickSort(node.next, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">partion</span><span class="params">(ListNode head, ListNode end)</span> </span>&#123;</span><br><span class="line">    ListNode p1 = head, p2 = head.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//走到末尾才停</span></span><br><span class="line">    <span class="keyword">while</span> (p2 != end) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//大于key值时，p1向前走一步，交换p1与p2的值</span></span><br><span class="line">        <span class="keyword">if</span> (p2.val &lt; head.val) &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> temp = p1.val;</span><br><span class="line">            p1.val = p2.val;</span><br><span class="line">            p2.val = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有序时，不交换p1和key值</span></span><br><span class="line">    <span class="keyword">if</span> (p1 != head) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = p1.val;</span><br><span class="line">        p1.val = head.val;</span><br><span class="line">        head.val = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序应该算是链表排序最佳的选择了，保证了最好和最坏时间复杂度都是nlogn，而且它在数组排序中广受诟病的空间复杂度在链表排序中也从O(n)降到了O(1)。</p><p>归并排序的一般步骤为：</p><ol><li>将待排序数组（链表）取中点并一分为二；</li><li>递归地对左半部分进行归并排序；</li><li>递归地对右半部分进行归并排序；</li><li>将两个半部分进行合并（merge）,得到结果。</li></ol><p>首先用快慢指针(快慢指针思路，快指针一次走两步，慢指针一次走一步，快指针在链表末尾时，慢指针恰好在链表中点)的方法找到链表中间节点，然后递归的对两个子链表排序，把两个排好序的子链表合并成一条有序的链表。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//采用归并排序</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取中间结点</span></span><br><span class="line">    ListNode mid = getMid(head);</span><br><span class="line">    ListNode right = mid.next;</span><br><span class="line">    mid.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//合并</span></span><br><span class="line">    <span class="keyword">return</span> mergeSort(sortList(head), sortList(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取链表的中间结点,偶数时取中间第一个</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">getMid</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快慢指针</span></span><br><span class="line">    ListNode slow = head, quick = head;</span><br><span class="line">    <span class="comment">//快2步，慢一步</span></span><br><span class="line">    <span class="keyword">while</span> (quick.next != <span class="keyword">null</span> &amp;&amp; quick.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        quick = quick.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 归并两个有序的链表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">mergeSort</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    ListNode p1 = head1, p2 = head2, head;</span><br><span class="line">   <span class="comment">//得到头节点的指向</span></span><br><span class="line">    <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">        head = head1;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        head = head2;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode p = head;</span><br><span class="line">    <span class="comment">//比较链表中的值</span></span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p1.val &lt;= p2.val) &#123;</span><br><span class="line">            p.next = p1;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = p2;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二条链表空了</span></span><br><span class="line">    <span class="keyword">if</span> (p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一条链表空了</span></span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码放在：<br><a href="https://github.com/morethink/algorithm/blob/master/src/main/java/algorithm/leetcode/L_148_SortList.java" target="_blank" rel="noopener">https://github.com/morethink/algorithm/blob/master/src/main/java/algorithm/leetcode/L_148_SortList.java</a></p><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.cnblogs.com/TenosDoIt/p/3666585.html" target="_blank" rel="noopener">链表排序（冒泡、选择、插入、快排、归并、希尔、堆排序）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java实现八大排序算法</title>
      <link href="/Java%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/Java%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本文对常见的排序算法进行了总结。</p><p>常见排序算法如下：</p><ol><li><a href="#直接插入排序">直接插入排序</a></li><li><a href="#希尔排序">希尔排序</a></li><li><a href="#简单选择排序">简单选择排序</a></li><li><a href="#堆排序">堆排序</a></li><li><a href="#冒泡排序">冒泡排序</a></li><li><a href="#快速排序">快速排序</a></li><li><a href="#归并排序">归并排序</a></li><li><a href="#基数排序">基数排序</a></li></ol><a id="more"></a><p>它们都属于内部排序，也就是只考虑数据量较小仅需要使用内存的排序算法，他们之间关系如下：<br>$$<br>\begin{cases}内部排序 \begin{cases}插入排序\begin{cases}直接插入排序\希尔排序\end{cases}\选择排序\begin{cases}简单选择排序\堆排序\end{cases}\交换排序\begin{cases}冒泡排序\快速排序 \end{cases}\归并排序\<br>基数排序\end{cases}\外部排序 \end{cases}<br>$$</p><p>$$<br>\left{\begin{matrix}<br>内部排序\<br>外部排序<br>\end{matrix}\right.<br>$$</p><p><strong>稳定与非稳定</strong>:</p><p>如果一个排序算法能够保留数组中重复元素的相对位置则可以被称为是 <strong>稳定</strong> 的。反之，则是 <strong>非稳定</strong> 的。</p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>通常人们整理桥牌的方法是一张一张的来，将每一张牌插入到其他已经有序的牌中的适当位置。在计算机的实现中，为了要给插入的元素腾出空间，我们需要将其余所有元素在插入之前都向右移动一位。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><p>动态效果如下：</p><p><img src="https://images.morethink.cn/28749729-ca072084-7503-11e7-881c-92aa915ce369.gif" alt=""></p><p><strong>注意</strong>：<br>如果 <em>比较操作</em> 的代价比 <em>交换操作</em> 大的话，可以采用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95" target="_blank" rel="noopener">二分查找法</a>来减少 <em>比较操作</em> 的数目。该算法可以认为是 <strong>插入排序</strong> 的一个变种，称为<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">二分查找插入排序</a>。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过交换进行插入排序，借鉴冒泡排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                a[j - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过将较大的元素都向右移动而不总是交换两个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = a[i];</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; num &lt; a[j]; j--) &#123;</span><br><span class="line">            a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>直接插入排序复杂度如下：</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><h2 id="比较与总结"><a href="#比较与总结" class="headerlink" title="比较与总结"></a>比较与总结</h2><p>插入排序所需的时间取决于输入元素的初始顺序。例如，对一个很大且其中的元素已经有序(或接近有序)的数组进行排序将会比随机顺序的数组或是逆序数组进行排序要快得多。</p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序，也称 <strong>递减增量排序算法</strong>，是插入排序的一种更高效的改进版本。希尔排序是 <strong>非稳定排序算法</strong>。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一</li></ul><p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h2 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h2><p>将待排序数组按照步长gap进行分组，然后将每组的元素利用直接插入排序的方法进行排序；每次再将gap折半减小，循环上述操作；当gap=1时，利用直接插入，完成排序。</p><p>可以看到步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。一般来说最简单的步长取值是<strong>初次取数组长度的一半</strong>为增量，之后每次再减半，直到增量为1。更好的步长序列取值可以参考<a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F#.E6.AD.A5.E9.95.BF.E5.BA.8F.E5.88.97" target="_blank" rel="noopener">维基百科</a>。</p><h2 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><p>效果如下：</p><p><img src="https://images.morethink.cn/4697893fd8a952d01956e192640c1c3c.png" alt=""></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面参考《算法》中给出的步长选择策略，《算法》中给出的解释是</p><blockquote><p>下面代码中递增序列的计算和使用都很简单，和复杂递增序列的性能接近。当可以证明复杂的序列在最坏情况下的性能要好于我们所使用的递增序列。更加优秀的递增序列有待我们去发现。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = a.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; length / <span class="number">3</span>) h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; h &gt;= <span class="number">1</span>; h /= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - h; i += h) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + h; j &gt; <span class="number">0</span>; j -= h) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &lt; a[j - h]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                    a[j] = a[j - h];</span><br><span class="line">                    a[j - h] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>以下是希尔排序复杂度:</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog2 n)</td><td>O(nlog2 n)</td><td>O(nlog2 n)</td><td>O(1)</td></tr></tbody></table><h2 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h2><p>希尔排序更高效的原因是它权衡了子数组的规模和有序性。排序之初，各个子数组都很短，排序之后子数组都是部分有序的，这两种情况都很适合插入排序。</p><h1 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h1><h2 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h2><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对 n个元素的表进行排序总共进行至多 n-1 次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><h2 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>从未排序序列中，找到关键字最小的元素</li><li>如果最小元素不是未排序序列的第一个元素，将其和未排序序列第一个元素互换</li><li>重复1、2步，直到排序结束。</li></ol><p>动图效果如下所示：<br><img src="https://images.morethink.cn/28749720-90304278-7503-11e7-9bc8-e3b56539d8bf.gif" alt=""></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="comment">//选出之后待排序中值最小的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最小值不等于当前值时进行交换</span></span><br><span class="line">        <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[min];</span><br><span class="line">            a[min] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>以下是选择排序复杂度:</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><h2 id="总结与思考-1"><a href="#总结与思考-1" class="headerlink" title="总结与思考"></a>总结与思考</h2><p>选择排序的简单和直观名副其实，这也造就了它”出了名的慢性子”，无论是哪种情况，哪怕原数组已排序完成，它也将花费将近n²/2次遍历来确认一遍。即便是这样，它的排序结果也还是不稳定的。 唯一值得高兴的是，它并不耗费额外的内存空间。</p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><p>1991年的计算机先驱奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德(Robert W．Floyd) 和威廉姆斯(J．Williams) 在1964年共同发明了著名的堆排序算法(Heap Sort).</p></blockquote><p>堆的定义如下：$n$个元素的序列{k1,k2,..,kn}<br>当且仅当满足下关系时，称之为堆。</p><p><img src="https://images.morethink.cn/a59e9c9d21c72944dac53b59b745a5cc.png" alt=""></p><p>把此序列对应的二维数组看成一个完全二叉树。那么堆的含义就是：<strong>完全二叉树中任何一个非叶子节点的值均不大于（或不小于）其左，右孩子节点的值。</strong> 由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。因此我们可使用大顶堆进行升序排序, 使用小顶堆进行降序排序。</p><h2 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h2><p>此处以大顶堆为例，堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><h2 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>先将初始序列$K[1..n]$建成一个大顶堆, 那么此时第一个元素$K_1$最大, 此堆为初始的无序区.</li><li>再将关键字最大的记录$K_1$ (即堆顶, 第一个元素)和无序区的最后一个记录 $K_n$ 交换, 由此得到新的无序区$K[1..n-1]$和有序区$K[n]$, 且满足$K[1..n-1].keys \leqslant K[n].key$</li><li>交换$K_1$ 和 $K_n$ 后, 堆顶可能违反堆性质, 因此需将$K[1..n-1]$调整为堆. 然后重复步骤2, 直到无序区只有一个元素时停止。</li></ol><p>动图效果如下所示：</p><p><img src="https://images.morethink.cn/heap_sort_gif.gif" alt="堆排序过程"></p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆函数，二是反复调用建堆函数以选择出剩余未排元素中最大的数来实现排序的函数。</p><p>总结起来就是定义了以下几种操作：</p><ul><li>最大堆调整（Max_Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点</li><li>创建最大堆（Build_Max_Heap）：将堆所有数据重新排序</li><li>堆排序（HeapSort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算</li></ul><p>对于堆节点的访问：</p><ul><li>父节点i的左子节点在位置：<code>(2*i+1)</code>;</li><li>父节点i的右子节点在位置：<code>(2*i+2)</code>;</li><li>子节点i的父节点在位置：<code>floor((i-1)/2)</code>;</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        max_heapify(a, i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//堆顶元素(第一个元素)与Kn交换</span></span><br><span class="line">        <span class="keyword">int</span> temp = a[<span class="number">0</span>];</span><br><span class="line">        a[<span class="number">0</span>] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  将数组堆化</span></span><br><span class="line"><span class="comment"> *  i = 第一个非叶子节点。</span></span><br><span class="line"><span class="comment"> *  从第一个非叶子节点开始即可。无需从最后一个叶子节点开始。</span></span><br><span class="line"><span class="comment"> *  叶子节点可以看作已符合堆要求的节点，根节点就是它自己且自己以下值为最大。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">//左子节点位置</span></span><br><span class="line">        child = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//右子节点存在且大于左子节点，child变成右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (child != n &amp;&amp; a[child] &lt; a[child + <span class="number">1</span>]) &#123;</span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换父节点与左右子节点中的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[child]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[child];</span><br><span class="line">            a[child] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ol><li>建立堆的过程, 从length/2 一直处理到0, 时间复杂度为O(n);</li><li>调整堆的过程是沿着堆的父子节点进行调整, 执行次数为堆的深度, 时间复杂度为O(lgn);</li><li>堆排序的过程由n次第2步完成, 时间复杂度为O(nlgn).</li></ol><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>$O(n \log_{2}n)$</td><td>$O(n \log_{2}n)$</td><td>$O(n \log_{2}n)$</td><td>$O(1)$</td></tr></tbody></table><h2 id="总结与思考-2"><a href="#总结与思考-2" class="headerlink" title="总结与思考"></a>总结与思考</h2><p><strong>由于堆排序中初始化堆的过程比较次数较多, 因此它不太适用于小序列</strong>。 同时由于多次任意下标相互交换位置, 相同元素之间原本相对的顺序被破坏了, 因此, 它是不稳定的排序。</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>我想对于它每个学过C语言的都会了解，这可能是很多人接触的第一个排序算法。</p></blockquote><h2 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h2><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h2 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h2><p>冒泡排序算法的运作如下：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><img src="https://images.morethink.cn/bubble.gif" alt=""></p><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//外层循环控制比较的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">//内层循环控制到达位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//前面的元素比后面大就交换</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                a[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>以下是冒泡排序算法复杂度:</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>冒泡排序是最容易实现的排序, 最坏的情况是每次都需要交换, 共需遍历并交换将近n²/2次, 时间复杂度为O(n²). 最佳的情况是内循环遍历一次后发现排序是对的, 因此退出循环, 时间复杂度为O(n). 平均来讲, 时间复杂度为O(n²). 由于冒泡排序中只有缓存的temp变量需要内存空间, 因此空间复杂度为常量O(1).</p><h2 id="总结与思考-3"><a href="#总结与思考-3" class="headerlink" title="总结与思考"></a>总结与思考</h2><p>由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法。</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><h2 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h2><p>快速排序的基本思想：<strong>挖坑填数+分治法</strong>。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。</p><h2 id="算法描述-5"><a href="#算法描述-5" class="headerlink" title="算法描述"></a>算法描述</h2><p>快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。步骤为：</p><ol><li>从数列中挑出一个元素，称为”基准”（pivot）。</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p><img src="https://images.morethink.cn/quick-sort.gif" alt=""></p><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><p>用伪代码描述如下：</p><ol><li><code>i = L; j = R;</code> 将基准数挖出形成第一个坑<code>a[i]</code>。</li><li><code>j--</code>，由后向前找比它小的数，找到后挖出此数填前一个坑<code>a[i]</code>中。</li><li><code>i++</code>，由前向后找比它大的数，找到后也挖出此数填到前一个坑<code>a[j]</code>中。</li><li>再重复执行2，3二步，直到<code>i==j</code>，将基准数填入<code>a[i]</code>中</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//已经排完</span></span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = low;</span><br><span class="line">    <span class="keyword">int</span> right = high;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存基准值</span></span><br><span class="line">    <span class="keyword">int</span> pivot = a[left];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">//从后向前找到比基准小的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= pivot)</span><br><span class="line">            right--;</span><br><span class="line">        a[left] = a[right];</span><br><span class="line">        <span class="comment">//从前往后找到比基准大的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= pivot)</span><br><span class="line">            left++;</span><br><span class="line">        a[right] = a[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 放置基准值，准备分治递归快排</span></span><br><span class="line">    a[left] = pivot;</span><br><span class="line">    sort(a, low, left - <span class="number">1</span>);</span><br><span class="line">    sort(a, left + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是递归版的快速排序：通过把基准插入到合适的位置来实现分治，并递归地对分治后的两个划分继续快排。那么非递归版的快排如何实现呢？</p><p>因为 <strong>递归的本质是栈</strong> ，所以我们非递归实现的过程中，可以借助栈来保存中间变量就可以实现非递归了。在这里中间变量也就是通过Pritation函数划分区间之后分成左右两部分的首尾指针，只需要保存这两部分的首尾指针即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByStack</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始状态的左右指针入栈</span></span><br><span class="line">    stack.push(<span class="number">0</span>);</span><br><span class="line">    stack.push(a.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//出栈进行划分</span></span><br><span class="line">        <span class="keyword">int</span> high = stack.pop();</span><br><span class="line">        <span class="keyword">int</span> low = stack.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivotIndex = partition(a, low, high);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存中间变量</span></span><br><span class="line">        <span class="keyword">if</span> (pivotIndex &gt; low) &#123;</span><br><span class="line">            stack.push(low);</span><br><span class="line">            stack.push(pivotIndex - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pivotIndex &lt; high &amp;&amp; pivotIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            stack.push(pivotIndex + <span class="number">1</span>);</span><br><span class="line">            stack.push(high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = low;</span><br><span class="line">    <span class="keyword">int</span> right = high;</span><br><span class="line">    <span class="comment">//保存基准的值</span></span><br><span class="line">    <span class="keyword">int</span> pivot = a[left];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">//从后向前找到比基准小的元素，插入到基准位置中</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= pivot) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[left] = a[right];</span><br><span class="line">        <span class="comment">//从前往后找到比基准大的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= pivot) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        a[right] = a[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//放置基准值，准备分治递归快排</span></span><br><span class="line">    a[left] = pivot;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h2><h3 id="切换到插入排序"><a href="#切换到插入排序" class="headerlink" title="切换到插入排序"></a>切换到插入排序</h3><p>和大多数递归排序算法一样，改进快速排序性能的一个简单方法基于以下两点：</p><ul><li>对于小数组，快速排序比插入排序慢</li><li>因为递归，快速排序的sort()方法在小数组中叶会调用自己</li></ul><p>因此，在排序小数组时应该切换到插入排序。</p><h3 id="三者取中法"><a href="#三者取中法" class="headerlink" title="三者取中法"></a>三者取中法</h3><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。</p><h3 id="三向快速排序"><a href="#三向快速排序" class="headerlink" title="三向快速排序"></a>三向快速排序</h3><p>实际应用中经常会出现含有大量重复元素的数组。例如，一个元素全部重复的子数组就不需要继续排序了，但我们的算法还会继续将它切分为更小的数组。在有大量重复元素的情况下，快速排序的递归性会使元素全部重复的子数组经常出现，这就有很大的改进潜力，经当前实现的线性对数级的性能提高到线性级别。</p><p><strong>算法描述</strong>：</p><ul><li>在lt之前的(lo~lt-1)都小于中间值</li><li>在gt之前的(gt+1~hi)都大于中间值</li><li>在lt~i-1的都等于中间值</li><li>在i~gt的都还不确定（最终i会大于gt，即不确定的将不复存在）</li></ul><p><img src="https://images.morethink.cn/9f4bd508a48664b472e5644e48c2be4b.png" alt=""></p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortThreeWay</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lo &gt;= hi) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> v = a[lo], lt = lo, i = lo + <span class="number">1</span>, gt = hi;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; v) &#123;</span><br><span class="line">            swap(a, i++, lt++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; v) &#123;</span><br><span class="line">            swap(a, i, gt--);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sortThreeWay(a, lo, lt - <span class="number">1</span>);</span><br><span class="line">    sortThreeWay(a, gt + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>以下是快速排序算法复杂度:</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n²)</td><td>O(1)（原地分区递归版）</td></tr></tbody></table><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序是建立在归并操作上的一种有效的排序算法，1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p><h2 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h2><p>归并排序算法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><p><img src="https://images.morethink.cn/merge.gif" alt="这个图很有概括性，来自维基"></p><h2 id="算法描述-6"><a href="#算法描述-6" class="headerlink" title="算法描述"></a>算法描述</h2><p><strong>归并排序可通过两种方式实现</strong>:</p><ul><li>自上而下的递归</li><li>自下而上的迭代</li></ul><p><strong>递归法</strong>（假设序列共有n个元素）：</p><ol><li>将序列每相邻两个数字进行归并操作，形成 floor(n/2)个序列，排序后每个序列包含两个元素；</li><li>将上述序列再次归并，形成 floor(n/4)个序列，每个序列包含四个元素；</li><li>重复步骤2，直到所有元素排序完毕。</li></ol><p><img src="https://images.morethink.cn/merging-sort.gif" alt=""></p><p><strong>迭代法</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><p>归并排序其实要做两件事：</p><ul><li>分解：将序列每次折半拆分</li><li>合并：将划分后的序列段两两排序合并</li></ul><p>因此，归并排序实际上就是两个操作，拆分+合并</p><p>下面是递归的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并所需的辅助数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一次性分配空间</span></span><br><span class="line">        aux = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//将左半边排序</span></span><br><span class="line">        sort(a, low, mid);</span><br><span class="line">        <span class="comment">//将右半边排序</span></span><br><span class="line">        sort(a, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(a, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法先将所有元素复制到aux[]中，然后在归并会a[]中。方法咋归并时(第二个for循环)</span></span><br><span class="line"><span class="comment">     * 进行了4个条件判断：</span></span><br><span class="line"><span class="comment">     * - 左半边用尽(取右半边的元素)</span></span><br><span class="line"><span class="comment">     * - 右半边用尽(取左半边的元素)</span></span><br><span class="line"><span class="comment">     * - 右半边的当前元素小于左半边的当前元素(取右半边的元素)</span></span><br><span class="line"><span class="comment">     * - 右半边的当前元素大于等于左半边的当前元素(取左半边的元素)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> high</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将a[low..mid]和a[mid+1..high]归并</span></span><br><span class="line">        <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i]) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>以下是归并排序算法复杂度:</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n)</td></tr></tbody></table><p>从效率上看，归并排序可算是排序算法中的”佼佼者”. 假设数组长度为n，那么拆分数组共需logn，, 又每步都是一个普通的合并子数组的过程， 时间复杂度为O(n)， 故其综合时间复杂度为O(nlogn)。另一方面， 归并排序多次递归过程中拆分的子数组需要保存在内存空间， 其空间复杂度为O(n)。</p><h2 id="总结与思考-4"><a href="#总结与思考-4" class="headerlink" title="总结与思考"></a>总结与思考</h2><p>归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需时间和NlogN成正比，它的主要缺点则是他所需的额外空间和N成正比。</p><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序的发明可以追溯到1887年赫尔曼·何乐礼在打孔卡片制表机（Tabulation Machine）, 排序器每次只能看到一个列。它是基于元素值的每个位上的字符来排序的。 对于数字而言就是分别基于个位，十位， 百位或千位等等数字来排序。</p><p>基数排序（Radix sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><h2 id="基本思想-7"><a href="#基本思想-7" class="headerlink" title="基本思想"></a>基本思想</h2><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><p>基数排序按照优先从高位或低位来排序有两种实现方案：</p><ul><li><p><strong>MSD（Most significant digital） 从最左侧高位开始进行排序</strong>。先按k1排序分组, 同一组中记录, 关键码k1相等, 再对各组按k2排序分成子组, 之后, 对后面的关键码继续这样的排序分组, 直到按最次位关键码kd对各子组排序后. 再将各组连接起来, 便得到一个有序序列。<em>MSD方式适用于位数多的序列</em>。</p></li><li><p><strong>LSD （Least significant digital）从最右侧低位开始进行排序</strong>。先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。<em>LSD方式适用于位数少的序列</em>。</p></li></ul><p><img src="https://images.morethink.cn/radix-sort_sample.gif" alt="基数排序LSD动图演示"></p><h2 id="算法描述-7"><a href="#算法描述-7" class="headerlink" title="算法描述"></a>算法描述</h2><p>我们以LSD为例，从最低位开始，具体算法描述如下：</p><ol><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ol><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><p>基数排序：通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序。</p><ul><li><p><strong>分配</strong>：我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中</p></li><li><p><strong>收集</strong>：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[]。对新形成的序列L[]重复执行分配和收集元素中的十位、百位…直到分配完该序列中的最高位，则排序结束</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得数组中的最大数，并取得位数</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxDigit = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (max / <span class="number">10</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        maxDigit++;</span><br><span class="line">        max = max / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//申请一个桶空间</span></span><br><span class="line">    <span class="keyword">int</span>[][] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从低位到高位，对每一位遍历，将所有元素分配到桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDigit; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] bktLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];        <span class="comment">//存储各个桶中存储元素的数量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//分配：将所有元素分配到桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> whichBucket = (arr[j] % base) / (base / <span class="number">10</span>);</span><br><span class="line">            buckets[whichBucket][bktLen[whichBucket]] = arr[j];</span><br><span class="line">            bktLen[whichBucket]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集：将不同桶里数据挨个捞出来,为下一轮高位排序做准备,由于靠近桶底的元素排名靠前,因此从桶底先捞</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; buckets.length; b++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; bktLen[b]; p++) &#123;</span><br><span class="line">                arr[k++] = buckets[b][p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Sorting: "</span> + Arrays.toString(arr));</span><br><span class="line">        base *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-7"><a href="#复杂度分析-7" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>以下是基数排序算法复杂度，其中k为最大数的位数：</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(n+r)</td></tr></tbody></table><p>其中，<strong>d 为位数，r 为基数，n 为原数组个数</strong>。在基数排序中，因为没有比较操作，所以在复杂上，最好的情况与最坏的情况在时间上是一致的，均为 <code>O(d*(n + r))</code>。</p><h2 id="总结和思考"><a href="#总结和思考" class="headerlink" title="总结和思考"></a>总结和思考</h2><p>基数排序更适合用于对时间, 字符串等这些 <strong>整体权值未知的数据</strong> 进行排序。</p><p>基数排序不改变相同元素之间的相对顺序，因此它是稳定的排序算法。</p><p><strong>基数排序 vs 计数排序 vs 桶排序</strong></p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ol><li>基数排序：根据键值的每位数字来分配桶</li><li>计数排序：每个桶只存储单一键值</li><li>桶排序：每个桶存储一定范围的数值</li></ol><h1 id="八大排序算法总结"><a href="#八大排序算法总结" class="headerlink" title="八大排序算法总结"></a>八大排序算法总结</h1><p>各种排序性能对比如下:</p><table><thead><tr><th>排序类型</th><th>平均情况</th><th>最好情况</th><th>最坏情况</th><th>辅助空间</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>直接插入排序</td><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td><td>稳定</td></tr><tr><td>折半插入排序</td><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n^1.3)</td><td>O(nlogn)</td><td>O(n²)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n²)</td><td>O(nlog₂n)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td><td>稳定</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n²)</td><td>O(n+k)</td><td>(不)稳定</td></tr><tr><td>基数排序</td><td>O(d(n+k))</td><td>O(d(n+k))</td><td>O(d(n+kd))</td><td>O(n+kd)</td><td>稳定</td></tr></tbody></table><p>从时间复杂度来说：</p><ol><li>平方阶O(n²)排序：<strong>各类简单排序：直接插入、直接选择和冒泡排序</strong></li><li>线性对数阶O(nlog₂n)排序：<strong>快速排序、堆排序和归并排序</strong></li><li>O(n1+§))排序，§是介于0和1之间的常数：<strong>希尔排序</strong></li><li>线性阶O(n)排序：<strong>基数排序，此外还有桶、箱排序</strong></li></ol><p>论是否有序的影响：</p><ul><li>当原表有序或基本有序时，直接插入排序和冒泡排序将大大减少比较次数和移动记录的次数，时间复杂度可降至O（n）；</li><li>而快速排序则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O（n2）；</li><li>原表是否有序，对简单选择排序、堆排序、归并排序和基数排序的时间复杂度影响不大。</li></ul><p><img src="https://images.morethink.cn/sort-comparison.png" alt=""></p><p><a href="https://github.com/morethink/algorithm/tree/master/src/main/java/algorithm/sort" target="_blank" rel="noopener">代码地址</a></p><p><strong>参考资料</strong>：</p><ol><li>《算法》第四版</li><li>维基百科</li><li><a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/#%E4%B8%83%E3%80%81%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88Merging-Sort%EF%BC%89" target="_blank" rel="noopener">八大排序算法总结与java实现</a></li><li><a href="https://segmentfault.com/a/1190000010413296#articleHeader33" target="_blank" rel="noopener">前端面试必备——十大经典排序算法</a></li><li><a href="https://www.jianshu.com/p/8c915179fd02" target="_blank" rel="noopener">必须知道的八大种排序算法【java实现】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java实现二分查找算法</title>
      <link href="/Java%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/Java%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>二分查找（binary search），也称折半搜索，是一种在 <strong>有序数组</strong> 中 <strong>查找某一特定元素</strong> 的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p><ul><li><strong>时间复杂度</strong>:折半搜索每次把搜索区域减少一半，时间复杂度为O(log n)。（n代表集合中元素的个数）</li><li><strong>空间复杂度</strong>: O(1)。虽以递归形式定义，但是尾递归，可改写为循环。</li></ul><a id="more"></a><h1 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h1><p><img src="https://images.morethink.cn/binary-search.gif" alt="binary-search" title="二分查找"></p><h1 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarysearch</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &gt; target)</span><br><span class="line">        <span class="keyword">return</span> binarysearch(array, low, mid - <span class="number">1</span>, target);</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &lt; target)</span><br><span class="line">        <span class="keyword">return</span> binarysearch(array, mid + <span class="number">1</span>, high, target);</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearchWithoutRecursion</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找中值的计算"><a href="#二分查找中值的计算" class="headerlink" title="二分查找中值的计算"></a>二分查找中值的计算</h1><p>这是一个经典的话题，如何计算二分查找中的中值？大家一般给出了两种计算方法：</p><ul><li>算法一： <code>mid = (low + high) / 2</code></li><li>算法二： <code>mid = low + (high – low)/2</code></li></ul><p>乍看起来，算法一简洁，算法二提取之后，跟算法一没有什么区别。但是实际上，区别是存在的。算法一的做法，在极端情况下，(low + high)存在着溢出的风险，进而得到错误的mid结果，导致程序错误。而算法二能够保证计算出来的mid，一定大于low，小于high，不存在溢出的问题。</p><h1 id="二分查找法的缺陷"><a href="#二分查找法的缺陷" class="headerlink" title="二分查找法的缺陷"></a>二分查找法的缺陷</h1><p>二分查找法的O(log n)让它成为十分高效的算法。不过它的缺陷却也是那么明显的。就在它的限定之上：必须有序，我们很难保证我们的数组都是有序的。当然可以在构建数组的时候进行排序，可是又落到了第二个瓶颈上：它必须是数组。</p><p>数组读取效率是O(1)，可是它的插入和删除某个元素的效率却是O(n)。因而导致构建有序数组变成低效的事情。</p><p>解决这些缺陷问题更好的方法应该是使用二叉查找树了，最好自然是自平衡二叉查找树了，既能高效的（O(n log n)）构建有序元素集合，又能如同二分查找法一样快速（O(log n)）的搜寻目标数。</p><p><strong>参考资料</strong>：</p><ol><li><a href="http://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html" target="_blank" rel="noopener">二分查找法的实现和应用汇总</a></li><li><a href="http://hedengcheng.com/?p=595" target="_blank" rel="noopener">二分查找(Binary Search)需要注意的问题，以及在数据库内核中的实现</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Win10下通过IIS调试ASP程序遇到的问题和解决方案</title>
      <link href="/Win10-through-the-IIS-debugging-ASP-program/"/>
      <url>/Win10-through-the-IIS-debugging-ASP-program/</url>
      
        <content type="html"><![CDATA[<p>最近维护了以前别人的写的一个ASP的系统，记录一下调试过程中的问题和解决方案。</p><h1 id="环境篇"><a href="#环境篇" class="headerlink" title="环境篇"></a>环境篇</h1><h1 id="万维网发布服务-W3SVC-已经停止"><a href="#万维网发布服务-W3SVC-已经停止" class="headerlink" title="万维网发布服务(W3SVC)已经停止"></a>万维网发布服务(W3SVC)已经停止</h1><p><strong>问题</strong>：<br>万维网发布服务(W3SVC)已经停止。除非万维网发布服务(W3SVC)正在运行,否则无法启动网站。</p><a id="more"></a><p><img src="https://images.morethink.cn/d479322a25d8c93f9bf481695af50858.png" alt=""></p><p><strong>解决方法</strong>：</p><p>需要先启动整个应用。</p><p><img src="https://images.morethink.cn/31b0292ddbc24480229d1fbce590bb8e.png" alt=""></p><h1 id="IIS服务"><a href="#IIS服务" class="headerlink" title="IIS服务"></a>IIS服务</h1><p>控制面板&gt;&gt;程序和功能&gt;&gt;启动或关闭Windows功能&gt;&gt;IIS服务<br><img src="https://images.morethink.cn/729c9c06256b9029cadf7e00cbbfc667.png" alt=""></p><p>但是这样仅仅是开启了IIS服务，会出现Http500错误，不能运行ASP程序，因为IIS服务器默认并没有帮我们配置ASP或者ASP.NET环境，需要自己手动配置(在此过程中，我启动过多次电脑)。</p><h1 id="配置ASP环境"><a href="#配置ASP环境" class="headerlink" title="配置ASP环境"></a>配置ASP环境</h1><p>ASP配置如下：<br><img src="https://images.morethink.cn/a1339b7725b29585940ccd745fcd7512.png" alt=""></p><p>如果需要ASP.NET，需要如下配置：</p><p><img src="https://images.morethink.cn/8e827a63559409b25937857d136e236f.png" alt=""></p><h1 id="IIS7中出现An-error-occurred-on-the-server-when-processing-the-URL错误"><a href="#IIS7中出现An-error-occurred-on-the-server-when-processing-the-URL错误" class="headerlink" title="IIS7中出现An error occurred on the server when processing the URL错误"></a>IIS7中出现An error occurred on the server when processing the URL错误</h1><p><strong>错误描述</strong>：<br>An error occurred on the server when processing the URL. Please contact the system administrator.If you are the system administrator please click here to find out more about this error.</p><ol><li>打开控制面板→管理工具→Internet 信息服务(IIS)管理器→双击“ASP”图标<br><img src="https://images.morethink.cn/4cc9001c24f9705e91f4257074f8673c.png" alt=""></li><li>在左边的窗口中找到你的网站，然后在右边的窗口中展开“调试属性”，把“将错误发送到浏览器”设为True即可<br><img src="https://images.morethink.cn/4a629fd49cf2edefc97cc61a7f1d0d4f.png" alt=""></li></ol><p>此时你再运行ASP程序时就会看到具体的错误了，然后再根据错误提示进行相应的修改即可。</p><h1 id="代码篇"><a href="#代码篇" class="headerlink" title="代码篇"></a>代码篇</h1><h1 id="ADODB-Connection-错误-‘800a0e7a’"><a href="#ADODB-Connection-错误-‘800a0e7a’" class="headerlink" title="ADODB.Connection 错误 ‘800a0e7a’"></a>ADODB.Connection 错误 ‘800a0e7a’</h1><p><strong>具体错误</strong>：<br>ADODB.Connection 错误 ‘800a0e7a’<br>未找到提供程序。该程序可能未正确安装。</p><p><strong>原因</strong>：</p><p>因为系统是64位的win10，所以会出现这个问题。</p><p><strong>解决办法</strong>：<br>找到IIS应用程序池，“设置应用程序池默认属性”-&gt;“常规”-&gt;”启用 32 位应用程序”，设置为 True。</p><p><img src="https://images.morethink.cn/bb814d72e30f1a99899cc7e919fa774e.png" alt=""><br>height=”100%” width=”100%”</p><p>style=”width:757px; height:455px;”<br>这样问题就解决了。</p><h1 id="ADODB-Recordset-错误-‘800a0cc1’"><a href="#ADODB-Recordset-错误-‘800a0cc1’" class="headerlink" title="ADODB.Recordset 错误 ‘800a0cc1’"></a>ADODB.Recordset 错误 ‘800a0cc1’</h1><p><strong>描述</strong>：<br>ADODB.Recordset 错误 ‘800a0cc1’<br>在对应所需名称或序数的集合中，未找到项目。</p><p><strong>解决</strong>：<br>一般是字段写错了或者，你的数据库没有这个字段。</p><h1 id="iframe自适应"><a href="#iframe自适应" class="headerlink" title="iframe自适应"></a>iframe自适应</h1><p>JS代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//iframe高度自适应</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IFrameReSize</span>(<span class="params">iframename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pTar = <span class="built_in">document</span>.getElementByIdx_x_x(iframename);</span><br><span class="line">    <span class="keyword">if</span> (pTar) &#123; <span class="comment">//ff</span></span><br><span class="line">        <span class="keyword">if</span> (pTar.contentDocument &amp;&amp; pTar.contentDocument.body.offsetHeight) &#123;</span><br><span class="line">            pTar.height = pTar.contentDocument.body.offsetHeight;</span><br><span class="line">        &#125; <span class="comment">//ie</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pTar.Document &amp;&amp; pTar.Document.body.scrollHeight) &#123;</span><br><span class="line"></span><br><span class="line">            pTar.height = pTar.Document.body.scrollHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//iframe宽度自适应</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IFrameReSizeWidth</span>(<span class="params">iframename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pTar = <span class="built_in">document</span>.getElementByIdx_x_x(iframename);</span><br><span class="line">    <span class="keyword">if</span> (pTar) &#123; <span class="comment">//ff</span></span><br><span class="line">        <span class="keyword">if</span> (pTar.contentDocument &amp;&amp; pTar.contentDocument.body.offsetWidth) &#123;</span><br><span class="line">            pTar.width = pTar.contentDocument.body.offsetWidth;</span><br><span class="line">        &#125; <span class="comment">//ie</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pTar.Document &amp;&amp; pTar.Document.body.scrollWidth) &#123;</span><br><span class="line">            pTar.width = pTar.Document.body.scrollWidth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Iframe框配置：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"Main.htm"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"mainFrame"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">onload</span>=<span class="string">'IFrameReSize("mainFrame");IFrameReSizeWidth("mainFrame");'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="ACCESS分页"><a href="#ACCESS分页" class="headerlink" title="ACCESS分页"></a>ACCESS分页</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> nid <span class="keyword">between</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">min</span>(nid) <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> top <span class="number">4</span> nid <span class="keyword">from</span> newsdata <span class="keyword">order</span> <span class="keyword">by</span> nid <span class="keyword">desc</span>))</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">min</span>(nid) <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> top <span class="number">1</span> nid <span class="keyword">from</span> newsdata <span class="keyword">order</span> <span class="keyword">by</span> nid <span class="keyword">desc</span>))</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> nid <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>利用top和min函数分别找出分页的起始ID和结束ID，如果要按照升序排列，就要用top和max来找出起始ID和结束ID，之后在使用between语句直接选取。注意三个地方的排序方式必须一致，查询条件也必须一致。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.ljf.cn/archives/2281" target="_blank" rel="noopener">简单又高效的Access分页语句</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS </tag>
            
            <tag> ASP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx几种负载均衡算法及配置实例</title>
      <link href="/Nginx-several-load-balancing-algorithm/"/>
      <url>/Nginx-several-load-balancing-algorithm/</url>
      
        <content type="html"><![CDATA[<p>本文装载自： <a href="https://yq.aliyun.com/articles/114683" target="_blank" rel="noopener">https://yq.aliyun.com/articles/114683</a></p><p>Nginx负载均衡（工作在七层“应用层”）功能主要是通过upstream模块实现，Nginx负载均衡默认对后端服务器有健康检测的能力，仅限于端口检测，在后端服务器比较少的情况下负载均衡能力表现突出。</p><p>Nginx的几种负载均衡算法：<br><a id="more"></a></p><ol><li>轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，则自动剔除故障机器，使用户访问不受影响。</li><li>weight：指定轮询权重，weight值越大，分配到的几率就越高，主要用于后端每台服务器性能不均衡的情况。</li><li>ip_hash：每个请求按访问IP的哈希结果分配，这样每个访客固定访问一个后端服务器，可以有效的解决动态网页存在的session共享问题。</li><li>fair（第三方）：更智能的一个负载均衡算法，此算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。如果想要使用此调度算法，需要Nginx的upstream_fair模块。</li><li>url_hash（第三方）：按访问URL的哈希结果来分配请求，使每个URL定向到同一台后端服务器，可以进一步提高后端缓存服务器的效率。如果想要使用此调度算法，需要Nginx的hash软件包。</li></ol><p>在upstream模块中，可以通过server命令指定后端服务器的IP地址和端口，同时还可以设置每台后端服务器在负载均衡调度中的状态，常用的状态有以下几种：</p><ol><li>down：表示当前server暂时不参与负载均衡。</li><li>backup：预留的备份机，当其他所有非backup机器出现故障或者繁忙的时候，才会请求backup机器，这台机器的访问压力最轻。</li><li>max_fails：允许请求的失败次数，默认为1，配合fail_timeout一起使用</li><li>fail_timeout：经历max_fails次失败后，暂停服务的时间，默认为10s（某个server连接失败了max_fails次，则nginx会认为该server不工作了。同时，在接下来的 fail_timeout时间内，nginx不再将请求分发给失效的server。）</li></ol><p>下面是一个负载均衡的配置示例，这里只列出http配置段，省略了其他部分配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream whsirserver &#123;</span><br><span class="line">    server 192.168.0.120:80 weight=5 max_fails=3 fail_timeout=20s;</span><br><span class="line">    server 192.168.0.121:80 weight=1 max_fails=3 fail_timeout=20s;</span><br><span class="line">    server 192.168.0.122:80 weight=3 max_fails=3 fail_timeout=20s;</span><br><span class="line">    server 192.168.0.123:80 weight=4 max_fails=3 fail_timeout=20s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.whsir.com;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    root /data/www;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://whsirserver;</span><br><span class="line">        proxy_next_upstream http_500 http_502 error timeout invalid_header;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upstream负载均衡开始，通过upstream指定了一个负载均衡器的名称为whsirserver，这个名称可以自己定义，在后面proxy_pass直接调用即可。</p><p>proxy_next_upstream参数用来定义故障转移策略，当后端服务器节点返回500、502和执行超时等错误时，自动将请求转发到upstream负载均衡器中的另一台服务器，实现故障转移。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java解决CSRF问题</title>
      <link href="/Java%E8%A7%A3%E5%86%B3CSRF%E9%97%AE%E9%A2%98/"/>
      <url>/Java%E8%A7%A3%E5%86%B3CSRF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>项目地址： <a href="https://github.com/morethink/web-security-csrf" target="_blank" rel="noopener">https://github.com/morethink/web-security-csrf</a></p><h1 id="CSRF是什么？"><a href="#CSRF是什么？" class="headerlink" title="CSRF是什么？"></a>CSRF是什么？</h1><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p><h1 id="CSRF可以做什么？"><a href="#CSRF可以做什么？" class="headerlink" title="CSRF可以做什么？"></a>CSRF可以做什么？</h1><p>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><a id="more"></a><h1 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h1><p>下图简单阐述了CSRF攻击的思<br><img src="https://images.morethink.cn/138ad4f05b47533bf46904dc165167cc.png" alt=""></p><p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><ol><li>登录受信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ol><p>看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p><ol><li>你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</li><li>你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</li><li>上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</li></ol><p>下面讲一讲java解决CSRF攻击的方式。</p><h1 id="模拟CSRF攻击"><a href="#模拟CSRF攻击" class="headerlink" title="模拟CSRF攻击"></a>模拟CSRF攻击</h1><h2 id="登录A网站"><a href="#登录A网站" class="headerlink" title="登录A网站"></a>登录A网站</h2><p>用户名和密码都是admin。</p><p><code>http://localhost:8081/login.html</code>:<br><img src="https://images.morethink.cn/e298f8ef08869557b8fb60034f06bb80.png" alt=""></p><h2 id="你有权限删除1号帖子"><a href="#你有权限删除1号帖子" class="headerlink" title="你有权限删除1号帖子"></a>你有权限删除1号帖子</h2><p><code>http://localhost:8081/deletePost.html</code>:<br><img src="https://images.morethink.cn/897d358f2677d053bb9555ff69d112ac.png" alt=""></p><h2 id="登录有CSRF攻击A网站的B网站"><a href="#登录有CSRF攻击A网站的B网站" class="headerlink" title="登录有CSRF攻击A网站的B网站"></a>登录有CSRF攻击A网站的B网站</h2><p><code>http://localhost:8082/deletePost.html</code>:</p><p><img src="https://images.morethink.cn/csrf-attack.gif" alt=""></p><p>明显看到B网站是8082端口，A网站是8081端口，但是B网站的删除2号帖子功能依然实现。</p><h1 id="预防CSRF攻击"><a href="#预防CSRF攻击" class="headerlink" title="预防CSRF攻击"></a>预防CSRF攻击</h1><p>简单来说，CSRF 就是网站 A 对用户建立信任关系后，在网站 B 上利用这种信任关系，跨站点向网站 A 发起一些伪造的用户操作请求，以达到攻击的目的。</p><p>而之所以可以完成攻击是因为B向A发起攻击的时候会把A网站的cookie带给A网站，也就是说cookie已经不安全了。</p><h2 id="通过Synchronizer-Tokens"><a href="#通过Synchronizer-Tokens" class="headerlink" title="通过Synchronizer Tokens"></a>通过Synchronizer Tokens</h2><p>Synchronizer Tokens： 在表单里隐藏一个随机变化的 csrf_token csrf_token 提交到后台进行验证，如果验证通过则可以继续执行操作。这种情况有效的主要原因是网站 B 拿不到网站 A 表单里的 csrf_token</p><p>这种方式的使用条件是PHP和JSP等。因为cookie已经不安全了，因此把csrf_token值存储在session中，然后每次表单提交时都从session取出来放到form表单的隐藏域中，这样B网站不可以得到这个存储到session中的值。</p><p>下面是JSP的：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;input type="hidden" name="random_form" value=&lt;%=random%&gt;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure></p><p>但是我现在的情况是html，不是JSP，并不能动态的从session中取出csrf_token值。只能采用加密的方式了。</p><h2 id="Hash加密cookie中csrf-token值"><a href="#Hash加密cookie中csrf-token值" class="headerlink" title="Hash加密cookie中csrf_token值"></a>Hash加密cookie中csrf_token值</h2><p>这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了。</p><p>我采用的hash加密方法是JS实现Java的HashCode方法，得到hash值，这个比较简单。也可以采用其他的hash算法。</p><p>前端向后台传递hash之后的csrf_token值和cookie中的csrf_token值，后台拿到cookie中的csrf_token值后得到hashCode值然后与前端传过来的值进行比较，一样则通过。</p><h3 id="你有权限删除3号帖子"><a href="#你有权限删除3号帖子" class="headerlink" title="你有权限删除3号帖子"></a>你有权限删除3号帖子</h3><p><code>http://localhost:8081/deletePost.html</code></p><p><img src="https://images.morethink.cn/2ac5eab98780646c6c36dcdc98fa50c7.png" alt=""></p><h3 id="B网站的他已经没有权限了"><a href="#B网站的他已经没有权限了" class="headerlink" title="B网站的他已经没有权限了"></a>B网站的他已经没有权限了</h3><p>我们通过UserFilter.java给攻击者返回的是403错误，表示服务器理解用户客户端的请求但拒绝处理。</p><p><code>http://localhost:8082/deletePost.html</code>:<br><img src="https://images.morethink.cn/csrf-attack-fail-failure.gif" alt=""></p><p>攻击者不能删除4号帖子。</p><p>前端代码：</p><p>deletePost.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>deletePost<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        function deletePost() &#123;</span></span><br><span class="line"><span class="undefined">            var url = '/post/' + document.getElementById("postId").value;</span></span><br><span class="line"><span class="undefined">            var csrf_token = document.cookie.replace(/(?:(?:^|.*;\s*)csrf_token\s*\=\s*([^;]*).*$)|^.*$/, "$1");</span></span><br><span class="line"><span class="undefined">            console.log('csrf_token=' + csrf_token);</span></span><br><span class="line"><span class="undefined">            $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">                type: "post",//请求方式</span></span><br><span class="line"><span class="undefined">                url: url,  //发送请求地址</span></span><br><span class="line"><span class="undefined">                timeout: 30000,//超时时间：30秒</span></span><br><span class="line"><span class="undefined">                data: &#123;</span></span><br><span class="line"><span class="undefined">                    "_method": "delete",</span></span><br><span class="line"><span class="undefined">                    "csrf_token": hash(csrf_token) // 对csrf_token进行hash加密</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                dataType: "json",//设置返回数据的格式</span></span><br><span class="line"><span class="undefined">                success: function (result) &#123;</span></span><br><span class="line"><span class="undefined">                    if (result.message == "success") &#123;</span></span><br><span class="line"><span class="undefined">//                    window.location.href = "index.html";</span></span><br><span class="line"><span class="undefined">                        $("#result").text("删除成功");</span></span><br><span class="line"><span class="undefined">                    &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                        $("#result").text("删除失败");</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                error: function () &#123; //请求出错的处理</span></span><br><span class="line"><span class="undefined">                    $("#result").text("请求出错");</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // javascript的String到int(32位)的hash算法</span></span><br><span class="line"><span class="undefined">        function hash(str) &#123;</span></span><br><span class="line"><span class="undefined">            var hash = 0;</span></span><br><span class="line"><span class="undefined">            if (str.length == 0) return hash;</span></span><br><span class="line"><span class="undefined">            for (i = 0; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">                char = str.charCodeAt(i);</span></span><br><span class="line"><span class="undefined">                hash = ((hash &lt;&lt; 5) - hash) + char;</span></span><br><span class="line"><span class="undefined">                hash = hash &amp; hash; // Convert to 32bit integer</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            return hash;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>删除帖子<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">帖子编号 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"postId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"deletePost();"</span>&gt;</span>deletePost<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台代码：</p><p>UserInterceptor.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.morethink.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.morethink.util.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> cn.morethink.util.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/1/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"POST"</span>) || method.equalsIgnoreCase(<span class="string">"DELETE"</span>)</span><br><span class="line">                || method.equalsIgnoreCase(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">            String csrf_token = request.getParameter(<span class="string">"csrf_token"</span>);</span><br><span class="line">            System.out.println(csrf_token + <span class="string">"1222222222222222222222222222222222222222222222"</span>);</span><br><span class="line">            Cookie[] cookies = request.getCookies();</span><br><span class="line">            <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span> &amp;&amp; csrf_token != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"csrf_token"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Integer.valueOf(csrf_token) == cookie.getValue().hashCode()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result(<span class="string">"403"</span>, <span class="string">"你还想攻击我??????????"</span>, <span class="string">""</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(JsonUtil.toJson(result));</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>cookie必须要设置PATH才可以生效，否则在下一次请求的时候无法带给服务器。</li><li>Spring Boot 出现启动找不到主类的问题时可以mvn clean一下。</li><li>Filter设置response.sendError(403)在Spring Boot没有效果。</li></ol><p><strong>参考文档</strong>：</p><ol><li><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">浅谈CSRF攻击方式</a></li><li><a href="http://blog.csdn.net/zzhongcy/article/details/20133883" target="_blank" rel="noopener">jQueue 动态设置form表单的action属性的值和方法</a></li><li><a href="https://www.thinksaas.cn/group/topic/304242/" target="_blank" rel="noopener">javascript的String到int(32位)的hash算法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx Https配置不带www跳转www</title>
      <link href="/Nginx-Https-no-www-jump-www/"/>
      <url>/Nginx-Https-no-www-jump-www/</url>
      
        <content type="html"><![CDATA[<p>把 morethink.cn和<a href="http://www.morethink.cn合并到一个server上去，使用301永久重定向。" target="_blank" rel="noopener">www.morethink.cn合并到一个server上去，使用301永久重定向。</a><br>然后将 <a href="https://morethink.cn" target="_blank" rel="noopener">https://morethink.cn</a> 转到 <a href="https://www.morethink.cn">https://www.morethink.cn</a> 去。不过要在配置文件的 <code>server</code> <a href="https://www.morethink.cn">https://www.morethink.cn</a><br>上配置default_server ssl;。<br>301永久重定向可以把搜索引擎的权重全部集中到 <a href="https://www.morethink.cn">https://www.morethink.cn</a> 上。</p><a id="more"></a><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name morethink.cn,www.morethink.cn;</span><br><span class="line">    return 301 https://www.morethink.cn$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name morethink.cn;</span><br><span class="line">    return 301 https://www.morethink.cn$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 default_server ssl;</span><br><span class="line">    server_name  www.morethink.cn;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate 1_www.morethink.cn_bundle.crt;</span><br><span class="line">    ssl_certificate_key 2_www.morethink.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    root         /var/www/hexo;</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong>：</p><ol><li><a href="https://cloud.tencent.com/document/product/400/4143" target="_blank" rel="noopener">腾讯云 Nginx Https 证书安装指引</a></li><li><a href="https://docs.lvrui.io/2017/04/01/nginx%E9%85%8D%E7%BD%AEhttp%E5%BC%BA%E5%88%B6%E8%B7%B3%E8%BD%AChttps/" target="_blank" rel="noopener">nginx配置http强制跳转https</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试中的Https</title>
      <link href="/Https/"/>
      <url>/Https/</url>
      
        <content type="html"><![CDATA[<p>在Http协议中有可能存在信息窃听或身份伪装的安全问题。使用HTTPS通信机制可以有效地防止这些问题。</p><h1 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h1><h2 id="Http的缺点"><a href="#Http的缺点" class="headerlink" title="Http的缺点"></a>Http的缺点</h2><ul><li>通信使用明文(不加密)，内容可能会被窃听。</li><li>不验证通信方的身份，因此有可能遭遇伪装。</li><li>无法验证报文的完整性，所以有可能已遭篡改。</li></ul><p>这些问题不仅在Http上出现，其他未加密的协议中也会存在这类问题。</p><a id="more"></a><h2 id="什么是Https"><a href="#什么是Https" class="headerlink" title="什么是Https"></a>什么是Https</h2><p>Https并非是应用层的一种新的协议。只是Http通信接口部分用SSL(Secure Socket Layer)和TLS(Transport Layer Security)协议而已。</p><p>通常，Http直接和TCP通信。当使用SSL时，则演变成先和SSL协议通信，再由SSL和TCP通信了。简言之，所谓Https，就是身披SSL这层协议外壳的Http。</p><p><img src="https://images.morethink.cn/0163388a23291dcc361c869f6f8ebc86.png" alt="" title="什么是Https"></p><h2 id="Https有什么作用"><a href="#Https有什么作用" class="headerlink" title="Https有什么作用"></a>Https有什么作用</h2><p><code>Http+加密+认证+完整性保护 = Https</code></p><p>Https有以下作用：</p><ul><li><strong>内容加密</strong> 建立一个信息安全通道，来保证数据传输的安全。</li><li><strong>身份认证</strong> 确认网站的真实性。</li><li><strong>数据完整性</strong> 防止内容被第三方冒充或者篡改。</li></ul><p>下面就是Https的整个架构，现在的https基本都使用TLS了，因为更加安全。</p><h1 id="Https-加密"><a href="#Https-加密" class="headerlink" title="Https 加密"></a>Https 加密</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，<strong>加密密钥和解密密钥是相同的</strong>，所以也称这种加密算法为秘密密钥算法或单密钥算法。</p><p>但是我们使用对称加密加密Http通信内容会有一个问题，因为客户端和服务器在通信过程中都必须知道秘钥，而在发送秘钥的过程中又有可能被第三方监听，从而获取到秘钥。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密很好地解决了对称加密的困难。</p><p>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey），并且加密密钥和解密密钥是成对出现的。非对称加密算法在加密和解密过程使用了不同的密钥，非对称加密也称为公钥加密，在密钥对中，其中一个密钥是对外公开的，所有人都可以获取到，称为公钥，其中一个密钥是不公开的称为私钥。 <strong>用公钥加密的只能用私钥解开，用私钥加密的只能用公钥解开</strong>。</p><p>非对称加密的特性决定了服务器用私钥加密的内容并不是真正的加密，因为公钥所有人都有，所以服务器的密文能被所有人解析。但私钥只掌握在服务器手上，这就带来了两个巨大的优势:</p><ol><li>服务器下发的内容不可能被伪造，因为别人都没有私钥，所以无法加密。强行加密的后果是客户端用公钥无法解开。</li><li>任何人用公钥加密的内容都是绝对安全的，因为私钥只有服务器有，也就是只有真正的服务器可以看到被加密的原文。</li></ol><p><strong>注意</strong>：<br>想要根据密文和公钥，恢复信息原文是异常困难的，因为解密过程就是在对离散对数进行求值，这并非轻而易举就能办到。</p><p>因此，Https采用对称加密和非对称加密两者并用的混合加密机制。</p><p><strong>也就是说，Https通过非对称加密来传递对称加密的秘钥</strong>。</p><p>那为什么不直接采用非对称加密来加密通信内容？</p><p>非对称加密处理起来比对称加密更为复杂，因此若在通信时使用非对称加密，效率比较低。</p><h2 id="证书的私钥加密公钥"><a href="#证书的私钥加密公钥" class="headerlink" title="证书的私钥加密公钥"></a>证书的私钥加密公钥</h2><p>遗憾的是，非对称加密还是存在一些问题的。那就是无法保证公钥本身就是货真价实的公钥。比如，正准备和某台服务器建立非对称加密下的通信时，如何证明收到的公钥就是原来预想的那台服务器发行的公钥。或许在公开秘钥传输过程中，真正的公钥已经被人替换了。</p><p>那怎么办？<br>再加密一次。</p><p><strong>每一个使用 HTTPS 的服务器都必须去专门的证书机构注册一个证书，证书中存储了用数字证书机构私钥加密的公钥。这样客户端用数字证书机构的公钥解密就可以了</strong>。</p><p>而数字证书机构的公钥会直接内置在各大操作系统(或者浏览器)的出厂设置里。所以各个公司要先去数字证书机构认证，申请证书，然后操作系统只会存储数字证书机构的公钥。因为数字证书机构数量有限，所以操作系统厂商相对来说容易管理。</p><p><strong>总结</strong>：<br>Https通过非对称加密(通常是RSA算法)加密对称加密的秘钥，然后使用证书机构的私钥加密非对称加密的公钥，而证书机构的公钥会内置在浏览器里，从而保证即使被第三方监听，也可以保证安全。</p><h1 id="SSL-与-TLS"><a href="#SSL-与-TLS" class="headerlink" title="SSL 与 TLS"></a>SSL 与 TLS</h1><h2 id="SSL-Secure-Socket-Layer，安全套接字层"><a href="#SSL-Secure-Socket-Layer，安全套接字层" class="headerlink" title="SSL (Secure Socket Layer，安全套接字层)"></a>SSL (Secure Socket Layer，安全套接字层)</h2><p>SSL为Netscape所研发，用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取，当前为3.0版本。</p><p>SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p><h2 id="TLS-Transport-Layer-Security，传输层安全协议"><a href="#TLS-Transport-Layer-Security，传输层安全协议" class="headerlink" title="TLS (Transport Layer Security，传输层安全协议)"></a>TLS (Transport Layer Security，传输层安全协议)</h2><p>用于两个应用程序之间提供保密性和数据完整性。<br>TLS 1.0是IETF（Internet Engineering Task Force，Internet工程任务组）制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本，可以理解为SSL 3.1，它是写入了 RFC 的。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面。</p><h2 id="SSL-TLS协议作用"><a href="#SSL-TLS协议作用" class="headerlink" title="SSL/TLS协议作用"></a>SSL/TLS协议作用</h2><ul><li>认证用户和服务器，确保数据发送到正确的客户机和服务器；</li><li>加密数据以防止数据中途被窃取；</li><li>维护数据的完整性，确保数据在传输过程中不被改变。</li></ul><h2 id="TLS比SSL的优势"><a href="#TLS比SSL的优势" class="headerlink" title="TLS比SSL的优势"></a>TLS比SSL的优势</h2><ol><li>对于消息认证使用密钥散列法：TLS 使用“消息认证代码的密钥散列法”（HMAC），当记录在开放的网络（如因特网）上传送时，该代码确保记录不会被变更。SSLv3.0还提供键控消息认证，但HMAC比SSLv3.0使用的（消息认证代码）MAC 功能更安全。</li><li>增强的伪随机功能（PRF）：PRF生成密钥数据。在TLS中，HMAC定义PRF。PRF使用两种散列算法保证其安全性。如果任一算法暴露了，只要第二种算法未暴露，则数据仍然是安全的。</li><li>改进的已完成消息验证：TLS和SSLv3.0都对两个端点提供已完成的消息，该消息认证交换的消息没有被变更。然而，TLS将此已完成消息基于PRF和HMAC值之上，这也比SSLv3.0更安全。</li><li>一致证书处理：与SSLv3.0不同，TLS试图指定必须在TLS之间实现交换的证书类型。</li><li>特定警报消息：TLS提供更多的特定和附加警报，以指示任一会话端点检测到的问题。TLS还对何时应该发送某些警报进行记录。</li></ol><h1 id="SSL-TLS的握手过程"><a href="#SSL-TLS的握手过程" class="headerlink" title="SSL/TLS的握手过程"></a>SSL/TLS的握手过程</h1><p>SSL与TLS握手整个过程如下图所示，下面会详细介绍每一步的具体内容：</p><p><img src="https://images.morethink.cn/ea844ad80d80956a30095d5e4f39fd7b.png" alt="" title="https握手流程图"></p><h2 id="客户端首次发出请求"><a href="#客户端首次发出请求" class="headerlink" title="客户端首次发出请求"></a>客户端首次发出请求</h2><p>由于客户端(如浏览器)对一些加解密算法的支持程度不一样，但是在TLS协议传输过程中必须使用同一套加解密算法才能保证数据能够正常的加解密。在TLS握手阶段，客户端首先要告知服务端，自己支持哪些加密算法，所以客户端需要将本地支持的加密套件(Cipher Suite)的列表传送给服务端。除此之外，客户端还要产生一个随机数，这个随机数一方面需要在客户端保存，另一方面需要传送给服务端，客户端的随机数需要跟服务端产生的随机数结合起来产生后面要讲到的 Master Secret 。</p><p><strong>客户端需要提供如下信息</strong>：</p><ul><li>支持的协议版本，比如TLS 1.0版</li><li>一个客户端生成的随机数，稍后用于生成”对话密钥”</li><li>支持的加密方法，比如RSA公钥加密</li><li>支持的压缩方法</li></ul><h2 id="服务端首次回应"><a href="#服务端首次回应" class="headerlink" title="服务端首次回应"></a>服务端首次回应</h2><p>服务端在接收到客户端的Client Hello之后，服务端需要确定加密协议的版本，以及加密的算法，然后也生成一个随机数，以及将自己的证书发送给客户端一并发送给客户端，这里的随机数是整个过程的第二个随机数。</p><p><strong>服务端需要提供的信息</strong>：</p><ul><li>协议的版本</li><li>加密的算法</li><li>随机数</li><li>服务器证书</li></ul><h2 id="客户端再次回应"><a href="#客户端再次回应" class="headerlink" title="客户端再次回应"></a>客户端再次回应</h2><p>客户端首先会对服务器下发的证书进行验证，验证通过之后，则会继续下面的操作，客户端再次产生一个随机数（第三个随机数），然后使用服务器证书中的公钥进行加密，以及放一个ChangeCipherSpec消息即编码改变的消息，还有整个前面所有消息的hash值，进行服务器验证，然后用新秘钥加密一段数据一并发送到服务器，确保正式通信前无误。</p><p>客户端使用前面的两个随机数以及刚刚新生成的新随机数，使用与服务器确定的加密算法，生成一个Session Secret。</p><h2 id="服务器再次响应"><a href="#服务器再次响应" class="headerlink" title="服务器再次响应"></a>服务器再次响应</h2><p>服务端在接收到客户端传过来的第三个随机数的 加密数据之后，使用私钥对这段加密数据进行解密，并对数据进行验证，也会使用跟客户端同样的方式生成秘钥，一切准备好之后，也会给客户端发送一个 ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和 Session Secret加密数据了。之后，服务端也会使用 Session Secret 加密一段 Finish 消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。</p><h2 id="后续客户端与服务器间通信"><a href="#后续客户端与服务器间通信" class="headerlink" title="后续客户端与服务器间通信"></a>后续客户端与服务器间通信</h2><p>确定秘钥之后，服务器与客户端之间就会通过商定的秘钥加密消息了，进行通讯了。整个握手过程也就基本完成了。</p><blockquote><p><strong>值得特别提出的是</strong>：</p><p>SSL协议在握手阶段使用的是非对称加密，在传输阶段使用的是对称加密，也就是说在SSL上传送的数据是使用对称密钥加密的！因为非对称加密的速度缓慢，耗费资源。其实当客户端和主机使用非对称加密方式建立连接后，客户端和主机已经决定好了在传输过程使用的对称加密算法和关键的对称加密密钥，由于这个过程本身是安全可靠的，也即对称加密密钥是不可能被窃取盗用的，因此，保证了在传输过程中对数据进行对称加密也是安全可靠的，因为除了客户端和主机之外，不可能有第三方窃取并解密出对称加密密钥！如果有人窃听通信，他可以知道双方选择的加密方法，以及三个随机数中的两个。整个通话的安全，只取决于第三个随机数（Premaster secret）能不能被破解。</p></blockquote><h1 id="session的恢复"><a href="#session的恢复" class="headerlink" title="session的恢复"></a>session的恢复</h1><p>有两种方法可以恢复原来的session：一种叫做session ID，另一种叫做session ticket。</p><h2 id="session-ID"><a href="#session-ID" class="headerlink" title="session ID"></a>session ID</h2><p>session ID的思想很简单，就是每一次对话都有一个编号（session ID）。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的”对话密钥”，而不必重新生成一把。</p><p>session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。所以，如果客户端的请求发到另一台服务器，就无法恢复对话。</p><h2 id="session-ticket"><a href="#session-ticket" class="headerlink" title="session ticket"></a>session ticket</h2><p>客户端发送一个服务器在上一次对话中发送过来的session ticket。这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。</p><p><strong>目前只有Firefox和Chrome浏览器支持</strong>。</p><h1 id="Https的劣势"><a href="#Https的劣势" class="headerlink" title="Https的劣势"></a>Https的劣势</h1><p><strong>对数据进行加解密决定了它比http慢</strong>。需要进行非对称的加解密，且需要三次握手。首次连接比较慢点，当然现在也有很多的优化。</p><p>出于安全考虑，浏览器不会在本地保存HTTPS缓存。实际上，只要在HTTP头中使用特定命令，HTTPS是可以缓存的。Firefox默认只在内存中缓存HTTPS。但是，只要头命令中有Cache-Control: Public，缓存就会被写到硬盘上。 IE只要http头允许就可以缓存https内容，缓存策略与是否使用HTTPS协议无关。</p><h1 id="HTTPS和HTTP的区别"><a href="#HTTPS和HTTP的区别" class="headerlink" title="HTTPS和HTTP的区别"></a>HTTPS和HTTP的区别</h1><ul><li>https协议需要到CA申请证书。</li><li>http是超文本传输协议，信息是明文传输；https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li><li>http默认使用80端口，https默认使用443端口</li></ul><h1 id="Python等爬虫怎么处理Https"><a href="#Python等爬虫怎么处理Https" class="headerlink" title="Python等爬虫怎么处理Https"></a>Python等爬虫怎么处理Https</h1><p>https拿爬虫毫无办法，或者说https就不是为了反爬虫的。https的作用是保证服务源授信。比如你访问支付宝，网络被劫持了，你看到的就是个假网站，一旦你登录，账号就泄露了。但用https就能保证你访问的一定是真的支付宝网站，这是由CA证书保证的。回过来再说爬虫，爬虫伪造的是客户端，https是不能保证客户端是授信的，你只要按照ssl协议进行通信，该怎么爬数据还是怎么爬。</p><p>https协议里数据的传输是需要经过加密的,在这个过程中，就给爬虫带来了抓包问题，抓出来的数据也是经过加密的，不能解析。</p><p>理论上是不行了，因为https保证的就是数据在传输过程中不会被盗取。但解决起来也很简单，就是设置个代理伪装一下，代价就是你要安装个假证书，当然这也肯定是无所谓的。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.wxtlife.com/2016/03/27/详解https是如何确保安全的？/" target="_blank" rel="noopener">详解https是如何确保安全的？</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener">图解SSL/TLS协议</a></li><li><a href="http://fullstack.blog/2017/03/12/%E4%B9%9D%E4%B8%AA%E9%97%AE%E9%A2%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E6%82%89HTTPS/#" target="_blank" rel="noopener">九个问题从入门到熟悉HTTPS</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">SSL/TLS协议运行机制的概述</a></li><li><a href="https://www.zhihu.com/question/54504923" target="_blank" rel="noopener">爬虫 https python？</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试中的DNS</title>
      <link href="/DNS/"/>
      <url>/DNS/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>当DNS客户机需要在程序中使用名称时，它会查询DNS服务器来解析该名称。客户机发送的每条查询信息包括三条信息：指定的DNS域名，指定的查询类型，DNS域名的指定类别。</p><p>DNS基于UDP服务，端口53。该应用一般不直接为用户使用，而是为其他应用服务，如HTTP，SMTP等在其中需要完成主机名到IP地址的转换。</p><a id="more"></a><h1 id="递归查询与迭代查询"><a href="#递归查询与迭代查询" class="headerlink" title="递归查询与迭代查询"></a>递归查询与迭代查询</h1><h2 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h2><p>递归查询是一种DNS 服务器的查询模式，在该模式下DNS 服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。如果DNS 服务器本地没有存储查询DNS 信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p><p><img src="https://images.morethink.cn/af0045f9f3bdd144a2afc434cb8146f7.png" alt="" title="DNS递归查询"></p><h2 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h2><p>DNS 服务器另外一种查询方式为迭代查询，DNS 服务器会向客户机提供其他能够解析查询请求的DNS 服务器地址，当客户机发送查询请求时，DNS 服务器并不直接回复查询结果，而是告诉客户机另一台DNS 服务器地址，客户机再向这台DNS 服务器提交请求，依次循环直到返回查询的结果为止。<br><img src="https://images.morethink.cn/9550ed36f993d88f2d54e5d9c6c9f487.png" alt="" title="DNS迭代查询"></p><p><strong>从客户端到本地DNS服务器是属于递归查询，而DNS服务器之间就是的交互查询就是迭代查询</strong>。</p><h1 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h1><p>DNS劫持就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。</p><p>DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了百度的网站。这些都属于DNS劫持。</p><p><strong>解决方法</strong></p><p>对于DNS劫持，可以采用使用国外免费公用的DNS服务器解决。例如OpenDNS（208.67.222.222）或GoogleDNS（8.8.8.8）。</p><p><strong>总结</strong></p><p>DNS劫持就是指用户访问一个被标记的地址时，DNS服务器故意将此地址指向一个错误的IP地址的行为。范例，网通、电信、铁通的某些用户有时候会发现自己打算访问一个地址，却被转向了各种推送广告等网站，这就是DNS劫持。</p><h1 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h1><p>DNS污染是一种让一般用户由于得到虚假目标主机IP而不能与其通信的方法，是一种DNS缓存投毒攻击（DNS cache poisoning）。</p><p>其工作方式是：由于通常的DNS查询没有任何认证机制，而且DNS查询通常基于的UDP是无连接不可靠的协议，因此DNS的查询非常容易被篡改，通过对UDP端口53上的DNS查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。</p><p>DNS污染发生在用户请求的第一步上，直接从协议上对用户的DNS请求进行干扰。<br>DNS污染症状：目前一些被禁止访问的网站很多就是通过DNS污染来实现的，例如YouTube、Facebook等网站。</p><p><strong>解决办法</strong>：</p><p>对于DNS污染，可以说，个人用户很难单单靠设置解决，通常可以使用VPN或者域名远程解析的方法解决，但这大多需要购买付费的VPN或SSH等，也可以通过修改Hosts的方法，手动设置域名正确的IP地址。</p><p><strong>总结</strong>：</p><p>DNS污染，指的是用户访问一个地址，国内的服务器(非DNS)监控到用户访问的已经被标记地址时，服务器伪装成DNS服务器向用户发回错误的地址的行为。范例，访问Youtube、Facebook之类网站等出现的状况。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java使用Openoffice将word、ppt转换为PDF</title>
      <link href="/Java-openoffice-pdf/"/>
      <url>/Java-openoffice-pdf/</url>
      
        <content type="html"><![CDATA[<p>最近项目中要实现WORD的文件预览功能，我们可以通过将WORD转换成PDF或者HTML，然后通过浏览器预览。</p><h1 id="OpenOffice"><a href="#OpenOffice" class="headerlink" title="OpenOffice"></a>OpenOffice</h1><p>OpenOffice.org 是一套跨平台的办公室软件套件，能在 Windows、Linux、MacOS X (X11)、和 Solaris 等操作系统上执行。它与各个主要的办公室软件套件兼容。OpenOffice.org 是自由软件，任何人都可以免费下载、使用、及推广它。</p><a id="more"></a><p><strong>下载地址</strong></p><p><a href="http://www.openoffice.org/" target="_blank" rel="noopener">http://www.openoffice.org/</a></p><h1 id="JodConverter"><a href="#JodConverter" class="headerlink" title="JodConverter"></a>JodConverter</h1><p>jodconverter-2.2.2.zip 下载地址：<br><a href="http://sourceforge.net/projects/jodconverter/files/JODConverter/" target="_blank" rel="noopener">http://sourceforge.net/projects/jodconverter/files/JODConverter/</a></p><h1 id="Word转换"><a href="#Word转换" class="headerlink" title="Word转换"></a>Word转换</h1><p><strong>启动OpenOffice的服务</strong></p><p>进入openoffice安装目录，通过cmd启动一个soffice服务，启动的命令是<code>soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</code>。</p><p>如果觉得后台运行OpenOffice服务比较麻烦，可以通过</p><h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PDFDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">officeToPDF</span><span class="params">(String sourceFile, String destFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            File inputFile = <span class="keyword">new</span> File(sourceFile);</span><br><span class="line">            <span class="keyword">if</span> (!inputFile.exists()) &#123;</span><br><span class="line">                <span class="comment">// 找不到源文件, 则返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果目标路径不存在, 则新建该路径</span></span><br><span class="line">            File outputFile = <span class="keyword">new</span> File(destFile);</span><br><span class="line">            <span class="keyword">if</span> (!outputFile.getParentFile().exists()) &#123;</span><br><span class="line">                outputFile.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果目标文件存在，则删除</span></span><br><span class="line">            <span class="keyword">if</span> (outputFile.exists()) &#123;</span><br><span class="line">                outputFile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm"</span>);</span><br><span class="line">            OpenOfficeConnection connection = <span class="keyword">new</span> SocketOpenOfficeConnection(<span class="string">"127.0.0.1"</span>, <span class="number">8100</span>);</span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">//用于测试openOffice连接时间</span></span><br><span class="line">            System.out.println(<span class="string">"连接时间:"</span> + df.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            DocumentConverter converter = <span class="keyword">new</span> StreamOpenOfficeDocumentConverter(</span><br><span class="line">                    connection);</span><br><span class="line">            converter.convert(inputFile, outputFile);</span><br><span class="line">            <span class="comment">//测试word转PDF的转换时间</span></span><br><span class="line">            System.out.println(<span class="string">"转换时间:"</span> + df.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            connection.disconnect();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConnectException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">"openOffice连接失败！请检查IP,端口"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        officeToPDF(<span class="string">"E:\\test.docx"</span>, <span class="string">"E:\\test.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Word、ppt转Html"><a href="#Word、ppt转Html" class="headerlink" title="Word、ppt转Html"></a>Word、ppt转Html</h1><p>只需要将后缀名从<code>.pdf</code>改为<code>.html</code>即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    officeToPDF(<span class="string">"E:\\test.docx"</span>, <span class="string">"E:\\test.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h1><p><strong>Maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.artofsolving<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jurt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ridl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>juh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unoil<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jdk14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Maven只有 2.2.1版本，2.2.1版本有一个问题，那就是不兼容docx和pptx，如果你们不使用jodconverter-2.2.2 中lib，而想要使用2.2.1版本，需要修改一下 <code>BasicDocumentFormatRegistry</code> 类中的 <code>getFormatByFileExtension</code>方法：</p><ol><li>新建包 <code>com.artofsolving.jodconverter</code></li><li>新建类<code>BasicDocumentFormatRegistry</code>，复制下面代码</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.artofsolving.jodconverter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/12/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDocumentFormatRegistry</span> <span class="keyword">implements</span> <span class="title">DocumentFormatRegistry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List documentFormats = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicDocumentFormatRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDocumentFormat</span><span class="params">(DocumentFormat documentFormat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.documentFormats.add(documentFormat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List <span class="title">getDocumentFormats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.documentFormats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DocumentFormat <span class="title">getFormatByFileExtension</span><span class="params">(String extension)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (extension.indexOf(<span class="string">"doc"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                extension = <span class="string">"doc"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (extension.indexOf(<span class="string">"ppt"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                extension = <span class="string">"ppt"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (extension.indexOf(<span class="string">"xls"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                extension = <span class="string">"xls"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String lowerExtension = extension.toLowerCase();</span><br><span class="line">            Iterator it = <span class="keyword">this</span>.documentFormats.iterator();</span><br><span class="line"></span><br><span class="line">            DocumentFormat format;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!it.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                format = (DocumentFormat)it.next();</span><br><span class="line">            &#125; <span class="keyword">while</span>(!format.getFileExtension().equals(lowerExtension));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> format;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DocumentFormat <span class="title">getFormatByMimeType</span><span class="params">(String mimeType)</span> </span>&#123;</span><br><span class="line">        Iterator it = <span class="keyword">this</span>.documentFormats.iterator();</span><br><span class="line"></span><br><span class="line">        DocumentFormat format;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            format = (DocumentFormat)it.next();</span><br><span class="line">        &#125; <span class="keyword">while</span>(!format.getMimeType().equals(mimeType));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是增加的部分，仅仅增加了将docx按照doc的处理方式处理。而2.2.2版本已经默认增加了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (extension.indexOf(<span class="string">"doc"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    extension = <span class="string">"doc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (extension.indexOf(<span class="string">"ppt"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    extension = <span class="string">"ppt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (extension.indexOf(<span class="string">"xls"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    extension = <span class="string">"xls"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong>：</p><ol><li><a href="http://blog.csdn.net/yjclsx/article/details/51445546" target="_blank" rel="noopener">Java实现在线预览–openOffice实现</a></li><li><a href="http://blog.csdn.net/qq_33571718/article/details/51154472" target="_blank" rel="noopener">Java项目中使用OpenOffice转PDF</a></li><li><a href="http://blog.csdn.net/make_a_difference/article/details/53771136###;" target="_blank" rel="noopener">java使用openoffice将office系列文档转换为PDF</a></li><li><a href="http://www.cnblogs.com/xxyfhjl/p/6773786.html" target="_blank" rel="noopener">java 如何将 word,excel,ppt如何转pdf–jacob</a></li><li><a href="http://www.cnblogs.com/xxyfhjl/p/6775137.html" target="_blank" rel="noopener">java 如何将 word,excel,ppt如何转pdf –openoffice (1)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单点登录原理与简单实现</title>
      <link href="/sso/"/>
      <url>/sso/</url>
      
        <content type="html"><![CDATA[<p>本文转载自： <a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="noopener">https://www.cnblogs.com/ywlaker/p/6113927.html</a></p><blockquote><p>作者：凌承一<br>出处：<a href="http://www.cnblogs.com/ywlaker/" target="_blank" rel="noopener">http://www.cnblogs.com/ywlaker/</a><br>声明：本文版权归作者和博客园共有，欢迎转载，但转载必须保留此段声明，并在文章页面明显位置给出原文链接，否则作者将保留追究法律责任的权利。</p></blockquote><h1 id="单系统登录机制"><a href="#单系统登录机制" class="headerlink" title="单系统登录机制"></a>单系统登录机制</h1><p>web应用采用browser/server架构，http作为通信协议。http是无状态协议，浏览器的每一次请求，服务器会独立处理，不与之前或之后的请求产生关联，这个过程用下图说明，三次请求/响应对之间没有任何联系。</p><p><img src="https://images.morethink.cn/02c5bff6aa0c8a04bbda6261bb0fbd7f.png" alt="" title="无状态的Http协议"></p><a id="more"></a><p>但这也同时意味着，任何用户都能通过浏览器访问服务器资源，如果想保护服务器的某些资源，必须限制浏览器请求；要限制浏览器请求，必须鉴别浏览器请求，响应合法请求，忽略非法请求；要鉴别浏览器请求，必须清楚浏览器请求状态。既然http协议无状态，那就让服务器和浏览器共同维护一个状态吧！这就是会话机制。</p><h2 id="会话机制"><a href="#会话机制" class="headerlink" title="会话机制"></a>会话机制</h2><p>浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，并在后续第二次和第三次请求中带上会话id，服务器取得请求中的会话id就知道是不是同一个用户了，这个过程用下图说明，后续请求与第一次请求产生了关联。</p><p><img src="https://images.morethink.cn/41970737be124812ef2b457d33aa38df.png" alt="" title="会话机制"></p><p>服务器在内存中保存会话对象，浏览器怎么保存会话id呢？</p><p>你可能会想到两种方式</p><ul><li>请求参数</li><li>cookie</li></ul><p>将会话id作为每一个请求的参数，服务器接收请求自然能解析参数获得会话id，并借此判断是否来自同一会话，很明显，这种方式不靠谱。那就浏览器自己来维护这个会话id吧，每次发送http请求时浏览器自动发送会话id，cookie机制正好用来做这件事。cookie是浏览器用来存储少量数据的一种机制，数据以”key/value”形式存储，浏览器发送http请求时自动附带cookie信息。</p><p>tomcat会话机制当然也实现了cookie，访问tomcat服务器时，浏览器中可以看到一个名为<code>JSESSIONID</code>的cookie，这就是tomcat会话机制维护的会话id，使用了cookie的请求响应过程如下图：</p><p><img src="https://images.morethink.cn/61273ed59b80ddef53862a0cba5f83a0.png" alt="" title="JSESSIONID"></p><h2 id="登录状态"><a href="#登录状态" class="headerlink" title="登录状态"></a>登录状态</h2><p>有了会话机制，登录状态就好明白了，我们假设浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat在会话对象中设置登录状态如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>用户再次访问时，tomcat在会话对象中查看登录状态：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.getAttribute(<span class="string">"isLogin"</span>);</span><br></pre></td></tr></table></figure><p>实现了登录状态的浏览器请求服务器模型如下图描述：</p><p><img src="https://images.morethink.cn/39ec3914d68cc400fab2d251d84370e6.png" alt="" title="登录状态控制"></p><p>每次请求受保护资源时都会检查会话对象中的登录状态，只有 <code>isLogin=true</code> 的会话才能访问，登录机制因此而实现。</p><h1 id="多系统的复杂性"><a href="#多系统的复杂性" class="headerlink" title="多系统的复杂性"></a>多系统的复杂性</h1><p>web系统早已从久远的单系统发展成为如今由多系统组成的应用群，面对如此众多的系统，用户难道要一个一个登录、然后一个一个注销吗？就像下图描述的这样</p><p><img src="https://images.morethink.cn/1c722018d9dfd78b8623a1c5c50cd740.png" alt="" title="多系统"></p><p><strong>web系统由单系统发展成多系统组成的应用群，复杂性应该由系统内部承担，而不是用户。无论web系统内部多么复杂，对用户而言，都是一个统一的整体，也就是说，用户访问web系统的整个应用群与访问单个系统一样，登录/注销只要一次就够了</strong>。</p><p><img src="https://images.morethink.cn/33e912634f234d469982fd25afac8e2a.png" alt="" title="单系统的登录"></p><p><strong><em>虽然单系统的登录解决方案很完美，但对于多系统应用群已经不再适用了，为什么呢？</em></strong></p><p>单系统登录解决方案的核心是cookie，cookie携带会话id在浏览器与服务器之间维护会话状态。但cookie是有限制的，这个限制就是cookie的域（通常对应网站的域名），浏览器发送http请求时会自动携带与该域匹配的cookie，而不是所有cookie。</p><p><img src="https://images.morethink.cn/3d3db13c2cab0ba0863b8ecfe4c3f7b2.png" alt="" title="夸域名"></p><h2 id="子域名cookie共享完成单点登录"><a href="#子域名cookie共享完成单点登录" class="headerlink" title="子域名cookie共享完成单点登录"></a>子域名cookie共享完成单点登录</h2><p>既然这样，为什么不将web应用群中所有子系统的域名统一在一个顶级域名下，例如“<code>*.baidu.com</code>”，然后将它们的cookie域设置为“baidu.com”，这种做法理论上是可以的，甚至早期很多多系统登录就采用这种同域名共享cookie的方式。</p><p>然而，可行并不代表好，共享cookie的方式存在众多局限。</p><ol><li>首先，应用群域名得统一。</li><li>其次，应用群各系统使用的技术（至少是web服务器）要相同，不然cookie的key值（tomcat为JSESSIONID）不同，无法维持会话，共享cookie的方式是无法实现跨语言技术平台登录的，比如java、php、.net系统之间。</li><li>第三，cookie本身不安全。</li></ol><p>除上面之外，如果我们在<code>session</code>存放的是<code>User</code>对象，那么我们使用全局cookie共享<code>JSESSIONID</code>值，每一个子域名就可以访问同一个session，登录成功后保存一个user对象，注销后就移除这个user对象。session中的user对象必须先序列化保存到redis中，并且每次访问的时候，都需要去redis中取出session，并且重新序列化成user对象。<strong>这样会造成额外的消耗</strong>。</p><p>因此，我们需要一种全新的登录方式来实现多系统应用群的登录，这就是单点登录。</p><h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><p><strong>什么是单点登录</strong>？</p><p>单点登录全称Single Sign On（以下简称SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分。</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>相比于单系统登录，sso需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。</p><p>这个过程，也就是单点登录的原理，用下图说明：</p><p><img src="https://images.morethink.cn/797930-20161203152650974-276822362.png" alt="" title="单点登录"></p><p>下面对上图简要描述：</p><ol><li>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数。</li><li>sso认证中心发现用户未登录，将用户引导至登录页面。</li><li>用户输入用户名密码提交登录申请。</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌。</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）。</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效。</li><li>sso认证中心校验令牌，返回有效，注册系统1。</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源。</li><li>用户访问系统2的受保护资源。</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数。</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌。</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效。</li><li>sso认证中心校验令牌，返回有效，注册系统2。</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源。</li></ol><p>用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系：</p><ul><li>局部会话存在，全局会话一定存在。</li><li>全局会话存在，局部会话不一定存在。</li><li>全局会话销毁，局部会话必须销毁。</li></ul><p>你可以通过博客园、百度、csdn、淘宝等网站的登录过程加深对单点登录的理解，注意观察登录过程中的跳转url与参数</p><h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><p>单点登录自然也要单点注销，在一个子系统中注销，所有子系统的会话都将被销毁，用下面的图来说明：</p><p><img src="https://images.morethink.cn/797930-20161129155242271-222889796.png" alt="" title="单点注销"></p><p>sso认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作</p><p>下面对上图简要说明：</p><ol><li>用户向系统1发起注销请求。</li><li>系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求。</li><li>sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址。</li><li>sso认证中心向所有注册系统发起注销请求。</li><li>各注册系统接收sso认证中心的注销请求，销毁局部会话。</li><li>sso认证中心引导用户至登录页面。</li></ol><h2 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h2><p>单点登录涉及sso认证中心与众子系统，子系统与sso认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成sso的客户端，sso认证中心则是sso服务端，整个单点登录过程实质是sso客户端与服务端通信的过程，用下图描述：</p><p><img src="https://images.morethink.cn/797930-20161129155244646-2067469767.png" alt="" title="部署图"></p><p>sso认证中心与sso客户端通信方式有多种，这里以简单好用的httpClient为例，web service、rpc、restful api都可以。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>只是简要介绍下基于java的实现过程，不提供完整源码，明白了原理，我相信你们可以自己实现。sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server）。</p><h3 id="sso-client"><a href="#sso-client" class="headerlink" title="sso-client"></a>sso-client</h3><ol><li>拦截子系统未登录用户请求，跳转至sso认证中心。</li><li>接收并存储sso认证中心发送的令牌。</li><li>与sso-server通信，校验令牌的有效性。</li><li>建立局部会话。</li><li>拦截用户注销请求，向sso认证中心发送注销请求。</li><li>接收sso认证中心发出的注销请求，销毁局部会话。</li></ol><h3 id="sso-server"><a href="#sso-server" class="headerlink" title="sso-server"></a>sso-server</h3><ol><li>验证用户的登录信息。</li><li>创建全局会话。</li><li>创建授权令牌。</li><li>与sso-client通信发送令牌。</li><li>校验sso-client令牌有效性。</li><li>系统注册。</li><li>接收sso-client注销请求，注销所有会话。</li></ol><p>接下来，我们按照原理来一步步实现sso吧！</p><h2 id="sso-client拦截未登录请求"><a href="#sso-client拦截未登录请求" class="headerlink" title="sso-client拦截未登录请求"></a>sso-client拦截未登录请求</h2><p>java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">    HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (session.getAttribute(<span class="string">"isLogin"</span>)) &#123;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转至sso认证中心</span></span><br><span class="line">    res.sendRedirect(<span class="string">"sso-server-url-with-system-url"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sso-server拦截未登录请求"><a href="#sso-server拦截未登录请求" class="headerlink" title="sso-server拦截未登录请求"></a>sso-server拦截未登录请求</h2><p>拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样。</p><h2 id="sso-server验证用户登录信息"><a href="#sso-server验证用户登录信息" class="headerlink" title="sso-server验证用户登录信息"></a>sso-server验证用户登录信息</h2><p>用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkLoginInfo(username, password);</span><br><span class="line">    req.getSession().setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sso-server创建授权令牌"><a href="#sso-server创建授权令牌" class="headerlink" title="sso-server创建授权令牌"></a>sso-server创建授权令牌</h2><p>授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String token = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure><h2 id="sso-client取得令牌并校验"><a href="#sso-client取得令牌并校验" class="headerlink" title="sso-client取得令牌并校验"></a>sso-client取得令牌并校验</h2><p>sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求附带token参数</span></span><br><span class="line">String token = req.getParameter(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 去sso认证中心校验token</span></span><br><span class="line">    <span class="keyword">boolean</span> verifyResult = <span class="keyword">this</span>.verify(<span class="string">"sso-server-verify-url"</span>, token);</span><br><span class="line">    <span class="keyword">if</span> (!verifyResult) &#123;</span><br><span class="line">        res.sendRedirect(<span class="string">"sso-server-url"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>verify()方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"sso-server-verify-url-with-token"</span>);</span><br><span class="line">HttpResponse httpResponse = httpClient.execute(httpPost);</span><br></pre></td></tr></table></figure><h2 id="sso-server接收并处理校验令牌请求"><a href="#sso-server接收并处理校验令牌请求" class="headerlink" title="sso-server接收并处理校验令牌请求"></a>sso-server接收并处理校验令牌请求</h2><ul><li><p>用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思）</p></li><li><p>令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。</p></li><li><p>令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话。</p></li></ul><p><img src="https://images.morethink.cn/797930-20161129155245506-1069288802.png" alt=""></p><h2 id="sso-client校验令牌成功创建局部会话"><a href="#sso-client校验令牌成功创建局部会话" class="headerlink" title="sso-client校验令牌成功创建局部会话"></a>sso-client校验令牌成功创建局部会话</h2><p>令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (verifyResult) &#123;</span><br><span class="line">    session.setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求</p><h2 id="注销过程"><a href="#注销过程" class="headerlink" title="注销过程"></a>注销过程</h2><p>用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String logout = req.getParameter(<span class="string">"logout"</span>);</span><br><span class="line"><span class="keyword">if</span> (logout != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ssoServer.logout(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.invalidate();<span class="comment">//触发LogoutListener</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过httpClient向所有注册系统发送注销请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码部署"><a href="#代码部署" class="headerlink" title="代码部署"></a>代码部署</h1><p>GitHub地址： <a href="https://github.com/morethink/simple-sso.git" target="_blank" rel="noopener">https://github.com/morethink/simple-sso.git</a></p><h2 id="IDEA部署"><a href="#IDEA部署" class="headerlink" title="IDEA部署"></a>IDEA部署</h2><p><img src="https://images.morethink.cn/3a48b1deaaecd4dc74377a5eacec4a08.png" alt=""><br><img src="https://images.morethink.cn/d341e21bdb77889efae518d35d754b34.png" alt=""><br><img src="https://images.morethink.cn/1439e11d0b2659b62780e887bd22b20f.png" alt=""></p><h2 id="单点登录-1"><a href="#单点登录-1" class="headerlink" title="单点登录"></a>单点登录</h2><p><strong>访问a系统</strong>：</p><p><a href="http://localhost/a/test" target="_blank" rel="noopener">http://localhost/a/test</a></p><p><img src="https://images.morethink.cn/a743f4b854fb7f82bf4855112de304de.png" alt=""></p><p><strong>访问b系统</strong>：</p><p><a href="http://localhost/b/test" target="_blank" rel="noopener">http://localhost/b/test</a></p><p><img src="https://images.morethink.cn/e619435d561a998088a6d11a4ecc22cc.png" alt=""></p><p><strong>a系统登录成功</strong>：</p><p><img src="https://images.morethink.cn/07a3bf0aefd180dfaa5779ba740998b4.png" alt=""></p><p><strong>b系统同时也登录成功</strong>:</p><p><img src="https://images.morethink.cn/e504ce5c9dc7e9e70303b9f3f54d20c2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单点登录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试中的TCP协议</title>
      <link href="/TCP/"/>
      <url>/TCP/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>TCP连接是通过三次握手来连接的。</p><p><strong>第一次握手</strong></p><p>当客户端向服务器发起连接请求时，客户端会发送同步序列标号<code>SYN</code>到服务器，在这里我们设<code>SYN</code>为x，等待服务器确认，这时客户端的状态为<code>SYN_SENT</code>。</p><a id="more"></a><p><strong>第二次握手</strong></p><p>当服务器收到客户端发送的<code>SYN</code>后，服务器要做的是确认客户端发送过来的<code>SYN</code>，在这里服务器发送确认包<code>ACK</code>，这里的<code>ACK</code>为x+1，意思是说“我收到了你发送的<code>SYN</code>了”，同时，服务器也会向客户端发送一个<code>SYN</code>包，这里我们设<code>SYN</code>为y。这时服务器的状态为<code>SYN_RECV</code>。</p><p>一句话，服务器端发送<code>SYN</code>和<code>ACK</code>两个包。</p><p><strong>第三次握手</strong></p><p>客户端收到服务器发送的<code>SYN</code>和<code>ACK</code>包后，需向服务器发送确认包<code>ACK</code>，“我也收到你发送的<code>SYN</code>了，我这就给你发个确认过去，然后我们即能合体了”，这里的<code>ACK</code>为y+1，发送完毕后，客户端和服务器的状态为<code>ESTABLISH</code>，即TCP连接成功。</p><p>在三次握手中，客户端和服务器端都发送两个包<code>SYN</code>和<code>ACK</code>，只不过服务器端的两个包是一次性发过来的，客户端的两个包是分两次发送的。</p><p><img src="https://images.morethink.cn/092017231747399.jpg" alt="" title="TCP的三次握手和四次挥手"></p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>当A端和B端要断开连接时，需要四次握手，这里称为四次挥手。</p><p>断开连接请求可以由客户端发出，也可以由服务器端发出，在这里我们称A端向B端请求断开连接。</p><p><strong>第一次挥手</strong></p><p>A端向B端请求断开连接时会向B端发送一个带有<code>FIN</code>标记的报文段，这里的<code>FIN</code>是<code>Finish</code>的意思。</p><p><strong>第二次挥手</strong></p><p>B端收到A发送的<code>FIN</code>后，B段现在可能现在还有数据没有传完，所以B端并不会马上向A端发送<code>FIN</code>，而是先发送一个确认序号<code>ACK</code>，意思是说“你发的断开连接请求我收到了，但是我现在还有数据没有发完，请稍等一下呗”。</p><p><strong>第三次挥手</strong></p><p>当B端的事情忙完了，那么此时B端就可以断开连接了，此时B端向A端发送<code>FIN</code>序号，意思是这次可以断开连接了。</p><p><strong>第四次挥手</strong></p><p>A端收到B端发送的<code>FIN</code>后，会向B端发送确认<code>ACK</code>，然后经过两个MSL时长后断开连接。</p><p>MSL是Maximum Segment Lifetime，最大报文段生存时间，2个MSL是报文段发送和接收的最长时间。</p><h2 id="两次握手可以么？"><a href="#两次握手可以么？" class="headerlink" title="两次握手可以么？"></a>两次握手可以么？</h2><p>TCP连接时是三次握手，那么两次握手可行吗？</p><p>在谢希仁著《计算机网络》第六版中讲”三次握手”的目的是”为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。</p><p>假定出现一种异常情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送<code>ACK</code>包。这样就会白白浪费资源。</p><p>而经过三次握手，客户端和服务器都有应有答，这样可以确保TCP正确连接。</p><h2 id="为什么TCP连接是三次，挥手确是四次？"><a href="#为什么TCP连接是三次，挥手确是四次？" class="headerlink" title="为什么TCP连接是三次，挥手确是四次？"></a>为什么TCP连接是三次，挥手确是四次？</h2><p>在TCP连接中，服务器端的<code>SYN</code>和<code>ACK</code>向客户端发送是一次性发送的，而在断开连接的过程中，B端向A端发送的<code>ACK</code>和<code>FIN</code>是是分两次发送的。因为在B端接收到A端的<code>FIN</code>后，B端可能还有数据要传输，所以先发送<code>ACK</code>，等B端处理完自己的事情后就可以发送<code>FIN</code>断开连接了。</p><h2 id="为什么在第四次挥手后会有2个MSL的延时？"><a href="#为什么在第四次挥手后会有2个MSL的延时？" class="headerlink" title="为什么在第四次挥手后会有2个MSL的延时？"></a>为什么在第四次挥手后会有2个MSL的延时？</h2><p>前文说到:<br>MSL是Maximum Segment Lifetime，最大报文段生存时间，2个MSL是报文段发送和接收的最长时间。</p><p>假定网络不可靠，那么第四次发送的<code>ACK</code>可能丢失，即B端无法收到这个<code>ACK</code>，如果B端收不到这个确认<code>ACK</code>，B端会定时向A端重复发送<code>FIN</code>，直到B端收到A的确认<code>ACK</code>。所以这个2MSL就是用来处理这个可能丢失的<code>ACK</code>的。</p><h1 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h1><p>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方可能来不及接收，这就会造成数据的丢失。所谓 <strong>流量控制(flow contrl)</strong> 就是 <strong>让发送方的发送速率不要太快，要让接收方来得及接收</strong> 。</p><p>TCP利用滑动窗口机制实现对发送方的流量控制，发送方的发送窗口不可以大于接收方给出的接收窗口的大小。窗口两个边沿的相对运动增加或减少了窗口的大小。当接收方没有缓存可用，会发送零窗口大小的报文，此时发送方不能够发送任何数据。</p><p>TCP的窗口单位是字节，不是报文段。</p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>滑动窗口协议是传输层进行流控的一种措施，接收方通过通告发送方自己的窗口大小，从而控制发送方的发送速度，从而达到防止发送方发送速度过快而导致自己被淹没的目的。</p><p>TCP滑动窗口分为接受窗口，发送窗口。</p><p>对ACK的再认识，ack通常被理解为收到数据后给出的一个确认ACK，ACK包含两个非常重要的信息：</p><ol><li>期望接收到的下一字节的序号n，该n代表接收方已经接收到了前n-1字节数据，此时如果接收方收到第n+1字节数据而不是第n字节数据，接收方是不会发送序号为n+2的ACK的。举个例子，假如接收端收到1-1024字节，它会发送一个确认号为1025的ACK,但是接下来收到的是2049-3072，它是不会发送确认号为3072的ACK,而依旧发送1025的ACK。</li><li>是当前的窗口大小m，如此发送方在接收到ACK包含的这两个数据后就可以计算出还可以发送多少字节的数据给对方，假定当前发送方已发送到第x字节，则可以发送的字节数就是y=m-(x-n).</li></ol><p>重点：<br>发送方根据收到ACK当中的期望收到的下一个字节的序号n以及窗口m，还有当前已经发送的字节序号x，算出还可以发送的字节数。</p><p>滑动窗口协议如图所示：<br><img src="https://images.morethink.cn/cf6a1ce659c9b81d49a4ae3ccc3c2df5.png" alt=""></p><p>在这个图中，我们将字节从1至11进行标号。接收方通告的窗口称为提出的窗口，它覆盖了从第4字节到第9字节的区域，表明接收方已经确认了包括第3字节在内的数据，且通告窗口大小为6。我们知道窗口大小是与确认序号相对应的。发送方计算它的可用窗口，该窗口表明多少数据可以立即被发送。当接收方确认数据后，这个滑动窗口不时地向右移动。窗口两个边沿的相对运动增加或减少了窗口的大小。我们使用三个术语来描述窗口左右边沿的运动：</p><ul><li>窗口左边沿向右边沿靠近为窗口合拢。这种现象发生在数据被发送和确认时。</li><li>当窗口右边沿向右移动时将允许发送更多的数据，我们称之为窗口张开。这种现象发生在另一端的接收进程读取已经确认的数据并释放了T C P的接收缓存时。</li><li>当右边缘向左移动时，称之为窗口收缩。</li></ul><p>每个TCP连接有发送窗口和接收窗口这两个窗口。</p><p>TCP是双工的协议，会话的双方都可以同时接收、发送数据。</p><p>TCP会话的双方都各自维护一个“发送窗口”和一个“接收窗口”。其中各自的“接收窗口”大小取决于应用、系统、硬件的限制（TCP传输速率不能大于应用的数据处理速率）。各自的“发送窗口”则要求取决于对端通告的“接收窗口”，要求相同。</p><h1 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h1><p>在计算机网络中的链路容量(即带宽)、交换节点中的缓存和处理机等，都是网络中的资源。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就会变坏。这种情况就叫做 <strong>拥塞</strong>。</p><p><strong>拥塞控制</strong> 就是 <strong>防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致过载</strong>。</p><p>拥塞控制是一个全局性的过程，和流量控制不同，流量控制指点对点通信量的控制。</p><p>进行拥塞控制的四种算法：</p><ol><li>慢开始（Slow-start)</li><li>拥塞避免（Congestion Avoidance)</li><li>快重传（Fast Restrangsmit)</li><li>快恢复（Fast Recovery）。</li></ol><h2 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h2><p>发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。</p><p>慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。在一开始发送方先设置cwnd=1，<strong>每经过一次传输轮次之后拥塞窗口就加倍（2的指数倍增加）</strong>。</p><p>为了防止窗口cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：</p><ul><li>当cwnd&lt;ssthresh时，使用慢开始算法。</li><li>当cwnd&gt;ssthresh时，改用拥塞避免算法。</li><li>当cwnd=ssthresh时，既可使用慢开始算法，也可使用拥塞算法。</li></ul><p>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。<strong>这样拥塞窗口按线性规律缓慢增长</strong>，比慢开始算法的拥塞窗口增长速率缓慢得多。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（<strong>其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理</strong>），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。</p><p><img src="https://images.morethink.cn/13101915439696.jpg" alt="" title="慢开始和拥塞避免"></p><h2 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h2><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。由于发送方能 <strong>尽早重传未被确认的报文段</strong>，因此采用快重传算法后可以使整个网络的吞吐量提高约20%。</p><p>快恢复算法，有以下两个要点:</p><ol><li>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。<strong>但是接下去并不执行慢开始算法</strong>。</li><li><strong>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法</strong>。</li></ol><p><img src="https://images.morethink.cn/c6f967f1bbd18ddafcfef14669c8fca7.png" alt="" title="快重传和快恢复算法"></p><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><ul><li>TCP面向连接，UDP面向非连接即发送数据前不需要建立链接。<ul><li>面向连接的服务，通信双方在进行通信之前，要先在双方建立起一个完整的可以彼此沟通的通道，在通信过程中，整个连接的情况一直可以被实时地监控和管理。</li><li>非面向连接的服务，不需要预先建立一个联络两个通信节点的连接，需要通信的时候，发送节点就可以往网络上发送信息，让信息自主地在网络上去传，一般在传输的过程中不再加以监控。</li></ul></li><li>TCP提供可靠的服务（数据传输），UDP无法保证。</li><li>TCP面向字节流，UDP面向报文。</li><li>TCP数据传输慢，UDP数据传输快。</li></ul><p><strong>注意</strong>：</p><p>TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。</p><p>TCP的可靠性应该是相对于UDP不可靠传输来说的，因为UDP提供的是不可靠的数据报服务，不保证数据报能到达接收端，可能会有丢失；另外处于传输层之下的IP层也是不可靠的，仅提供尽力而为的端到端数据传输服务（best-effort delivery service），不作任何保证。</p><p>所以TCP的可靠性是指基于不可靠的IP层在传输层提供可靠的数据传输服务，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p><p>实现TCP的可靠传输有以下机制：</p><ol><li>校验和（校验数据是否损坏）</li><li>定时器（分组丢失则重传）</li><li>序号（用于检测丢失的分组和冗余的分组）</li><li>确认（接收方告知发送方正确接收分组以及期望的下一个分组）</li><li>否定确认（接收方通知发送方未被正确接收的分组）</li><li>窗口和流水线（用于增加信道的吞吐量）。</li></ol><p>至于数据是否在中途被修改或者被窃听，这应该是属于安全性问题。提高安全性最根本的办法就是加密数据，比如远程登录用ssh而非telnet。</p><h1 id="TCP、UDP对应的协议"><a href="#TCP、UDP对应的协议" class="headerlink" title="TCP、UDP对应的协议"></a>TCP、UDP对应的协议</h1><h2 id="TCP对应的协议"><a href="#TCP对应的协议" class="headerlink" title="TCP对应的协议"></a>TCP对应的协议</h2><ol><li>FTP：定义了文件传输协议，使用21端口。</li><li>Telnet：一种用于远程登陆的端口，使用23端口，用户可以以自己的身份远程连接到计算机上，可提供基于DOS模式下的通信服务。</li><li>SMTP：邮件传送协议，用于发送邮件。服务器开放的是25号端口。</li><li>POP3：它是和SMTP对应，POP3用于接收邮件。POP3协议所用的是110端口。</li><li>HTTP：是从Web服务器传输超文本到本地浏览器的传送协议。</li></ol><h2 id="UDP对应的协议"><a href="#UDP对应的协议" class="headerlink" title="UDP对应的协议"></a>UDP对应的协议</h2><ol><li>DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。</li><li>SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</li><li>TFTP(Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口69上使用UDP服务。</li></ol><h1 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a><code>SYN</code>攻击</h1><h2 id="什么是-SYN-攻击（SYN-Flood）？"><a href="#什么是-SYN-攻击（SYN-Flood）？" class="headerlink" title="什么是 SYN 攻击（SYN Flood）？"></a>什么是 <code>SYN</code> 攻击（SYN Flood）？</h2><p>在三次握手过程中，服务器发送 <code>SYN-ACK</code> 之后，收到客户端的 <code>ACK</code> 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 <code>SYN_RCVD</code> 状态。当收到 ACK 后，服务器才能转入 <code>ESTABLISHED</code> 状态.</p><p><code>SYN</code>攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送<code>SYN</code>包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的<code>SYN</code>包将长时间占用未连接队列，正常的<code>SYN</code>请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p><p><code>SYN</code> 攻击是一种典型的 <code>DoS/DDoS</code> 攻击。</p><h2 id="如何检测-SYN-攻击？"><a href="#如何检测-SYN-攻击？" class="headerlink" title="如何检测 SYN 攻击？"></a>如何检测 <code>SYN</code> 攻击？</h2><p>检测 <code>SYN</code> 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次<code>SYN</code>攻击。在 <code>Linux/Unix</code> 上可以使用系统自带的 <code>netstats</code> 命令来检测 <code>SYN</code> 攻击。</p><h2 id="如何防御-SYN-攻击？"><a href="#如何防御-SYN-攻击？" class="headerlink" title="如何防御 SYN 攻击？"></a>如何防御 <code>SYN</code> 攻击？</h2><p><code>SYN</code>攻击不能完全被阻止，除非将TCP协议重新设计。我们所做的是尽可能的减轻<code>SYN</code>攻击的危害，常见的防御<code>SYN</code> 攻击的方法有如下几种：</p><ul><li>缩短超时（<code>SYN</code> Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li><code>SYN</code> cookies技术</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC 知识整理</title>
      <link href="/SpringMVC-Knowledge-finishing/"/>
      <url>/SpringMVC-Knowledge-finishing/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC架构设计"><a href="#SpringMVC架构设计" class="headerlink" title="SpringMVC架构设计"></a>SpringMVC架构设计</h1><p><strong>MVC是一种架构模式</strong>，它把业务的实现和展示相分离。</p><p><img src="https://images.morethink.cn/ddbf6d71cefe533f850b5466b583cfc0.png" alt="" title="SpringMVC架构"></p><a id="more"></a><h1 id="SpringMVC与struts2的区别"><a href="#SpringMVC与struts2的区别" class="headerlink" title="SpringMVC与struts2的区别"></a>SpringMVC与struts2的区别</h1><ol><li><strong>Struts2是类级别的拦截</strong>， 一个类对应一个request上下文，<strong>SpringMVC是方法级别的拦截</strong>，一个方法对应一个request上下文，而方法同时又跟一个url对应,所以说从架构本身上SpringMVC就容易实现restful url,而struts2的架构实现起来要费劲，因为Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。</li><li><strong>springmvc可以进行单例开发</strong>，并且建议使用单例开发，struts2通过类的成员变量接收参数，无法使用单例，只能使用多例。</li><li>由于Struts2需要针对每个request进行封装，把request，session等servlet生命周期的变量封装成一个一个Map，供给每个Action使用，并保证线程安全，所以在原则上，是比较耗费内存的。</li><li><strong>拦截器实现机制上</strong>，Struts2有以自己的interceptor机制，SpringMVC用的是独立的AOP方式，这样导致Struts2的配置文件量还是比SpringMVC大。</li><li>servlet和filter的区别了。</li><li>SpringMVC集成了Ajax，使用非常方便，只需一个注解<code>@ResponseBody</code>就可以实现，然后直接返回响应文本即可，而Struts2拦截器集成了Ajax，在Action中处理时一般必须安装插件或者自己写代码集成进去，使用起来也相对不方便。</li><li>SpringMVC验证支持JSR303，处理起来相对更加灵活方便，而Struts2验证比较繁琐，感觉太烦乱。</li><li>spring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高（当然Struts2也可以通过不同的目录结构和相关配置做到SpringMVC一样的效果，但是需要xml配置的地方不少）。</li><li>设计思想上，Struts2更加符合OOP的编程思想， SpringMVC就比较谨慎，在servlet上扩展。</li><li>SpringMVC开发效率和性能高于Struts2。</li><li>SpringMVC可以认为已经100%零配置。</li></ol><h1 id="SpringAOP整合SpringMVC"><a href="#SpringAOP整合SpringMVC" class="headerlink" title="SpringAOP整合SpringMVC"></a>SpringAOP整合SpringMVC</h1><p>spring容器不注册controller层组件，controller组件由springMVC容器单独注册。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// applicationContext.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.shuyun.channel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.RestController"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// springmvc-servlet.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.shuyun.channel"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.RestController"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>关于<code>&lt;context:annotation-config /&gt;</code>和 <code>&lt;context:component-scan /&gt;</code>:</p><p><strong>component-scan会自动加上annotation-config功能，有了component-scan不用再写annotation-config了</strong>。参见spring官方reference</p><h1 id="配置层次化Spring容器"><a href="#配置层次化Spring容器" class="headerlink" title="配置层次化Spring容器"></a>配置层次化Spring容器</h1><p>参考 <a href="http://blog.csdn.net/skyhitnow/article/details/43731493" target="_blank" rel="noopener">配置层次化Spring容器</a></p><p>我们知道，在开发基于spring的Web应用时，通常使用两个IoC容器，一个是由DispatchServlet初始化的WebApplicationContext,一个是由ContextLoaderListener初始化的ApplicationContext。对于Spring容器，Spring的官方参考手册详细地讲解了依赖注入的配置方式，对于容器本身的配置和多个容器之间的关系却不曾提及。于是，很多人以为在一个应用中只有一个全局的Spring容器，或者不了解MVC使用的WebApplicationContext和根ApplicationContext的关系。</p><p>通过查看Spring的源码和API,发现Spring可以配置为多个容器，容器之间可以配置为层级关系，一个根容器可以配置许多子容器，子容器还可以配置子容器，从而形成一个单根的层次化结构。对于该容器结构中的每个容器，在其中查找特定的bean时，会首先在本容器内查找，如果找到对应的bean,就返回该bean；如果没有找到，就会从直接父容器中去查找，依此类推，直到根容器为止。</p><p>从上面的示例中可以看到，从子容器中可以取得父容器中配置的bean，而父容器中不能够取得子容器中的bean。</p><p>在Spring MVC中WebApplicationContext配置为根ApplicationContext的子容器，所以，MVC使用的容器中能够取得根ApplicationContext中的bean。<strong>在一个web程序中可以配置多个DispatchSerlvet，每个Servlet对应一个容器</strong>，所有这些容器都作为根容器的子容器，这样，我们就可以把通用的bean放在根容器中，而针对特定DispatchServlet的bean，可以放在各自的子容器中。</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><ul><li><p>Controller的方法中需要接受一个Spring MVC提供的MultipartFile接口作为方法的参数，该参数接收前台表单type为file提交的对象，使用<code>@RequestParam</code>注解指明参数，那么Spring就会自动将表单传递过来的对象的类型转换为MultipartFile类型。</p></li><li><p>MultipartFile中提供了getName()、getSize()、getByte()<br>getContentType()、isEmpty()、getInputStream()、getOriginalFilename()方法来访问文件。getOriginalFilename()方法是获取最初文件名，即本地文件名。</p></li><li>在Controller方法中使用FileUtils下的copyInputStreamToFile(InputStream in,File file)方法来完成文件的拷贝.第一个参数是文件拷贝源的输入流,直接使用MultipartFile下的getInputStream()方法.第二个参数是文件将要保存的位置.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doUpload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">doUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">        FileUtils.copyInputStreamToFile(file.getInputStream(), <span class="keyword">new</span> File(<span class="string">"E://"</span>, file.getOriginalFilename()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.SUCCESS_RESULT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h1><ul><li><a href="https://www.mkyong.com/java/how-to-enable-pretty-print-json-output-jackson/" target="_blank" rel="noopener">How to enable pretty print JSON output (Jackson)</a></li><li><a href="https://www.mkyong.com/java/jackson-2-convert-java-object-to-from-json/" target="_blank" rel="noopener">Jackson 2 – Convert Java Object to / from JSON</a></li><li><a href="http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html" target="_blank" rel="noopener">SpringMVC关于json、xml自动转换的原理研究(附带源码分析)</a></li></ul><h1 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h1><p>拦截器好比你要去取经，那么，你就必须经过九九八十一关，主要用来解决请求的共性问题，如：乱码问题、权限验证问题等</p><p>实现SpringMVC拦截器的三个步骤</p><ol><li>创建一个实现HandlerInterceptor接口，并实现接口的方法的类</li><li><p>将创建的拦截器注册到SpringMVC的配置文件中实现注册</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc：interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"路径下的类"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc：interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置拦截器的拦截规则：</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc：interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc：interceptor</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"拦截的action"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"路径下的类"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc：interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc：interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>拦截器中三个方法的介绍：</p><ol><li>preHandle()方法是否将当前请求拦截下来。（返回true请求继续运行，返回false请求终止（包括action层也会终止），Object arg代表被拦截的目标对象。）</li><li>postHandle()方法的ModelAndView对象可以改变发往的视图或修改发往视图的信息。</li><li>afterCompletion()方法表示视图显示之后在执行该方法。（一般用于资源的销毁）</li></ol><h2 id="拦截器和过滤器"><a href="#拦截器和过滤器" class="headerlink" title="拦截器和过滤器"></a>拦截器和过滤器</h2><p>共同：他们都是用来检查程序的共同场景，只不过拦截器是面向Action的，过滤器是面向整个web应用的。</p><ol><li>解决权限验证问题</li><li>解决乱码问题</li></ol><p>拦截器和过滤器的区别：</p><ol><li>拦截器是基于java的反射机制的，而过滤器是基于函数回调。</li><li>拦截器不依赖与servlet容器，过滤器依赖与servlet容器。</li><li>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。</li><li>拦截器可以访问action上下文、<strong>值栈</strong> 里的对象，而过滤器不能访问。</li><li>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</li><li><strong>拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑</strong>。</li></ol><h2 id="拦截器方法的作用顺序"><a href="#拦截器方法的作用顺序" class="headerlink" title="拦截器方法的作用顺序"></a>拦截器方法的作用顺序</h2><p><img src="https://images.morethink.cn/a23b0321f130d0b064094c2b9e1e15a6.png" alt="" title="拦截器方法的作用顺序"></p><p>拦截器的其它实现方式：</p><ol><li>拦截器的类还可以通过实现WebRequestInterceptor（HandlerInterceptor）接口来编写。</li><li>向SpringMVC框架注册的写法不变。</li><li>弊端：preHandler方法没有返回值，不能终止请求。</li></ol><p>Ps：建议使用功能更强大的实现方式，实现HandlerInterceptor接口。</p><h1 id="Spring4增加功能"><a href="#Spring4增加功能" class="headerlink" title="Spring4增加功能"></a>Spring4增加功能</h1><p>Spring4主要在Web服务方面有下面两个方面提升：</p><ol><li>控制器使用<code>@ResponseBody</code>和 <code>@RestController</code>。</li><li>异步调用。</li></ol><h1 id="Spring整合Struts2"><a href="#Spring整合Struts2" class="headerlink" title="Spring整合Struts2"></a>Spring整合Struts2</h1><p>Spring默认是单例，Struts2默认是多实例的。</p><p>如果是spring配置文件中的 bean的名字的话就是spring创建，那么单实例还是多实例就由spring的action Bean中的业务逻辑控制器类是否配置为scope=”prototype”，有就是多实例的，没有就是单实例的，顺序是先从spring中找，找不到再从struts配置文件中找。</p><ol><li><p>对于无Spring插件（Struts2-spring-plugin-XXX.jar）的整合方式，需要在spring的action Bean中加业务逻辑控制器类配scope=”prototype”。</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"modle.User"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>对于有Spring插件（Struts2-spring-plugin-XXX.jar）的整合方式：反编译StrutsSpringObjectFactory以及相关的代码才发现，如果在struts action的配置文件 <code>&lt;action name=&quot;..&quot; class=&quot;..&quot;/&gt;</code> 中class写的如果是完整的包名和类名的话就是struts创建action对象，也就是多实例的；</p></li></ol><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.cnblogs.com/sunniest/p/4555801.html" target="_blank" rel="noopener">史上最全最强SpringMVC详细示例实战教程</a></li><li><a href="https://www.tianmaying.com/tutorial/spring-mvc-quickstart" target="_blank" rel="noopener">Spring MVC快速入门</a></li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html" target="_blank" rel="noopener">Web MVC framework - Part VI. The Web</a></li><li><a href="http://snowolf.iteye.com/blog/1628861" target="_blank" rel="noopener">Spring 注解学习手札（七） 补遗——@ResponseBody，@RequestBody，@PathVariable</a></li><li><a href="https://github.com/kuitos/kuitos.github.io/issues/9" target="_blank" rel="noopener">SpringMVC4.1之Controller层最佳实践</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SpringMVC 参数绑定注解解析</title>
      <link href="/SpringMVC-Annotation/"/>
      <url>/SpringMVC-Annotation/</url>
      
        <content type="html"><![CDATA[<p>本文介绍了用于参数绑定的相关注解。</p><p>绑定：将请求中的字段按照名字匹配的原则填入模型对象。</p><p>SpringMVC就跟Struts2一样，通过拦截器进行参数匹配。</p><p>代码在 <a href="https://github.com/morethink/MySpringMVC" target="_blank" rel="noopener">https://github.com/morethink/MySpringMVC</a></p><h1 id="URI模板变量"><a href="#URI模板变量" class="headerlink" title="URI模板变量"></a>URI模板变量</h1><p>这里指uri template中variable(路径变量)，不含queryString部分<br><a id="more"></a></p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a><code>@PathVariable</code></h2><p>当使用<code>@RequestMapping</code> URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 <code>@Pathvariable</code>注解绑定它传过来的值到方法的参数上。</p><p>示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.successResult(<span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。<strong>若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称</strong>。</p><h1 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h1><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a><code>@RequestHeader</code></h2><p><code>@RequestHeader</code> 注解，可以把Request请求header部分的值绑定到方法的参数上。</p><p>示例代码：</p><p>这是一个Request 的header部分：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cache-Control:max-age=0</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:localhost:8080</span><br><span class="line">Upgrade-Insecure-Requests:1</span><br><span class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getRequestHeader</span><span class="params">(@RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.successResult(encoding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上。</p><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a><code>@CookieValue</code></h2><p>可以把Request header中关于cookie的值绑定到方法的参数上。</p><p>例如有如下Cookie值：<br><code>JSESSIONID=588DC770E582A3189B7E6210102EAE02</code><br>参数绑定的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getCookie"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getCookie</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.successResult(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即把JSESSIONID的值绑定到参数cookie上。</p><h1 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h1><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a><code>@RequestParam</code></h2><ul><li>常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</li><li><strong>用来处理Content-Type: 为 <code>application/x-www-form-urlencoded</code>编码的内容，提交方式GET、POST</strong>；</li><li>该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/tesRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">tesRequestParam</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.successResult(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a><code>@RequestBody</code></h2><p>该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p><p>它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p><p>因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap&lt;String, String&gt;里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/tesRequestBody&quot;)</span><br><span class="line">public Result tesRequestBody(@RequestBody User user) &#123;</span><br><span class="line"></span><br><span class="line">    return ResultUtil.successResult(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图：</p><p><img src="https://images.morethink.cn/f918dd11d4630c479a25548cca70acc2.png" alt="" title="Content-Type:application/json"></p><h2 id="RequestBody通过list接收对象数组"><a href="#RequestBody通过list接收对象数组" class="headerlink" title="@RequestBody通过list接收对象数组"></a><code>@RequestBody</code>通过list接收对象数组</h2><p>在我们传递对象的时候，无论<code>Content-Type</code>是<code>x-www-form-urlencoded</code>还是<code>application/json</code>其实没有多大的关系，可是当我们需要传递对象数组的时候，表单编码就不行了，这时我们是可以采用json传递，然后后台使用<code>@RequestBody</code>注解，通过list接收来对象数组。</p><p>前端代码：</p><p>index.html<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开页面时运行</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> users = [];</span><br><span class="line">    <span class="keyword">var</span> user1 = &#123;<span class="string">"username"</span>: <span class="string">"dd"</span>, <span class="string">"password"</span>: <span class="string">"123"</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> user2 = &#123;<span class="string">"username"</span>: <span class="string">"gg"</span>, <span class="string">"password"</span>: <span class="string">"123"</span>&#125;;</span><br><span class="line">    users.push(user1);</span><br><span class="line">    users.push(user2);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"users/saveUsers"</span>,</span><br><span class="line">        timeout: <span class="number">30000</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">        contentType: <span class="string">"application/json"</span>,</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify(users),</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//将返回的数据展示成table</span></span><br><span class="line">            showTable(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//请求出错的处理</span></span><br><span class="line">            $(<span class="string">"#result"</span>).text(<span class="string">"请求出错"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>后台代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"saveUsers"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">saveUsers</span><span class="params">(@RequestBody List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.successResult(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图：</p><p><img src="https://images.morethink.cn/2161af7bd2378ca110347dd73a4ecf94.png" alt="" title="表格展示数据"></p><h1 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="@SessionAttribute"></a><code>@SessionAttribute</code></h1><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/setSessionAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">setSessionAttribute</span><span class="params">(HttpSession session, String attribute)</span> </span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">"attribute"</span>, attribute);</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.SUCCESS_RESULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getSessionAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getSessionAttribute</span><span class="params">(@SessionAttribute(<span class="string">"attribute"</span>)</span> String attribute) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.successResult(attribute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先给session添加一个attribute，然后再取出这个attribute。</p><p><img src="https://images.morethink.cn/03f2cfd9da78e5abd39254a7cc7c21d7.png" alt="" title="添加属性"></p><p><img src="https://images.morethink.cn/6d17bbc4aeb10b48e4593ca5e82f3ca9.png" alt="" title="得到属性"></p><h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a><code>@ModelAttribute</code></h1><p>@ModelAttribute标注可被应用在方法或方法参数上。</p><h2 id="方法使用-ModelAttribute标注"><a href="#方法使用-ModelAttribute标注" class="headerlink" title="方法使用@ModelAttribute标注"></a>方法使用@ModelAttribute标注</h2><p>标注在方法上的<code>@ModelAttribute</code>说明方法是用于添加一个或多个属性到model上。这样的方法能接受与<code>@RequestMapping</code>标注相同的参数类型，只不过不能直接被映射到具体的请求上。</p><p>在同一个控制器中，标注了<code>@ModelAttribute</code>的方法实际上会在<code>@RequestMapping</code>方法之前被调用。</p><p>以下是示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add one attribute</span></span><br><span class="line"><span class="comment">// The return value of the method is added to the model under the name "account"</span></span><br><span class="line"><span class="comment">// You can customize the name via @ModelAttribute("myAccount")</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountManager.findAccount(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add multiple attributes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateModel</span><span class="params">(@RequestParam String number, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(accountManager.findAccount(number));</span><br><span class="line">    <span class="comment">// add more ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>@ModelAttribute</code>方法通常被用来填充一些公共需要的属性或数据</strong>，比如一个下拉列表所预设的几种状态，或者宠物的几种类型，或者去取得一个HTML表单渲染所需要的命令对象，比如Account等。</p><p>@ModelAttribute标注方法有两种风格：</p><ul><li>在第一种写法中，方法通过返回值的方式默认地将添加一个属性；</li><li>在第二种写法中，方法接收一个Model对象，然后可以向其中添加任意数量的属性。</li></ul><p>可以在根据需要，在两种风格中选择合适的一种。</p><p><strong>一个控制器可以拥有多个<code>@ModelAttribute</code>方法。同个控制器内的所有这些方法，都会在<code>@RequestMapping</code>方法之前被调用。</strong></p><p><code>@ModelAttribute</code>方法也可以定义在<code>@ControllerAdvice</code>标注的类中，并且这些<code>@ModelAttribute</code>可以同时对许多控制器生效。</p><p>属性名没有被显式指定的时候又当如何呢？在这种情况下，框架将根据属性的类型给予一个默认名称。举个例子，若方法返回一个Account类型的对象，则默认的属性名为”account”。可以通过设置@ModelAttribute标注的值来改变默认值。当向Model中直接添加属性时，请使用合适的重载方法addAttribute(..)-即带或不带属性名的方法。</p><p>@ModelAttribute标注也可以被用在<code>@RequestMapping</code>方法上。这种情况下，<code>@RequestMapping</code>方法的返回值将会被解释为model的一个属性，而非一个视图名，此时视图名将以视图命名约定来方式来确定。</p><h2 id="方法参数使用-ModelAttribute标注"><a href="#方法参数使用-ModelAttribute标注" class="headerlink" title="方法参数使用@ModelAttribute标注"></a>方法参数使用<code>@ModelAttribute</code>标注</h2><p><strong>标注在方法参数上的<code>@ModelAttribute</code>说明了该方法参数的值将由model中取得。如果model中找不到，那么该参数会先被实例化，然后被添加到model中。在model中存在以后，请求中所有名称匹配的参数都会填充到该参数中。</strong></p><p>这在Spring MVC中被称为数据绑定，一个非常有用的特性，我们不用每次都手动从表格数据中转换这些字段数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">saveUser</span><span class="params">(@ModelAttribute User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.successResult(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面的代码为例，这个User类型的实例可能来自哪里呢？有几种可能:</p><ul><li>它可能因为<code>@SessionAttributes</code>标注的使用已经存在于model中</li><li>它可能因为在同个控制器中使用了<code>@ModelAttribute</code>方法已经存在于model中，正如上一小节所叙述的</li><li>它可能是由URI模板变量和类型转换中取得的</li><li>它可能是调用了自身的默认构造器被实例化出来的</li></ul><p>@ModelAttribute方法常用于从数据库中取一个属性值，该值可能通过<code>@SessionAttributes</code>标注在请求中间传递。在一些情况下，使用URI模板变量和类型转换的方式来取得一个属性是更方便的方式。</p><h1 id="在不给定注解的情况下，参数是怎样绑定的？"><a href="#在不给定注解的情况下，参数是怎样绑定的？" class="headerlink" title="在不给定注解的情况下，参数是怎样绑定的？"></a>在不给定注解的情况下，参数是怎样绑定的？</h1><p>通过分析<code>AnnotationMethodHandlerAdapter</code>和<code>RequestMappingHandlerAdapter</code>的源代码发现，方法的参数在不给定参数的情况下：</p><ul><li>若要绑定的对象时简单类型：调用<code>@RequestParam</code>来处理的。<br>这里的简单类型指Java的原始类型(boolean, int 等)、原始类型对象（Boolean, Int等）、String、Date等ConversionService里可以直接String转换成目标对象的类型。也就是说没有特别需求，不推荐使用<code>@RequestParam</code>。</li><li>若要绑定的对象时复杂类型：调用<code>@ModelAttribute</code>来处理的。也就是说如果不需要从model或者session中得到数据，@ModelAttribute可以不使用。</li></ul><h1 id="RequestMapping支持的方法参数"><a href="#RequestMapping支持的方法参数" class="headerlink" title="@RequestMapping支持的方法参数"></a><code>@RequestMapping</code>支持的方法参数</h1><p>下面这些参数Spring在调用请求方法的时候会自动给它们赋值，所以当在请求方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。</p><ol><li>HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</li><li>Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</li><li>InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</li><li>使用<code>@PathVariable</code> 、<code>@RequestParam</code> 、<code>@CookieValue</code> 和 <code>@RequestHeader</code> 标记的参数。</li><li>使用<code>@ModelAttribute</code> 标记的参数。</li><li>java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</li><li>实体类。 可以用来接收上传的参数。</li><li>Spring 封装的MultipartFile 。 用来接收上传文件的。</li><li>Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</li></ol><h1 id="一个参数传多个值"><a href="#一个参数传多个值" class="headerlink" title="一个参数传多个值"></a>一个参数传多个值</h1><p>在浏览器输入此URL<code>http://localhost:8080/admin/login.action?username=geek&amp;password=geek&amp;password=geek</code></p><p>结果得到的对象为 ： <code>Manager{username=&#39;geek&#39;, password=&#39;geek,geek&#39;}</code></p><p><strong>参考文档</strong>:</p><ol><li><a href="http://blog.csdn.net/walkerjong/article/details/7946109" target="_blank" rel="noopener">@RequestParam @RequestBody @PathVariable 等参数绑定注解详解</a></li><li><a href="https://segmentfault.com/a/1190000005670764#articleHeader8" target="_blank" rel="noopener">SpringMVC之Controller常用注解功能全解析</a></li><li><a href="http://wangwengcn.iteye.com/blog/1677024" target="_blank" rel="noopener">@ModelAttribute使用详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis和Memcached区别</title>
      <link href="/Redis-and-Memcached-difference/"/>
      <url>/Redis-and-Memcached-difference/</url>
      
        <content type="html"><![CDATA[<p>本文参考 <a href="http://blog.51cto.com/gnucto/998509" target="_blank" rel="noopener">Redis与Memcached的区别</a>。</p><p>如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</p><ol><li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li></ol><p>抛开这些，可以深入到Redis内部构造去观察更加本质的区别，理解Redis的设计。</p><a id="more"></a><h1 id="网络IO模型"><a href="#网络IO模型" class="headerlink" title="网络IO模型"></a>网络IO模型</h1><h2 id="Memcached网络IO模型"><a href="#Memcached网络IO模型" class="headerlink" title="Memcached网络IO模型"></a>Memcached网络IO模型</h2><p>Memcached是 <strong>多线程非阻塞IO复用</strong> 的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe传递给worker线程，进行读写IO, 网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，比如，Memcached最常用的stats 命令，实际Memcached所有操作都要对这个全局变量加锁，进行计数等工作，带来了性能损耗。</p><p><img src="https://images.morethink.cn/0dcb499bd022cea2069865875decc2b7.png" alt="" title="Memcached网络IO模型"></p><h2 id="Redis网络IO模型"><a href="#Redis网络IO模型" class="headerlink" title="Redis网络IO模型"></a>Redis网络IO模型</h2><p>Redis使用 <strong>单线程非阻塞IO复用</strong> 模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll、kqueue和select，对于单纯只有IO操作来说，单线程可以将速度优势发挥到最大，但是 <strong>Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的</strong>。</p><h1 id="内存管理方面"><a href="#内存管理方面" class="headerlink" title="内存管理方面"></a>内存管理方面</h1><ul><li>Memcached使用预分配的内存池的方式，使用slab和大小不同的chunk来管理内存，Item根据大小选择合适的chunk存储，内存池的方式可以省去申请/释放内存的开销，并且能减小内存碎片产生，但这种方式也会带来一定程度上的空间浪费，并且在内存仍然有很大空间时，新的数据也可能会被剔除，原因可以参考Timyang的文章： <a href="http://timyang.net/data/Memcached-lru-evictions/" target="_blank" rel="noopener">http://timyang.net/data/Memcached-lru-evictions/</a></li><li>Redis使用现场申请内存的方式来存储数据，并且很少使用free-list等方式来优化内存分配，会在一定程度上存在内存碎片，Redis跟据存储命令参数，会把带过期时间的数据单独存放在一起，并把它们称为临时数据，非临时数据是永远不会被剔除的，即便物理内存不够，导致swap也不会剔除任何非临时数据(但会尝试剔除部分临时数据)，这点上 <strong>Redis更适合作为存储而不是cache</strong>。</li></ul><h1 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h1><ul><li>Memcached提供了cas命令，可以保证多个并发访问操作同一份数据的一致性问题。</li><li>Redis没有提供cas命令，并不能保证这点，不过Redis提供了事务的功能，可以保证一串命令的原子性，中间不会被任何操作打断。</li></ul><h1 id="集群管理的不同"><a href="#集群管理的不同" class="headerlink" title="集群管理的不同"></a>集群管理的不同</h1><p>Memcached是全内存的数据缓冲系统，Redis虽然支持数据的持久化，但是全内存毕竟才是其高性能的本质。作为基于内存的存储系统来说，机器物理内存的大小就是系统能够容纳的最大数据量。如果需要处理的数据量超过了单台机器的物理内存大小，就需要构建分布式集群来扩展存储能力。</p><h2 id="分布式Memcached"><a href="#分布式Memcached" class="headerlink" title="分布式Memcached"></a>分布式Memcached</h2><p><strong>Memcached本身并不支持分布式</strong>，因此只能在客户端通过像一致性哈希这样的分布式算法来实现Memcached的分布式存储。下图给出了Memcached的分布式存储实现架构。当客户端向Memcached集群发送数据之前，首先会通过内置的分布式算法计算出该条数据的目标节点，然后数据会直接发送到该节点上存储。但客户端查询数据时，同样要计算出查询数据所在的节点，然后直接向该节点发送查询请求以获取数据。</p><p><img src="https://images.morethink.cn/b4dc233573a34d272d52a270ff01d3f8.png" alt="" title="分布式Memcached"></p><h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><p>相较于Memcached只能采用客户端实现分布式存储，Redis更偏向于在服务器端构建分布式存储。最新版本的Redis已经支持了分布式存储功能。Redis Cluster是一个实现了分布式且允许单点故障的Redis高级版本，它没有中心节点，具有线性可伸缩的功能。下图给出Redis Cluster的分布式存储架构，其中节点与节点之间通过二进制协议进行通信，节点与客户端之间通过ascii协议进行通信。在数据的放置策略上，Redis Cluster将整个key的数值域分成4096个哈希槽，每个节点上可以存储一个或多个哈希槽，也就是说当前Redis Cluster支持的最大节点数就是4096。Redis Cluster使用的分布式算法也很简单：<code>crc16( key ) %HASH_SLOTS_NUMBER</code>。</p><p><img src="https://images.morethink.cn/ecb156696a22333a19ea5647b7eaefcc.png" alt="" title="Redis-Cluster"></p><p>为了保证单点故障下的数据可用性，Redis Cluster引入了Master节点和Slave节点。在Redis Cluster中，每个Master节点都会有对应的两个用于冗余的Slave节点。这样在整个集群中，任意两个节点的宕机都不会导致数据的不可用。当Master节点退出后，集群会自动选择一个Slave节点成为新的Master节点。</p><p><img src="https://images.morethink.cn/c7b06587ee2b47925a540cc1c10ca44f.png" alt="" title="Redis-Cluster-2"></p><h1 id="存储方式及其它方面"><a href="#存储方式及其它方面" class="headerlink" title="存储方式及其它方面"></a>存储方式及其它方面</h1><ul><li>Memcached基本只支持简单的key-value存储，不支持枚举，不支持持久化和复制等功能</li><li>Redis除key/value之外，还支持list,set,sorted set,hash等众多数据结构，提供了KEYS进行枚举操作，但不能在线上使用，如果需要枚举线上数据，Redis提供了工具可以直接扫描其dump文件，枚举出所有数据，Redis还同时提供了持久化和复制等功能。</li></ul><p><strong>根据以上比较不难看出，当我们不希望数据被踢出，或者需要除key/value之外的更多数据类型时，或者需要落地功能时，使用Redis比使用Memcached更合适</strong>。</p><h1 id="单线程的Redis为什么这么高效"><a href="#单线程的Redis为什么这么高效" class="headerlink" title="单线程的Redis为什么这么高效"></a>单线程的Redis为什么这么高效</h1><h2 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h2><p>Redis客户端对服务端的每次调用都经历了发送命令，执行命令，返回结果三个过程。其中执行命令阶段，由于Redis是单线程来处理命令的，所有每一条到达服务端的命令不会立刻执行，所有的命令都会进入一个队列中，然后逐个被执行。并且多个客户端发送的命令的执行顺序是不确定的。但是可以确定的是不会有两条命令被同时执行，不会产生并发问题，这就是Redis的单线程基本模型。</p><h2 id="单线程模型每秒万级别处理能力的原因"><a href="#单线程模型每秒万级别处理能力的原因" class="headerlink" title="单线程模型每秒万级别处理能力的原因"></a>单线程模型每秒万级别处理能力的原因</h2><ol><li>纯内存访问。数据存放在内存中，内存的响应时间大约是100纳秒，这是Redis每秒万亿级别访问的重要基础。</li><li>非阻塞I/O，Redis采用epoll做为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接，读写，关闭都转换为了时间，不在I/O上浪费过多的时间。</li><li>单线程避免了线程切换和竞态产生的消耗。</li><li>Redis采用单线程模型，每条命令执行如果占用大量时间，会造成其他线程阻塞，对于Redis这种高性能服务是致命的，所以Redis是面向高速执行的数据库。</li></ol><p><strong>总结</strong>：<br>　　1. Redis使用最佳方式是全部数据in-memory。<br>　　2. Redis更多场景是作为Memcached的替代者来使用。<br>　　3. 当需要除key/value之外的更多数据类型支持时，使用Redis更合适。<br>　　4. 当存储的数据不能被剔除时，使用Redis更合适。<br>　　5. 需要分布式部署时，使用Redis更合适。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://blog.51cto.com/gnucto/998509" target="_blank" rel="noopener">Redis与Memcached的区别</a></li><li><a href="https://www.biaodianfu.com/redis-vs-memcached.html?spm=5176.100239.blogcont238409.17.w1SLGA" target="_blank" rel="noopener">Redis和Memcached的区别</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用编程工具快捷键整理</title>
      <link href="/Common-programming-tools-shortcut-keys/"/>
      <url>/Common-programming-tools-shortcut-keys/</url>
      
        <content type="html"><![CDATA[<p>本文主要整理常用编程工具的快捷键。</p><a id="more"></a><h1 id="Navicat-for-mysql-快捷键"><a href="#Navicat-for-mysql-快捷键" class="headerlink" title="Navicat for mysql 快捷键"></a>Navicat for mysql 快捷键</h1><ol><li>Ctrl+Q           打开查询窗口</li><li>Ctrl+/            注释sql语句</li><li>Ctrl+Shift +/  解除注释</li><li>Ctrl+R           运行查询窗口的sql语句</li><li>Ctrl+Shift+R   只运行选中的sql语句</li><li>F6               打开一个mysql命令行窗口</li><li>Ctrl+L            删除一行</li><li>Ctrl+N           打开一个新的查询窗口</li><li>Ctrl+W          关闭一个查询窗口</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC数据验证(AOP处理Errors和方法验证)</title>
      <link href="/SpringMVC-Bean-Validation/"/>
      <url>/SpringMVC-Bean-Validation/</url>
      
        <content type="html"><![CDATA[<p>什么是JSR303？</p><p>JSR 303 – Bean Validation 是一个数据验证的规范，2009 年 11 月确定最终方案。<br>Hibernate Validator 是 Bean Validation 的最佳实践。</p><p>为什么使用JSR，松耦合，让业务代码的职责更加清晰。</p><p>松耦合就是职责更加清晰，每个人都有自己的职责，如果你的代码进行改动，我不用改动或者仅仅少量改动就可以发布和部署。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR 303 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hibernate validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC-配置"><a href="#SpringMVC-配置" class="headerlink" title="SpringMVC 配置"></a>SpringMVC 配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"validator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置校验器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 校验器，使用Hibernate校验器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providerClass"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.validator.HibernateValidator"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件， --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationMessageSource"</span> <span class="attr">ref</span>=<span class="string">"messageSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 校验错误信息配置文件，也可以不配置，直接使用注解中的message即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源文件名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:messageSource<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源文件编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncodings"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对资源文件内容缓存时间，单位秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用校验注解"><a href="#常用校验注解" class="headerlink" title="常用校验注解"></a>常用校验注解</h1><table><thead><tr><th>注解</th><th>运行时检查</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>被注解的元素必须为false</td></tr><tr><td>@AssertTrue</td><td>被注解的元素必须为true</td></tr><tr><td>@DecimalMax(value)</td><td>被注解的元素必须为一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(Value)</td><td>被注解的元素必须为一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Digits(integer=, fraction=)</td><td>被注解的元素必须为一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Future</td><td>被注解的元素必须是日期，检查给定的日期是否比现在晚</td></tr><tr><td>@Max(value)</td><td>被注解的元素必须为一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Min(value)</td><td>被注解的元素必须为一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@NotNull</td><td>被注解的元素必须不为null</td></tr><tr><td>@Null</td><td>被注解的元素必须为null</td></tr><tr><td>@Past(java.util.Date/Calendar)</td><td>被注解的元素必须过去的日期，检查标注对象中的值表示的日期比当前早</td></tr><tr><td>@Pattern(regex=, flag=)</td><td>被注解的元素必须符合正则表达式，检查该字符串是否能够在match指定的情况下被regex定义的正则表达式匹配</td></tr><tr><td>@Size(min=, max=)</td><td>被注解的元素必须在制定的范围(数据类型:String, Collection, Map and arrays)</td></tr><tr><td>@Valid</td><td>递归的对关联对象进行校验, 如果关联对象是个集合或者数组, 那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验</td></tr><tr><td>@CreditCardNumber</td><td>对信用卡号进行一个大致的验证</td></tr><tr><td>@Email</td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td>@Length(min=, max=)</td><td>被注解的对象必须是字符串的大小必须在制定的范围内</td></tr><tr><td>@NotBlank</td><td>被注解的对象必须为字符串，不能为空，检查时会将空格忽略</td></tr><tr><td>@NotEmpty</td><td>被注释的对象必须不为空(数据:String,Collection,Map,arrays)</td></tr><tr><td>@Range(min=, max=)</td><td>被注释的元素必须在合适的范围内 (数据：BigDecimal, BigInteger, String, byte, short, int, long and 原始类型的包装类 )</td></tr><tr><td>@URL(protocol=, host=, port=, regexp=, flags=)</td><td>被注解的对象必须是字符串，检查是否是一个有效的URL，如果提供了protocol，host等，则该URL还需满足提供的条件</td></tr><tr><td></td></tr></tbody></table><h1 id="Bean验证"><a href="#Bean验证" class="headerlink" title="Bean验证"></a>Bean验证</h1><p>首先向我们的bean中添加注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"用户名不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"密码不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// getter 和 setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Controller</code>中配置:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@Validated User user, Errors errors)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.messageResult(errors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.SUCCESS_RESULT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要在要校验的bean前面添加<code>@Validated</code>，在需要校验的bean后面添加<code>Errors</code>对象来接收校验出错信息即可，然后根据错误信息进行判断和返回错误信息给前端。</p><p><strong>注意</strong>：<br><code>@Validated</code> 和 <code>Errors errors</code> 是成对出现的，并且形参顺序是固定的（一前一后）。也就是所每一个<code>@Validated</code>后面必须跟一个<code>Errors</code>，需要验证多个bean，后面就跟多个<code>Errors</code>。</p><h1 id="AOP处理Errors"><a href="#AOP处理Errors" class="headerlink" title="AOP处理Errors"></a>AOP处理Errors</h1><p>如果我们通过JSR来验证bean对象，那么在每个需要验证的方法中都需要处理Error对象，很容易想到可以通过AOP的方式来统一处理错误对象，并且组织错误信息，返回给前端。</p><p>通过一个环绕通知对所有的action方法尽心拦截，如果发现有Errors对象存在，就获取所有的错误信息，封装为一个list返回前端。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017/10/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Errors errors = <span class="keyword">null</span>;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != args &amp;&amp; args.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object object : args) &#123;</span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">                    errors = (BindingResult) object;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (errors != <span class="keyword">null</span> &amp;&amp; errors.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; allErrors = errors.getAllErrors();</span><br><span class="line">            List&lt;String&gt; messages = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError error : allErrors) &#123;</span><br><span class="line">                messages.add(error.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.messageResult(messages);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validationAdvice"</span> <span class="attr">class</span>=<span class="string">"studio.jikewang.util.ValidationAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"validation1"</span> <span class="attr">expression</span>=<span class="string">"execution(public * studio.jikewang.action.*.*(..))"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"validationAspect"</span> <span class="attr">ref</span>=<span class="string">"validationAdvice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"validation1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Validated-和-Valid"><a href="#Validated-和-Valid" class="headerlink" title="@Validated 和 @Valid"></a><code>@Validated</code> 和 <code>@Valid</code></h1><ul><li><code>@Valid</code>是使用Hibernate Validation的时候使用。<br>Java的JSR303声明了这类接口，然后hibernate－validator对其进行了实现。</li><li><code>@Validated</code>是只用Spring Validator校验机制使用。</li></ul><h1 id="方法参数验证"><a href="#方法参数验证" class="headerlink" title="方法参数验证"></a>方法参数验证</h1><p>Spring提供了<code>MethodValidationPostProcessor</code>类，用于对方法的校验。</p><p><code>Controller</code>中配置:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@NotEmpty(message = <span class="string">"用户名不为空"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                        @<span class="title">NotEmpty</span><span class="params">(message = <span class="string">"密码不为空"</span>)</span>  String password) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.SUCCESS_RESULT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置(<strong>最好是配置在<code>&lt;mvc:annotation-driven validator=&quot;validator&quot; /&gt;</code>上面，不然会有未知错误</strong>)如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.MethodValidationPostProcessor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在校验遇到非法的参数时会抛出<code>ConstraintViolationException</code>，可以通过<code>getConstraintViolations</code>获得所有没有通过的校验<code>ConstraintViolation</code>集合，可以通过它们来获得对应的消息。</p><p>我们同样使用 <code>@ExceptionHandler</code> 捕捉<code>ConstraintViolationException</code>异常处理全局异常信息。</p><p>然后将所有的错误信息封装好返回给前端。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">       <span class="meta">@ExceptionHandler</span>(ConstraintViolationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">handleConstraintViolationException</span><span class="params">(ConstraintViolationException e)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;?&gt; s : e.getConstraintViolations()) &#123;</span><br><span class="line">            System.out.println(s.getInvalidValue() + <span class="string">": "</span> + s.getMessage());</span><br><span class="line">            list.add(s.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setStatus(<span class="string">"0"</span>);</span><br><span class="line">        result.setMessage(list);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-Validated验证list"><a href="#使用-Validated验证list" class="headerlink" title="使用@Validated验证list"></a>使用<code>@Validated</code>验证list</h1><p>现在我遇到一个新的需求，我需要前端给我传递一个对象数组，于是我使用一个list去接收，但是无法获得验证信息。</p><p>于是将list重新包装一下。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Controller</code>中配置:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@Validated ValidList&lt;User&gt; users, Errors errors)</span> </span>&#123;</span><br><span class="line">        System.out.println(users.getList());</span><br><span class="line">        <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.messageResult(errors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.SUCCESS_RESULT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后为了只返回第一个验证失败的信息(如果不更改，就会将所有的出错信息返回给前端)，更改<code>ValidationAdvice</code>如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">boolean</span> isValidList = <span class="keyword">false</span>;</span><br><span class="line">        Errors errors = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != args &amp;&amp; args.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object object : args) &#123;</span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> ValidList) &#123;</span><br><span class="line">                    isValidList = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">                    errors = (BindingResult) object;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (errors != <span class="keyword">null</span> &amp;&amp; errors.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; allErrors = errors.getAllErrors();</span><br><span class="line">            List&lt;String&gt; messages = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError error : allErrors) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isValidList) &#123;</span><br><span class="line">                    messages.add(error.getDefaultMessage());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    messages.add(error.getDefaultMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.messageResult(messages);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样即可验证<code>list</code>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>AOP的思想是贯穿我们的开发的，使用AOP的思想可以大大提高我们的开发效率，减少重复代码。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.jianshu.com/p/fc6c20af759a" target="_blank" rel="noopener">springmvc参数校验-JSR303(Bean Validation）</a></li><li><a href="http://www.cnblogs.com/beiyan/p/5946345.html" target="_blank" rel="noopener">Java Bean Validation 最佳实践</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>查询在一张表不在另外一张表的记录及效率探究</title>
      <link href="/records-in-a-table-but-not-in-another-table/"/>
      <url>/records-in-a-table-but-not-in-another-table/</url>
      
        <content type="html"><![CDATA[<p>在我做项目的时候遇到一个需求，要将存在于表ta而不存在于表tb中的数据查询出来。</p><p>记录使用的方法和探讨效率。</p><a id="more"></a><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><p>创建表ta，并且使用存储过程插入13000条数据，在我的机器上运行时间: 346.719s。如果觉得插入的速度比较慢,可以直接导入我建好的表，百度云地址 <a href="http://pan.baidu.com/s/1dFtovg1" target="_blank" rel="noopener">http://pan.baidu.com/s/1dFtovg1</a> ，里面已经有数据了，直接导入sql执行即可，这样比用存储过程要快很多。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ta;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ta`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">13000</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ta_insert;</span><br><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ta_insert()</span><br><span class="line"> MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span></span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">SET</span> @i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">SET</span> @<span class="keyword">max</span>=<span class="number">13000</span>;</span><br><span class="line"> WHILE @i&lt;@max DO</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ta`</span> <span class="keyword">VALUES</span> ();</span><br><span class="line"> <span class="keyword">SET</span> @i = @i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ta_insert();</span><br></pre></td></tr></table></figure><p>创建表tb，并且使用存储过程插入10000条数据，在我的机器上运行时间:  224.102s。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">8000</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_insert;</span><br><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> tb_insert()</span><br><span class="line"> MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span></span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">SET</span> @i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">SET</span> @<span class="keyword">max</span>=<span class="number">8000</span>;</span><br><span class="line"> WHILE @i&lt;@max DO</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb`</span> <span class="keyword">VALUES</span> ();</span><br><span class="line"> <span class="keyword">SET</span> @i = @i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> tb_insert();</span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>使用<code>NOT IN</code>，ta表中的每一个id值都要去与tb表中的id匹配，匹配到就停止，也就是说，存在于ta表而不存在于tb表的id值需要与所有tb表中的id值进行匹配。</p><p>执行子查询时，MYSQL需要创建临时表，查询完毕后再删除这些临时表，所以，子查询的速度会受到一定的影响，这里多了一个创建和销毁临时表的过程。</p><p>平均时间为 0.04s。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ta.id <span class="keyword">FROM</span> ta <span class="keyword">WHERE</span> ta.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> tb)</span><br></pre></td></tr></table></figure></p><h1 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h1><p>使用 <code>LEFT JOIN</code>，ta表左连接tb表，而存在于ta表不存在于tb表中的字段为<code>NULL</code>，于是我们可以通过判断<code>WHERE tb.id IS NULL</code>来找到存在于ta表而不存在于tb表的id值。</p><p>平均时间是 0.06s。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ta.id <span class="keyword">FROM</span> ta <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb <span class="keyword">ON</span> ta.id = tb.id <span class="keyword">WHERE</span> tb.id <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></p><h1 id="效率之谜"><a href="#效率之谜" class="headerlink" title="效率之谜"></a>效率之谜</h1><h2 id="版本问题？"><a href="#版本问题？" class="headerlink" title="版本问题？"></a>版本问题？</h2><p>按理来说，连接应该比子查询要快，但是在我进行试验的时候发现却不是这样的，子查询居然还比连接要快。</p><p><img src="https://images.morethink.cn/20ef641be3a9a9aa899e5e373e05eef9.png" alt="" title="疑惑"></p><p>搜索了解到</p><blockquote><p>对于类似NOT IN这样的子查询，也能受益于subquery materialize，将子查询的结果集cache到临时表里，使用hashindex来进行检索；物化的子查询可以看到select_type字段为SUBQUERY，而在MySQL5.5里为DEPENDENT SUBQUERY</p></blockquote><p>可能是版本原因，我用的是mysql5.7，可能做了优化。</p><p>于是使用mysql5.5再次测试。</p><p>发现子查询和左连接的查询时间都在0.12s附近，还是不能说明连接比子查询高效。进一步猜测，我的数据组织格式是否出现了问题，于是使用上面百度云盘连接中的mm_member表和mm_log表(这是 <a href="https://www.cnblogs.com/cdf-opensource-007/p/6540521.html" target="_blank" rel="noopener">mysql（4）—— 表连接查询与where后使用子查询的性能分析。</a> 提供的数据) 。</p><h2 id="猜测验证"><a href="#猜测验证" class="headerlink" title="猜测验证"></a>猜测验证</h2><p><strong>子查询</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> mm_member.id <span class="keyword">FROM</span> mm_member <span class="keyword">WHERE</span> mm_member.id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> mm_log.member_id <span class="keyword">FROM</span> mm_log)</span><br></pre></td></tr></table></figure><p><strong>左连接</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> mm_member.id <span class="keyword">FROM</span> mm_member <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> mm_log.member_id <span class="keyword">FROM</span> mm_log ) <span class="keyword">AS</span> mm</span><br><span class="line"><span class="keyword">ON</span> mm.member_id = mm_member.id <span class="keyword">WHERE</span> mm.member_id <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p><strong>mysql5.7</strong></p><p>子查询为1.1s左右，左连接为1.55s，子查询依然速度较快。</p><p><strong>mysql5.5</strong></p><p>子查询为48s左右，左连接为1.4s，将近34倍的差距，由此印证上面引用的那部分，<strong>mysql5.7确实已经多子查询做了优化，使其达到了逼近左连接的效率</strong>。</p><p><strong>那为什么我自己所建立的表无法体现版本的这种性能差别？</strong></p><p>猜测应该是数据类型的原因，可能int类型的查询效率已经都优化好了。</p><h1 id="网传最高效"><a href="#网传最高效" class="headerlink" title="网传最高效"></a>网传最高效</h1><p>不太清楚其中的原理，并且在我的测试中性能跟连接差不多。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> ta <span class="keyword">WHERE</span> (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">num</span> <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> ta.id = tb.id) = <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>而且网上流传的版本(<a href="http://blog.csdn.net/windren06/article/details/8188136" target="_blank" rel="noopener">(数据库篇) SQL查询~ 存在一个表而不在另一个表中的数据</a>)为</p><p>select <em> from B where (select count(1) as num from A where A.ID = B.ID) = 0<br>应该是<br>select </em> from A where (select count(1) as num from  B where A.ID = B.ID) = 0<br>大表在前，小表在后。</p></blockquote><p><strong>注意</strong>：</p><ol><li>存储过程循环插入比普通方式插入数据慢很多倍。</li><li>索引可以有效提高搜索效率。</li><li>不是所有的子查询都比连接慢的。</li></ol><p><strong>参考文档</strong>：</p><ol><li><a href="http://mysqllover.com/?p=919" target="_blank" rel="noopener">MySQL 5.6的优化器改进</a></li><li><a href="https://www.cnblogs.com/cdf-opensource-007/p/6540521.html" target="_blank" rel="noopener">mysql（4）—— 表连接查询与where后使用子查询的性能分析。</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>get请求中文乱码及get,post编码探究</title>
      <link href="/get-request-Chinese-garbled/"/>
      <url>/get-request-Chinese-garbled/</url>
      
        <content type="html"><![CDATA[<p>在我使用get请求进行查询的时候遇到一个问题：<br>当我的请求参数中有中文时，出现乱码。<br>可是即使我设置了Spring的characterEncodingFilter，也还是出现乱码。<br>原因：tomcat默认使用ISO8859-1编码来解析get中的url参数，导致乱码。而<code>characterEncodingFilter</code>或者<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code>都只针对post请求体有效。<br>下面对Http中get方法编码到tomcat的解码过程进行探究。</p><a id="more"></a><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li>更改tomcat中get方法默认ISO8859-1编码为utf-8编码。<br>找到<code>conf/server.xml</code>,在 <code>&lt;Connector port=&quot;8082&quot; protocol=&quot;HTTP/1.1&quot;</code> 中加入  <code>URIEncoding=&quot;utf-8&quot;</code>。</li><li>将参数以iso8859-1编码转化为字节数组，然后再以UTF-8将字节数组转化为字符串。<code>userName = new String(userName.getBytes(&quot;ISO8859-1&quot;), &quot;UTF-8&quot;);</code></li></ol><h1 id="URL是怎么编码的？"><a href="#URL是怎么编码的？" class="headerlink" title="URL是怎么编码的？"></a>URL是怎么编码的？</h1><p>参考 <a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">关于URL编码</a></p><p>一般来说，URL只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。比如，世界上有英文字母的网址”<a href="http://www.abc.com&quot;，但是没有希腊字母的网址&quot;http://www.aβγ.com&quot;（读作阿尔法-贝塔-伽玛.com）。这是因为网络标准RFC" target="_blank" rel="noopener">http://www.abc.com&quot;，但是没有希腊字母的网址&quot;http://www.aβγ.com&quot;（读作阿尔法-贝塔-伽玛.com）。这是因为网络标准RFC</a> 1738做了硬性规定。</p><p>这意味着，如果URL中有汉字，就必须编码后使用。但是麻烦的是，RFC 1738没有规定具体的编码方法，而是交给应用程序（浏览器）自己决定。这导致”URL编码”成为了一个混乱的领域。</p><p>不同的操作系统、不同的浏览器、不同的网页字符集，将导致完全不同的编码结果。<strong>经过测试，现在的浏览器大部分都是utf-8编码</strong>。但是为了兼容所有的浏览器，可以使用Javascript函数：<code>encodeURI()</code>。</p><p>encodeURI()是Javascript中真正用来对URL编码的函数。<br>它着眼于对整个URL进行编码，因此除了常见的符号以外，对其他一些在网址中有特殊含义的符号”; / ? : @ &amp; = + <code>$</code> , <code>#</code>“，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。<br><img src="https://images.morethink.cn/801695c34db12f3a694ee415a6f5222b.png" alt=""></p><p>它对应的解码函数是decodeURI()。<br><img src="https://images.morethink.cn/52dab00c0410f5f372f9a204522622a5.png" alt=""></p><h1 id="tomcat是怎么解码的？"><a href="#tomcat是怎么解码的？" class="headerlink" title="tomcat是怎么解码的？"></a>tomcat是怎么解码的？</h1><p>get请求是使用url编码方式，而post请求基于请求体自身的编码。</p><p><strong>推荐</strong></p><ul><li>get请求含有url参数时，使用js自带的编码函数进行编码。</li><li>post请求在content-type中设置charset=utf-8，否则使用页面默认编码。</li></ul><h2 id="get方法的编码"><a href="#get方法的编码" class="headerlink" title="get方法的编码"></a>get方法的编码</h2><p>查看tomcat源码中，<code>org.apache.catalina.connector.CoyoteAdapter</code>的方法：<br>使用在conf/server.xml中 <code>&lt;Connector port=&quot;8082&quot; protocol=&quot;HTTP/1.1&quot;&gt;</code>配置的URIEncoding作为将前端传过来的参数转化为字符数组的编码，缺省为ISO8859-1。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convertURI</span><span class="params">(MessageBytes uri, Request request)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ByteChunk bc = uri.getByteChunk();</span><br><span class="line">    <span class="keyword">int</span> length = bc.getLength();</span><br><span class="line">    CharChunk cc = uri.getCharChunk();</span><br><span class="line">    cc.allocate(length, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 使用默认编码 ISO8859-1 将字节数组编程字符</span></span><br><span class="line">    String enc = connector.getURIEncoding();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enc != <span class="keyword">null</span>) &#123;</span><br><span class="line">        B2CConverter conv = request.getURIConverter();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conv == <span class="keyword">null</span>) &#123;</span><br><span class="line">                conv = <span class="keyword">new</span> B2CConverter(enc, <span class="keyword">true</span>);</span><br><span class="line">                request.setURIConverter(conv);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conv.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Invalid URI encoding; using HTTP default"</span>);</span><br><span class="line">            connector.setURIEncoding(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conv.convert(bc, cc, <span class="keyword">true</span>);</span><br><span class="line">                uri.setChars(cc.getBuffer(), cc.getStart(), cc.getLength());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                <span class="comment">// Should never happen as B2CConverter should replace</span></span><br><span class="line">                <span class="comment">// problematic characters</span></span><br><span class="line">                request.getResponse().sendError(</span><br><span class="line">                        HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default encoding: fast conversion for ISO-8859-1</span></span><br><span class="line">    <span class="keyword">byte</span>[] bbuf = bc.getBuffer();</span><br><span class="line">    <span class="keyword">char</span>[] cbuf = cc.getBuffer();</span><br><span class="line">    <span class="keyword">int</span> start = bc.getStart();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        cbuf[i] = (<span class="keyword">char</span>) (bbuf[i + start] &amp; <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    uri.setChars(cbuf, <span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="post方法的字符编码"><a href="#post方法的字符编码" class="headerlink" title="post方法的字符编码"></a>post方法的字符编码</h2><ol><li><p>如果在servlet的doPost方法中或者filter中设置了request的字符编码，那么就以设置的为准。</p><ul><li><p><strong>request设置编码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequestrequest,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException,ServletException</span>&#123;</span><br><span class="line"><span class="comment">//必须在getParameter,getParameterNames,</span></span><br><span class="line"><span class="comment">//getParameterValues方法调用之前进行设置</span></span><br><span class="line">request.setContentType(<span class="string">"UTF-8"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>web.xml中配置filter</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.SetCharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果没有进行上面的配置，那么从http header中取出content-type,然后从content-type的值中取出charset的值，charset的值作为post的字符编码。<br>如 <code>content-type=application/x-www-form-urlencoded;charset=utf-8</code><br>那么，post的字符编码就是utf-8。<br>如果从http header中没有取到content-type中的charset，那么，就使用缺省的ISO-8859-1。</p></li></ol><p><strong>参考文档</strong></p><ol><li><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">关于URL编码</a></li><li><a href="http://blog.csdn.net/u010648555/article/details/50011987" target="_blank" rel="noopener"> get请求中url传参中文乱码问题–集锦</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring使用redis做缓存</title>
      <link href="/spring-redis-cache/"/>
      <url>/spring-redis-cache/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h2><p>在高并发下，为了提高访问的性能，需要将数据库中 <strong>一些经常展现和不会频繁变更的数据</strong>，存放在存取速率更快的内存中。这样可以</p><ol><li>降低数据的获取时间，带来更好的体验</li><li>减轻数据库的压力</li></ol><p>缓存适用于读多写少的场合，查询时缓存命中率很低、写操作很频繁等场景不适宜用缓存。</p><p><strong>MySQL有自己的查询缓存，为什么还要使用 Redis 等缓存应用</strong>？</p><ul><li>当只有一台 MySQL服务器时，可以将缓存放置在本地。这样当有相同的 SQL 查询到达时，可以直接从缓存中取到查询结果，不需要进行 SQL 的解析和执行。MySQL 提供了服务器层面的缓存支持。</li><li>如果有多台 MySQL 服务器，请求会随机分发给多台中的一台，我们无法保证相同的请求会到达同一台服务器，本地缓存命中率较低。所以基于本机的缓存就没有什么意义，此时采用的策略应该是将查询结果缓存在 Redis 或者 Memcache 中。</li></ul><p>而Redis是一个高性能的 key-value 内存数据库，恰恰可以作为缓存使用。<br><a id="more"></a><br>GitHub 地址：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a> 。Github 是这么描述的：<br>Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, HyperLogLogs, Bitmaps.</p><p>但是mysql自己本身有查询缓存，memcached也是一个优秀的内存数据库，为什么一定要选择redis</p><h2 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h2><p>查看<a href="http://coolshell.cn/articles/17416.html" target="_blank" rel="noopener">缓存更新的套路</a>，缓存更新的模式有四种：</p><ul><li>Cache aside</li><li>Read through</li><li>Write through</li><li>Write behind cachin。</li></ul><p>这里我们使用的是 Cache Aside 策略，从三个维度：</p><ol><li>命中：应用程序从cache中取数据，取到后返回。执行图中1,2步</li><li>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。执行图中1,2,3，4,1，2步</li><li>更新：先把数据存到数据库中，成功后，再让缓存失效。执行图中1，2步</li></ol><p><img src="https://images.morethink.cn/6ae279a4bbe330303c483347a583f965.png" alt="" title="redis调用过程"></p><h1 id="spring配置redis缓存"><a href="#spring配置redis缓存" class="headerlink" title="spring配置redis缓存"></a>spring配置redis缓存</h1><p>接下来讲解一下spring的配置。</p><h1 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h1><p>pom.xml中添加</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis cache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h1><p>现在我们使用的是java config 配置，因此需要将本RedisConfig放在可以被<br><code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code><br>扫描的包下。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017/11/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisConnectionFactory redisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        <span class="comment">// Defaults</span></span><br><span class="line">        redisConnectionFactory.setHostName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        redisConnectionFactory.setPort(<span class="number">6379</span>);</span><br><span class="line">        <span class="keyword">return</span> redisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;String, String&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        setSerializer(redisTemplate);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        RedisCacheManager rcm = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">        <span class="comment">// 设置缓存过期时间，秒</span></span><br><span class="line">        rcm.setDefaultExpiration(<span class="number">600</span>);</span><br><span class="line">        <span class="keyword">return</span> rcm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSerializer</span><span class="params">(RedisTemplate&lt;String, String&gt; template)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(<span class="string">":"</span> + method.getName());</span><br><span class="line">                <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                    sb.append(<span class="string">":"</span> + <span class="keyword">null</span> == obj ? <span class="string">"null"</span> : obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不配置重写<code>keyGenerator()</code>方法的话，默认的key生成策略是</p><p>Cacheable.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Expression Language (SpEL) expression for computing the key dynamically.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Default is &#123;<span class="doctag">@code</span> ""&#125;, meaning all method parameters are considered as a key,</span></span><br><span class="line"><span class="comment"> * unless a custom &#123;<span class="doctag">@link</span> #keyGenerator&#125; has been configured.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The SpEL expression evaluates against a dedicated context that provides the</span></span><br><span class="line"><span class="comment"> * following meta-data:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@code</span> #root.method&#125;, &#123;<span class="doctag">@code</span> #root.target&#125;, and &#123;<span class="doctag">@code</span> #root.caches&#125; for</span></span><br><span class="line"><span class="comment"> * references to the &#123;<span class="doctag">@link</span> java.lang.reflect.Method method&#125;, target object, and</span></span><br><span class="line"><span class="comment"> * affected cache(s) respectively.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Shortcuts for the method name (&#123;<span class="doctag">@code</span> #root.methodName&#125;) and target class</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> #root.targetClass&#125;) are also available.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Method arguments can be accessed by index. For instance the second argument</span></span><br><span class="line"><span class="comment"> * can be accessed via &#123;<span class="doctag">@code</span> #root.args[1]&#125;, &#123;<span class="doctag">@code</span> #p1&#125; or &#123;<span class="doctag">@code</span> #a1&#125;. Arguments</span></span><br><span class="line"><span class="comment"> * can also be accessed by name if that information is available.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br></pre></td></tr></table></figure></p><p>也就是把所有的方法参数作为一个key，但是这可能会重复。</p><h1 id="缓存注解"><a href="#缓存注解" class="headerlink" title="缓存注解"></a>缓存注解</h1><ul><li><code>@CacheConfig</code>：主要用于配置该类中会用到的一些共用的缓存配置。在这里<code>@CacheConfig(cacheNames = &quot;companies&quot;)</code>，配置了该数据访问对象中返回的内容将存储于名为companies的缓存对象中，我们也可以不使用该注解，直接通过<code>@Cacheable</code>自己配置缓存集的名字来定义。</li><li><code>@Cacheable</code>： <strong>声明Spring在调用方法之前，首先应该在缓存中查找方法的返回值。如果这个值能够找到，就会返回存储的值，否则的话，这个方法就会被调用，返回值会放在缓存之中</strong>。该注解主要有下面几个参数：<ul><li><code>value</code>、<code>cacheNames</code>：两个等同的参数（cacheNames为Spring4新增，作为value的别名），<strong>用于指定缓存存储的集合名</strong>。由于Spring4中新增了<code>@CacheConfig</code>，因此在Spring3中原本必须有的value属性，也成为非必需项了</li><li><code>key</code>：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = “#p0”)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考官方文档</li><li><code>condition</code>：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = “#p0”, condition = “#p0.length() &lt; 3”)，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。</li><li><code>unless</code>：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。</li><li><code>keyGenerator</code>：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定。需要注意的是：该参数与key是互斥的</li><li><code>cacheManager</code>：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用</li><li><code>cacheResolver</code>：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定。</li></ul></li></ul><p>除了这里用到的两个注解之外，还有下面几个核心注解：</p><ul><li><code>@CachePut</code>： <strong>表明Spring应该将方法的返回值放到缓存中，在方法的调用前并不会检查缓存，方法始终都会被调用</strong>。它的参数与@<code>Cacheable</code>类似，具体功能可参考上面对<code>@Cacheable</code>参数的解析。</li><li><code>@CacheEvict</code>：<strong>配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据</strong>。除了同<code>@Cacheable</code>一样的参数之外，它还有下面两个参数：<ul><li><code>allEntries</code>：非必需，默认为false。当为true时，会移除所有数据</li><li><code>beforeInvocation</code>：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。</li></ul></li></ul><h1 id="缓存与数据库一致性"><a href="#缓存与数据库一致性" class="headerlink" title="缓存与数据库一致性"></a>缓存与数据库一致性</h1><ul><li>数据库处理要求强一致实时性的数据，例如金融数据、交易数据。</li><li>Redis处理不要求强一致实时性的数据，例如网站最热贴排行榜。</li></ul><p>也就是说根据你的业务需求，设置你的过期时间，容许redis有一些不一致。</p><p><strong>注意：</strong></p><ol><li>缓存java对象时必须实现Serilaizable接口，因为Spring会将对象先序列化之后再存入到Redis中。</li><li>缓存方法的 <code>@Cacheable</code> 最好使用方法名，避免不同的方法的 @Cacheable 值一致，然后再配以以上缓存策略。</li><li>在我将这个<code>@Cacheable</code>放置在SSM的dao层和service层时，redis缓存可以正常运行，但是当我将<code>@Cacheable</code>放在action层上时就会有NPE。</li><li><code>@Cacheable</code>没有配置名字，改为<code>@Cacheable(&quot;值&quot;)</code>，否则会出现如下错误。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: No cache could be resolved <span class="keyword">for</span> <span class="string">'Builder[public abstract studio.jikewang.entity.TeacherClass studio.jikewang.dao.TeacherClassDao.getTeacherClass(int)] caches=[] | key='</span><span class="string">' | keyGenerator='</span><span class="string">' | cacheManager='</span><span class="string">' | cacheResolver='</span><span class="string">' | condition='</span><span class="string">' | unless='</span><span class="string">' | sync='</span><span class="keyword">false</span><span class="string">''</span> using resolver <span class="string">'org.springframework.cache.interceptor.SimpleCacheResolver@4f8d471b'</span>. At least one cache should be provided per cache operation.</span><br></pre></td></tr></table></figure></li></ol><p><strong>参考文档：</strong></p><ol><li><a href="http://blog.csdn.net/defonds/article/details/48716161" target="_blank" rel="noopener">Redis 缓存 + Spring 的集成示例</a></li><li><a href="http://www.cnblogs.com/x113773/p/7227114.html" target="_blank" rel="noopener">Spring Boot 使用Redis缓存</a></li><li><a href="http://twei.site/2017/08/20/MySQL%E7%BC%93%E5%AD%98-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98query-cache/" target="_blank" rel="noopener">MySQL缓存–服务器缓存query cache</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单点登录之tomcat中session在两个webapp中实现共享</title>
      <link href="/tomcat-webapps-session-sharing/"/>
      <url>/tomcat-webapps-session-sharing/</url>
      
        <content type="html"><![CDATA[<p>现在遇到一个需求就是要求完成简单的单点登录，通过在一个tomcat实例中放置两个webapps应用ROOT应用和CEO应用来完成在ROOT应用登录后，在CEO可以直接使用，而未在ROOT应用登录时，不可以进去CEO应用。<br>实际上问题就是session如何在两个webapp中实现共享，通过上网搜索发现一个方法<br><a id="more"></a></p><h1 id="方法1ServletContext"><a href="#方法1ServletContext" class="headerlink" title="方法1ServletContext"></a>方法1ServletContext</h1><p>server.xml文件修改如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span><span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span>  </span><br><span class="line">    //WebappA为项目名，crossContext="true"</span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/WebappA"</span>  <span class="attr">debug</span>=<span class="string">"9"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">crossContext</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/WebappB"</span>  <span class="attr">debug</span>=<span class="string">"9"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">crossContext</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>crossContext属性的意思是：如果设置为true，你可以通过ServletContext.getContext() 调用另外一个WEB应用程序，获得ServletContext 然后再调用其getAttribute() 得到你要的对象。<br>Java代码如下：<br>WebappA:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();  </span><br><span class="line">session.setAttribute(<span class="string">"userId"</span>, <span class="string">"test"</span>);  </span><br><span class="line">ServletContext ContextA =session .getServletContext();  </span><br><span class="line">ContextA.setAttribute(<span class="string">"session"</span>, session );</span><br></pre></td></tr></table></figure></p><p>WebappB:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession sessionB = request.getSession();    </span><br><span class="line">ServletContext ContextB = sessionB.getServletContext();    </span><br><span class="line">ServletContext ContextA= ContextB.getContext(<span class="string">"/WebappA"</span>);<span class="comment">// 这里面传递的是 WebappA的虚拟路径  </span></span><br><span class="line">HttpSession sessionA =(HttpSession)ContextA.getAttribute(<span class="string">"session"</span>);  </span><br><span class="line">System.out.println(<span class="string">"userId: "</span>+sessionA.getAttribute(<span class="string">"userId"</span>));</span><br></pre></td></tr></table></figure></p><p>初看这个方法，好像是完成我们的目标，可是在我实际应用时发现一个问题，就是当user1在登录前不可以进入CEO应用，在user1登录后才可以进入CEO应用，但是当user1退出之后，未登录的用户依然可以进入CEO应用。<br>后来仔细看了一下网上提供的方法，它只是在webappA的ServletContext存储了一个session值，然后传递给webAPPB，但是也仅仅只能传递一个session值，如果有两个用户的时候就会出现session覆盖。</p><p>于是探究其他解决方法。</p><h1 id="方法2sessionCookiePath"><a href="#方法2sessionCookiePath" class="headerlink" title="方法2sessionCookiePath"></a>方法2sessionCookiePath</h1><p>在tomcat conf/context.html中有如下配置</p><ul><li><strong>sessionCookieName</strong><br>The name to be used for all session cookies created for this context. If set, this overrides any name set by the web application. If not set, the value specified by the web application, if any, will be used, or the name JSESSIONID if the web application does not explicitly set one.</li><li><strong>sessionCookiePath</strong><br>The path to be used for all session cookies created for this context. If set, this overrides any path set by the web application. If not set, the value specified by the web application will be used, or the context path used if the web application does not explicitly set one. To configure all web application to use an empty path (this can be useful for portlet specification implementations) set this attribute to / in the global CATALINA_BASE/conf/context.xml file.<br>Note: Once one web application using sessionCookiePath=”/“ obtains a session, all subsequent sessions for any other web application in the same host also configured with sessionCookiePath=”/“ will always use the same session ID. This holds even if the session is invalidated and a new one created. This makes session fixation protection more difficult and requires custom, Tomcat specific code to change the session ID shared by the multiple applications.</li></ul><p>也就是说我们可以通过<code>sessionCookiePath</code>属性使得一个tomcat实例下所有的webapps都共享一个session，通过sessionCookieName来指定sessionCookieName名字。</p><p>于是我就在tomcat conf/context.html中配置如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">sessionCookiePath</span>=<span class="string">"/"</span> <span class="attr">sessionCookieName</span>=<span class="string">"SESSIONID"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在进行测试，发现在ROOT应用和CEO应用中确实sessionCookie是一样的。可是当我在ROOT中进行<code>session.setAttribute();</code>时，CEO应用不能从session中取得值，为null，也就是说，对CEO应用而言，ROOT应用在session所储存的值是不可见的。然后在CEO session中进行<code>session.setAttribute();</code>，ROOT应用总同样无法取得CEO存储在session中的数据，猜想可能是不同的webapps并不会共享相同的session内存，每一个webapps维护自己session HashTable，后来了解到 <strong>session管理器是和context容器关联的，也就说每个web应用都会有一个session管理器</strong>，所以CEO应用当然无法从ROOT应用存储的session中取值。</p><h1 id="方法3redis-session-共享"><a href="#方法3redis-session-共享" class="headerlink" title="方法3redis session 共享"></a>方法3redis session 共享</h1><p>以前曾经了解过Nginx+tomcat+redis做负载均衡的内容，知道可以把session数据存储到redis中，然后tomcat再去redis取值。<br>而这次的tomcat中session在两个webapp中实现共享其实也可以通过这个方法进行处理。</p><p>在tomcat conf/context.html中配置如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">sessionCookiePath</span>=<span class="string">"/"</span> <span class="attr">sessionCookieName</span>=<span class="string">"SESSIONID"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">host</span>=<span class="string">"172.22.4.16"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">port</span>=<span class="string">"6379"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">database</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxInactiveInterval</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后即可实现tomcat中session在两个webapp中实现共享。</p><p><strong>jar包和windows redis安装包</strong><br><a href="http://pan.baidu.com/s/1eSITNnc" target="_blank" rel="noopener">http://pan.baidu.com/s/1eSITNnc</a></p><h1 id="session过期策略"><a href="#session过期策略" class="headerlink" title="session过期策略"></a>session过期策略</h1><p><strong>tomcat-session怎么实现的过期策略？</strong><br>首先如果没有使用redis做session缓存，tomcat服务器在启动的时候初始化了一个守护线程,定期6*10秒去检查有没有Session过期.过期则清除。而使用的tomcat-session-redis做缓存，那么session过期之后就由redis进行删除，redis通过惰性删除和定期删除来删除过期的sessionID值。</p><p>当然sessionID还存在于客户端，那么客户端的sessionID清理过程是什么？<br>经过测试是当tomcat删除sessionID值之后，tomcat会重新生成一个sessionID值返回给客户端。<br><img src="https://images.morethink.cn/4b5f8d1d886507e22022f753d970a0e1.png" alt=""></p><p><strong>总结：</strong><br>其实我这个功能就是单点登录，也就是说在A应用登录的情况下可以访问B应用，但是即使设置了<code>sessionCookiePath</code>，session的Attribute并没有共享，于是想到了先把session序列化到redis中，然后取出来判断，这样就可以实现单点登录。核心是session在这两个应用中必须是一样的，通过设置<code>sessionCookiePath</code>。</p><p><strong>注意：</strong></p><ol><li>当你使用自己的对象执行<code>session.setAttribute();</code>时，必须实现<code>Serializable</code>接口，不然无法进行序列化。</li><li><p><code>maxInactiveInterval</code> 不起作用<br>tomcat日志描述：<br>警告: Manager.setMaxInactiveInterval() is deprecated and calls to this method are ignored. Session timeouts should be configured in web.xml or via Context.setSessionTimeout(int timeoutInMinutes).<br>信息: Will expire sessions after 120 seconds(默认是30分钟)<br>只能通过在ROOT下的web.xml或者全局的web.xml(CEO中的session-config无法生效)中配置才可生效。</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置session过期时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>20<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置成功后tomcat日志：<br> 信息: Will expire sessions after 120 seconds</p></li><li><p>在context中配置host为静态ip 172.22.4.16报错如下:<br><img src="https://images.morethink.cn/efe8ce59cb21d0131028c15e278c80f7.png" alt="">，Google发现原来redis和mysql一样都是已经默认绑定了localhost，只允许本机访问，于是更改<code>redis.windows-service.conf</code>如下</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 172.22.4.16</span><br></pre></td></tr></table></figure><p> 之后就可以使用静态ip 172.22.4.16进行访问。</p></li><li>msi应用的安装，修复和卸载都是通过点击msi文件。</li><li><strong>还有一个共享session的方案是spring-session。</strong> spring-session中通过自己生成session并且存储到redis中，还是需要设置<code>sessionCookiePath=&quot;/&quot;</code>(在一个tomcat两个应用需要单点登录的情况)，其他session共享方案(在多个tomcat中实现单点登录可以参考 <a href="http://www.jianshu.com/p/a4f49e73bce6" target="_blank" rel="noopener">spring session无法实现共享（多web应用）</a>)，但是spring-session不是服务器级别的，而是web 应用级别的，不受服务器如tomcat，jetty，jboss的限制。</li></ol><p><strong>参考文档</strong></p><ol><li><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/context.html" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-7.0-doc/config/context.html</a></li><li><a href="https://segmentfault.com/a/1190000009591087" target="_blank" rel="noopener">搭建Tomcat集群&amp;通过Redis缓存共享session的一种流行方案</a></li><li><a href="http://blog.csdn.net/jiangguilong2000/article/details/51969250" target="_blank" rel="noopener">Tomcat的Session过期处理策略</a></li><li><a href="http://www.cnblogs.com/interdrp/p/4935614.html" target="_blank" rel="noopener">Tomcat中session的管理机制</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK8 HashMap 源码解析</title>
      <link href="/HashMap/"/>
      <url>/HashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap中数据结构"><a href="#HashMap中数据结构" class="headerlink" title="HashMap中数据结构"></a>HashMap中数据结构</h1><p>在jdk1.7中，HashMap采用数组+链表(拉链法)。因为数组是一组连续的内存空间，易查询，不易增删，而链表是不连续的内存空间，通过节点相互连接，易删除，不易查询。HashMap结合这两者的优秀之处来提高效率。</p><p>而在jdk1.8时，为了解决当hash碰撞过于频繁，而链表的查询效率(时间复杂度为O(n))过低时，当链表的长度达到一定值(默认是8)时，将链表转换成红黑树(时间复杂度为O(lg n))，极大的提高了查询效率。</p><p>如图所示：<br><img src="https://images.morethink.cn/b3e3671b2edf38a675b5a28587f37ae4.png" alt="" title="JDK8 HashMap"></p><a id="more"></a><h1 id="HashMap初始化"><a href="#HashMap初始化" class="headerlink" title="HashMap初始化"></a>HashMap初始化</h1><p><strong>以下代码未经特别声明，都是jdk1.8</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap的默认大小是16。查看<code>HashMap</code>的构造方法，发现没有执行new操作，猜测可能跟<code>ArrayList</code>一样是在第一次<code>add</code>的时候开辟的内存，于是查看<code>put</code>方法。</p><h1 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h1><h2 id="关于Node节点"><a href="#关于Node节点" class="headerlink" title="关于Node节点"></a>关于Node节点</h2><p>HashMap将hash，key，value，next已经封装到一个静态内部类Node上。它实现了<code>Map.Entry&lt;K,V&gt;</code>接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在定义一个Node数组table</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><h2 id="hash实现"><a href="#hash实现" class="headerlink" title="hash实现"></a>hash实现</h2><p>当我们put的时候，首先计算 <code>key</code>的<code>hash</code>值，这里调用了 <code>hash</code>方法，<code>hash</code>方法实际是让<code>key.hashCode()</code>与<code>key.hashCode()&gt;&gt;&gt;16</code>进行异或操作，高16bit补0，一个数和0异或不变，所以 hash 函数大概的作用就是：<strong>高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞</strong>。按照函数注释，因为bucket数组大小是2的幂，计算下标<code>index = (table.length - 1) &amp; hash</code>，如果不做 hash 处理，相当于散列生效的只有几个低 bit 位，为了减少散列的碰撞，设计者综合考虑了速度、作用、质量之后，使用高16bit和低16bit异或来简单处理减少碰撞，而且JDK8中用了复杂度 O（logn）的树结构来提升碰撞下的性能。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>如果当前数组table为null，进行resize()初始化</li><li>否则计算数组索引<code>i = (n - 1) &amp; hash</code></li><li>如果这个table[i]值为空，那么就将这个Node键值对放在这里</li><li>判断key是否与table[i]重复，重复则替换</li><li>不重复在判断table[i]是否连接了一个链表，链表为空则new 一个Node键值对，链表不为空就循环直到最后一个节点的next为null或者出现出现重复key值</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 默认容量初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//如果table[i]为空，那就把这个键值对放在table[i], i = (n - 1) &amp; hash 相等于 hash % n,</span></span><br><span class="line">    <span class="comment">//但是hash后按位与 n-1，比%模运算取余要快</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//当另一个key的hash值已经存在时</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// table[i].key == key</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">            <span class="comment">//JDK8在哈希碰撞的链表长度达到TREEIFY_THRESHOLD（默认8)后，</span></span><br><span class="line">            <span class="comment">//会把该链表转变成树结构，提高了性能。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//遍历table[i]所对应的链表，直到最后一个节点的next为null或者有重复的key值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//key重复，替换value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h1><p>首先通过<code>hash</code>函数找到索引，然后判断map为null，再判断table[i]是否等于key，然后在找与table相连的链表的key是否相等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jdk1-7中的线程安全问题-resize死循环"><a href="#jdk1-7中的线程安全问题-resize死循环" class="headerlink" title="jdk1.7中的线程安全问题(resize死循环)"></a>jdk1.7中的线程安全问题(resize死循环)</h1><p>当HashMap的size超过Capacity*loadFactor时，需要对HashMap进行扩容。具体方法是，创建一个新的，长度为原来Capacity两倍的数组，保证新的Capacity仍为2的N次方，从而保证上述寻址方式仍适用。同时需要通过如下transfer方法将原来的所有数据全部重新插入（rehash）到新的数组中。</p><p>下列代码基于 jdk1.7.0_79</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">  <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">      Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">      <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">        e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">      e.next = newTable[i];</span><br><span class="line">      newTable[i] = e;</span><br><span class="line">      e = next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法并不保证线程安全，而且在多线程并发调用时，可能出现死循环。其执行过程如下。从步骤2可见，转移时链表顺序反转。</p><ol><li>遍历原数组中的元素</li><li>对链表上的每一个节点遍历：用next取得要转移那个元素的下一个，将e转移到新数组的头部，使用头插法插入节点</li><li>循环2，直到链表节点全部转移</li><li>循环1，直到所有元素全部转移</li></ol><h2 id="单线程rehash"><a href="#单线程rehash" class="headerlink" title="单线程rehash"></a>单线程rehash</h2><p>单线程情况下，rehash无问题。下图演示了单线程条件下的rehash过程<br><img src="https://images.morethink.cn/c05a4a71c5ef3eb97458a16751a1815f.png" alt="" title="单线程rehash"></p><h2 id="多线程并发下的rehash"><a href="#多线程并发下的rehash" class="headerlink" title="多线程并发下的rehash"></a>多线程并发下的rehash</h2><p>这里假设有两个线程同时执行了put操作并引发了rehash，执行了transfer方法，并假设线程一进入transfer方法并执行完next = e.next后，因为线程调度所分配时间片用完而“暂停”，此时线程二完成了transfer方法的执行。此时状态如下。</p><p><img src="https://images.morethink.cn/dc8ccf56884d2e89deba7e7903d6162b.png" alt=""></p><p>接着线程1被唤醒，继续执行第一轮循环的剩余部分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.next = newTable[<span class="number">1</span>] = <span class="keyword">null</span></span><br><span class="line">newTable[<span class="number">1</span>] = e = key(<span class="number">5</span>)</span><br><span class="line">e = next = key(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>结果如下图所示<br><img src="https://images.morethink.cn/5cdb106bc7eb9e827acf573312db6ae5.png" alt=""></p><p>接着执行下一轮循环，结果状态图如下所示</p><p><img src="https://images.morethink.cn/75b2eb45292a2176ef3e8048179b9d6d.png" alt=""><br>此时循环链表形成，并且key(11)无法加入到线程1的新数组。在下一次访问该链表时会出现死循环。</p><h1 id="jdk1-8中的扩容"><a href="#jdk1-8中的扩容" class="headerlink" title="jdk1.8中的扩容"></a>jdk1.8中的扩容</h1><p>在jdk1.8中采用resize方法来对HashMap进行扩容。</p><h2 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 计算新的resize上限</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 清除原来table[i]中的值</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// 带有链表时优化重hash</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原索引，(e.hash &amp; oldCap) == 0 说明 在put操作通过 hash &amp; newThr</span></span><br><span class="line">                        <span class="comment">//计算出的索引值等于现在的索引值。</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap，不是原索引，就移动原来的长度</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明两对指针，维护两个链表，依次在末端添加新的元素，在多线程操作的情况下，无非是第二个线程重复第一个线程一模一样的操作。</p><p><strong>因此不会产生jdk1.7扩容时的resize死循环问题</strong>。</p><p>jdk1.8中hashmap的确不会因为多线程put导致死循环，但是依然有其他的弊端。因此多线程情况下还是建议使用concurrenthashmap。</p><h1 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h1><ol><li><p>如果new HashMap(19)，bucket数组多大？<br>HashMap的bucket 数组大小一定是2的幂，如果new的时候指定了容量且不是2的幂，实际容量会是最接近(大于)指定容量的2的幂，比如 new HashMap&lt;&gt;(19)，比19大且最接近的2的幂是32，实际容量就是32。<br> <strong>基础知识</strong><br> <img src="https://images.morethink.cn/cb763e4543ffb313ba5906deea59bdb8.png" alt="|符号   | 描述 | 运算规则| | ---|---|---| |&amp;      | 与   | 两个位都为1时，结果才为1| |&#124; | 或   | 两个位都为0时，结果才为0| |&and;  | 异或 | 两个位相同为0，相异为1| |~      | 取反 | 0变1，1变0|" title="位运算"><br> <strong>简便方法</strong>：<br> 如对 <code>a</code> 按位取反，则得到的结果为 <code>-(a+1)</code> 。<br> 此条运算方式对正数负数和零都适用。<br> <strong>源码</strong></p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>解析</strong><br> 先来分析有关n位操作部分：先来假设n的二进制为01xxx…xxx。接着<br> 对n右移1位：001xx…xxx，再位或：011xx…xxx<br> 对n右移2为：00011…xxx，再位或：01111…xxx<br> 此时前面已经有四个1了，再右移4位且位或可得8个1<br> 同理，有8个1，右移8位肯定会让后八位也为1。<br> 综上可得，该算法让最高位的1后面的位全变为1。<br> 最后再让结果n+1，即得到了2的整数次幂的值了。<br> 现在回来看看第一条语句：<br> <code>int n = cap - 1;</code><br> 　　让cap-1再赋值给n的目的是另找到的目标值大于或等于原值。例如二进制1000，十进制数值为8。如果不对它减1而直接操作，将得到答案10000，即16。显然不是结果。减1后二进制为111，再进行操作则会得到原来的数值1000，即8。<br> 　　这种方法的效率非常高，可见Java8对容器优化了很多，很强哈。其他之后再进行分析吧。</p></li><li>HashMap什么时候开辟bucket数组占用内存？<br>HashMap在new 后并不会立即分配bucket数组，而是第一次put时初始化，类似ArrayList在第一次add时分配空间。</li><li>HashMap何时扩容？<br>HashMap 在 put 的元素数量大于 Capacity <em> LoadFactor（默认16 </em> 0.75） 之后会进行扩容。</li><li>当两个对象的hashcode相同会发生什么？<br>碰撞</li><li>如果两个键的hashcode相同，你如何获取值对象？<br>遍历与hashCode值相等时相连的链表，直到相等或者null</li><li>你了解重新调整HashMap大小存在什么问题吗？</li></ol><p><strong>参考文档</strong></p><ol><li><a href="http://blog.csdn.net/vking_wang/article/details/14166593" target="_blank" rel="noopener">HashMap实现原理分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/30360734?utm_source=qq&amp;utm_medium=social" target="_blank" rel="noopener">由阿里巴巴Java开发规约HashMap条目引发的故事</a></li><li><a href="http://www.cnblogs.com/loading4/p/6239441.html" target="_blank" rel="noopener">Java8 HashMap之tableSizeFor</a></li><li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="noopener">Java 8系列之重新认识HashMap</a></li><li><a href="http://www.jasongj.com/java/concurrenthashmap/index.html" target="_blank" rel="noopener">Java进阶（六）从ConcurrentHashMap的演进看Java多线程核心技术</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows Apache服务器配置</title>
      <link href="/Windows-apache-Server/"/>
      <url>/Windows-apache-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><p>64位可以而32位不可以</p><h2 id="安装Apache服务"><a href="#安装Apache服务" class="headerlink" title="安装Apache服务"></a>安装Apache服务</h2><p><strong>注意：</strong></p><ul><li>如果没有自己设置Apache服务名，后面都可不跟-n “服务名”，即采用默认的服务名称。</li><li>必须用管理员提示符打开，直接用shift+F10打开命令行是不行的。</li></ul><a id="more"></a><p><strong>命令：</strong></p><ol><li>将apache注册为服务<ul><li>httpd -k install<br>将Apache注册为windows服务，可以指定的服务名为”apache”。</li><li>httpd -k install -n “服务名”　<br>将Apache注册为windows服务，自己指定一个服务名字。</li><li>httpd -k install -n “服务名” -f “conf\my.conf”<br>将Apache注册为windows服务，自己指定一个服务名字，并且使用特定配置文件。</li></ul></li><li>卸载Apache服务<ul><li>httpd.exe -k uninstall -n “服务名”　<br>移除Apache服务，-n 后面跟自己取得Apache服务器名字</li></ul></li><li>启动Apache服务<ul><li>httpd.exe -k start -n “服务名”　</li></ul></li><li>停止Apache服务<ul><li>httpd.exe -k stop -n “服务名”　</li><li>httpd.exe -k shutdown -n “服务名” 　</li></ul></li><li>重启Apache服务<ul><li>httpd.exe -k restart -n “服务名”　</li></ul></li></ol><p>想要正确启动Apache 服务，还需要在httpd.conf中配置<code>Define SRVROOT &quot;E:\Apache24&quot;</code>为本地Apache位置。</p><h2 id="Apache反向代理配置"><a href="#Apache反向代理配置" class="headerlink" title="Apache反向代理配置"></a>Apache反向代理配置</h2><ol><li><p>需要开启apache代理的拓展，将httpd.conf中下列注释取消</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule access_compat_module modules/mod_access_compat.so</span><br><span class="line">LoadModule proxy modules/proxy.so</span><br><span class="line">LoadModule proxy_connect modules/proxy_connect.so</span><br><span class="line">LoadModule proxy_http modules/proxy_http.so</span><br><span class="line">LoadModule proxy_html modules/proxy_html.so</span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Order deny,allow</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">ProxyPass / http://127.0.0.1:8080/</span><br><span class="line">ProxyPassReverse / http://127.0.0.1:8080/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li></ol><p>即可反向代理成功到localhost:8080</p><p><strong>参考文档：</strong></p><ol><li><a href="http://meiling.blog.51cto.com/6220221/1786922" target="_blank" rel="noopener">windows下apache最新下载、安装配置</a></li><li><a href="http://www.cnblogs.com/yerenyuan/p/5460336.html" target="_blank" rel="noopener">Apache服务器的下载与安装</a></li><li><a href="http://www.jianshu.com/p/203185c61838" target="_blank" rel="noopener">Apache24（window）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试中的Java链表</title>
      <link href="/linkedList/"/>
      <url>/linkedList/</url>
      
        <content type="html"><![CDATA[<p>链表作为常考的面试题，并且本身比较灵活，对指针的应用较多。本文对常见的链表面试题Java实现做了整理。</p><p>链表节点定义如下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="1-求单链表中结点的个数"><a href="#1-求单链表中结点的个数" class="headerlink" title="1. 求单链表中结点的个数"></a>1. 求单链表中结点的个数</h1><p>依次遍历链表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        size++;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-将单链表反转"><a href="#2-将单链表反转" class="headerlink" title="2. 将单链表反转"></a>2. 将单链表反转</h1><p>构建一个新的链表，依次将本链表的节点插入到新链表的最前端，即可完成链表的反转。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node p1 = head, p2;</span><br><span class="line">    head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p2 = p1;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//头插法</span></span><br><span class="line">        p2.next = head;</span><br><span class="line">        head = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-查找单链表中的倒数第K个结点（k-gt-0）"><a href="#3-查找单链表中的倒数第K个结点（k-gt-0）" class="headerlink" title="3. 查找单链表中的倒数第K个结点（k &gt; 0）"></a>3. 查找单链表中的倒数第K个结点（k &gt; 0）</h1><p>第一种解法是得到顺数的第 size+k-1 个节点，即为倒数的第K歌节点<br>第二种解法是快慢指针,主要思路就是使用两个指针，先让前面的指针走到正向第k个结点，后面的指针才走，这样前后两个指针的距离差是k-1，之后前后两个指针一起向前走，前面的指针走到最后一个结点时，后面指针所指结点就是倒数第k个结点，下面采用这种解法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getKNode</span><span class="params">(Node head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span> || head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p2 = head, p1 = head;</span><br><span class="line">    <span class="keyword">while</span> (k-- &gt; <span class="number">1</span> &amp;&amp; p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 说明k&gt;size，因此返回null</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">1</span> || p1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-查找单链表的中间结点"><a href="#4-查找单链表的中间结点" class="headerlink" title="4. 查找单链表的中间结点"></a>4. 查找单链表的中间结点</h1><p>采用快慢指针，p1每次走两步，p2每次走一步，奇数返回size/2+1，偶数返回size/2,<br>注意链表为空，链表结点个数为1和2的情况。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getMidNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p1 = head, p2 = head;</span><br><span class="line">    <span class="keyword">while</span> (p1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1.next.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-从尾到头打印单链表"><a href="#5-从尾到头打印单链表" class="headerlink" title="5. 从尾到头打印单链表"></a>5. 从尾到头打印单链表</h1><p>用栈</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(node);</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        System.out.print(stack.pop().num + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrint2</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        reversePrint2(node.next);</span><br><span class="line">        System.out.print(node.num + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-已知两个单链表pHead1和pHead2各自有序，把它们合并成一个链表依然有序"><a href="#6-已知两个单链表pHead1和pHead2各自有序，把它们合并成一个链表依然有序" class="headerlink" title="6. 已知两个单链表pHead1和pHead2各自有序，把它们合并成一个链表依然有序"></a>6. 已知两个单链表pHead1和pHead2各自有序，把它们合并成一个链表依然有序</h1><p>类似于归并排序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">merge</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">    Node p1 = head1, p2 = head2, head;</span><br><span class="line">    <span class="keyword">if</span> (head1.num &lt; head2.num) &#123;</span><br><span class="line">        head = head1;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        head = head2;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node p = head;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.num &lt;= p2.num) &#123;</span><br><span class="line">            p.next = p1;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = p2;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-判断一个单链表中是否有环"><a href="#7-判断一个单链表中是否有环" class="headerlink" title="7. 判断一个单链表中是否有环"></a>7. 判断一个单链表中是否有环</h1><p>这里也是用到两个指针。如果一个链表中有环，也就是说用一个指针去遍历，是永远走不到头的。因此，我们可以用两个指针去遍历，一个指针一次走两步，一个指针一次走一步，如果有环，两个指针肯定会在环中相遇。时间复杂度为O（n）。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasRing</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node p1 = head, p2 = head;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; p1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1 = p1.next.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="8-已知一个单链表中存在环，求进入环中的第一个节点"><a href="#8-已知一个单链表中存在环，求进入环中的第一个节点" class="headerlink" title="8. 已知一个单链表中存在环，求进入环中的第一个节点"></a>8. 已知一个单链表中存在环，求进入环中的第一个节点</h1><p><strong>解题思路</strong>：</p><p>由上题可知，按照 p1 每次两步，p2 每次一步的方式走，发现 p2 和 p1 重合，确定了单向链表有环路了。接下来，让 p1 回到链表的头部，重新走，每次步长不是走2了，而是走1，那么当 p1 和 p2 再次相遇的时候，就是环路的入口了。</p><p><strong>为什么？</strong></p><p>假定起点到环入口点的距离为 a，p1 和 p2 的相交点M与环入口点的距离为b，环路的周长为L，当 p1 和 p2 第一次相遇的时候，假定 p2 走了 n 步。那么有：</p><p>p2走的路径： a+b ＝ n；<br>p1走的路径： a+b+k<em>L = 2</em>n； p1 比 p2 多走了k圈环路，总路程是p2的2倍</p><p>根据上述公式可以得到 k*L=a+b=n ，显然，如果从相遇点M开始，p2 再走 n 步的话，还可以再回到相遇点，同时p2从头开始走的话，经过n步，也会达到相遇点M。</p><p>显然在这个步骤当中 p1 和 p2 只有前 a 步走的路径不同，所以当 p1 和 p2 再次重合的时候，必然是在链表的环路入口点上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getFirstRingNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node p1 = head, p2 = head;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; p1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1 = p1.next.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">            p1 = head;</span><br><span class="line">            <span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">                p2 = p2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-判断两个单链表是否相交"><a href="#9-判断两个单链表是否相交" class="headerlink" title="9. 判断两个单链表是否相交"></a>9. 判断两个单链表是否相交</h1><p>如果两个链表相交，那么相交之后的节点应该相同，那么最后那个节点应该也相同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIntersect</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">    Node p1 = head1, p2 = head2;</span><br><span class="line">    <span class="keyword">while</span> (p1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1 == p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-求两个单链表相交的第一个节点"><a href="#10-求两个单链表相交的第一个节点" class="headerlink" title="10. 求两个单链表相交的第一个节点"></a>10. 求两个单链表相交的第一个节点</h1><p>采用对齐的思想。计算两个链表的长度 L1 , L2，分别用两个指针 p1 , p2 指向两个链表的头，<br>然后将较长链表的 p1（假设为 p1）向后移动L2 - L1个节点，然后再同时向后移动p1 , p2，<br>直到 p1 = p2。相遇的点就是相交的第一个节点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">firstIntersectNode</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = size(head1);</span><br><span class="line">    <span class="keyword">int</span> len2 = size(head2);</span><br><span class="line">    Node p1 = head1, p2 = head2;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len2 - len1; i++) &#123;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-给出一单链表头指针-head-和一节点指针-deletedNode，O-1-时间复杂度删除节点deletedNode"><a href="#11-给出一单链表头指针-head-和一节点指针-deletedNode，O-1-时间复杂度删除节点deletedNode" class="headerlink" title="11. 给出一单链表头指针 head 和一节点指针 deletedNode，O(1)时间复杂度删除节点deletedNode"></a>11. 给出一单链表头指针 head 和一节点指针 deletedNode，O(1)时间复杂度删除节点deletedNode</h1><p>将deletedNode下一个节点的值复制给deletedNode节点，然后删除deletedNode节点，但是对于要删除的节点是最后一个节点的时候要做处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">firstIntersectNode</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = size(head1);</span><br><span class="line">    <span class="keyword">int</span> len2 = size(head2);</span><br><span class="line">    Node p1 = head1, p2 = head2;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len2 - len1; i++) &#123;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-链表的冒泡排序"><a href="#12-链表的冒泡排序" class="headerlink" title="12. 链表的冒泡排序"></a>12. 链表的冒泡排序</h1><p>对于数组的冒泡排序是上层for循环控制次数，下次for循环控制距离，对于链表的冒泡排序而言，首先让tail指针为null，一次循环比较完之后，在等于最后一个节点，倒数第二个节点。。。就是通过tail指针控制循环比较的次数和距离。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node tail = <span class="keyword">null</span>;</span><br><span class="line">    Node p1;</span><br><span class="line">    <span class="keyword">while</span> (head != tail) &#123;</span><br><span class="line">        <span class="keyword">for</span> (p1 = head; p1.next != tail; p1 = p1.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1.num &gt; p1.next.num) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = p1.num;</span><br><span class="line">                p1.num = p1.next.num;</span><br><span class="line">                p1.next.num = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    show(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13-单链表的双冒泡排序"><a href="#13-单链表的双冒泡排序" class="headerlink" title="13. 单链表的双冒泡排序"></a>13. 单链表的双冒泡排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doubleBubblesort</span><span class="params">(Node start, Node end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">        Node p1 = start;</span><br><span class="line">        Node p2 = p1.next;</span><br><span class="line">        <span class="keyword">while</span> (p2 != end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p2.num &lt; start.num) &#123;</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">                <span class="keyword">int</span> temp = p1.num;</span><br><span class="line">                p1.num = p2.num;</span><br><span class="line">                p2.num = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = p1.num;</span><br><span class="line">        p1.num = start.num;</span><br><span class="line">        start.num = temp;</span><br><span class="line">        doubleBubblesort(start, p1);</span><br><span class="line">        doubleBubblesort(p1.next, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部代码放在 <a href="https://github.com/morethink/algorithm/blob/master/src/main/java/algorithm/list/LinkedList.java" target="_blank" rel="noopener">https://github.com/morethink/algorithm/blob/master/src/main/java/algorithm/list/LinkedList.java</a></p><p><strong>参考文档</strong></p><ol><li><a href="http://blog.csdn.net/luckyxiaoqiang/article/details/7393134" target="_blank" rel="noopener">轻松搞定面试中的链表题目</a></li><li><a href="http://wuchong.me/blog/2014/03/25/interview-link-questions/" target="_blank" rel="noopener">面试精选：链表问题集锦</a></li><li><a href="http://blog.csdn.net/qq_26768741/article/details/51635987" target="_blank" rel="noopener">链表面试题总结（一）</a></li><li><a href="http://www.lai18.com/content/1318246.html" target="_blank" rel="noopener">合并两个有序链表递归和迭代两种写法以及扩展问题：合并k个有序链表 java实现（leetcode21和23题）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>递归与变态跳台阶</title>
      <link href="/abnormal-jump-step/"/>
      <url>/abnormal-jump-step/</url>
      
        <content type="html"><![CDATA[<p><strong>数学是算法的皇后，不懂数学，难学算法啊。</strong></p><h3 id="剑指offer第11题Java实现"><a href="#剑指offer第11题Java实现" class="headerlink" title="剑指offer第11题Java实现"></a>剑指offer第11题Java实现</h3><p>题目：<br>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017/8/13.</span></span><br><span class="line"><span class="comment"> *          &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *          &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *          一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。</span></span><br><span class="line"><span class="comment">            求该青蛙跳上一个n级的台阶总共有多少种跳法。</span></span><br><span class="line"><span class="comment"> *          &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *          思路:</span></span><br><span class="line"><span class="comment"> *          因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级</span></span><br><span class="line"><span class="comment"> *          跳1级，剩下n-1级，则剩下跳法是f(n-1)</span></span><br><span class="line"><span class="comment"> *          跳2级，剩下n-2级，则剩下跳法是f(n-2)</span></span><br><span class="line"><span class="comment"> *          所以f(n)=f(n-1)+f(n-2)+...+f(1)</span></span><br><span class="line"><span class="comment"> *          因为f(n-1)=f(n-2)+f(n-3)+...+f(1)</span></span><br><span class="line"><span class="comment"> *          所以f(n)=f(n-1)+f(n-1)=2*f(n-1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test11 test11 = <span class="keyword">new</span> Test11();</span><br><span class="line">        System.out.println(test11.JumpFloorII(<span class="number">10</span>));</span><br><span class="line">        System.out.println(test11.JumpFloorII2(<span class="number">10</span>));</span><br><span class="line">        System.out.println(test11.JumpFloorII3(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII2</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * JumpFloorII2(target - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII3</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target; i++) &#123;</span><br><span class="line">            f *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此种思路充分说明了数学是算法的皇后</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 每个台阶都有跳与不跳两种情况(第n阶台阶必须跳),所以总共有 2 ^ (n - 1)种跳法，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Math类的方法</span></span><br><span class="line"><span class="comment">//        return (int) Math.pow(2, target - 1);</span></span><br><span class="line">        <span class="comment">//2^(n-1)可以用位移操作进行，更快</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; --target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h3><p>左移运算是将一个二进制位的操作数按指定移动的位数向左移位，移出位被丢弃，右边的空位一律补0。右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃，左边移出的空位或者一律补0，或者补符号位，这由不同的机器而定。在使用补码作为机器数的机器中，正数的符号位为0，负数的符号位为1。</p><p><strong><code>&lt;&lt; 左移</code></strong></p><p>需要移位的数字 &lt;&lt; 移位的次数<br>例如：<br>3 &lt;&lt; 2，则是将数字3左移2位</p><ol><li>计算过程：<br>　　首先把3转换为二进制数字0000 0000 0000 0000 0000 0000 0000 0011，然后把该数字高位(左侧)的两个零移出，其他的数字都朝左平移2位，最后在低位(右侧)的两个空位补零。则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 1100，则转换为十进制是12。</li><li>数学意义：<br>　　<strong>在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方。</strong></li></ol><p><strong><code>&gt;&gt; 右移</code></strong><br>运算规则：<br>按二进制形式把所有的数字向右移动对应位移位数，低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1。<br>语法格式：<br>需要移位的数字 &gt;&gt; 移位的次数</p><p>例如11 &gt;&gt; 2，则是将数字11右移2位</p><ol><li>计算过程：<br>11的二进制形式为：0000 0000 0000 0000 0000 0000 0000 1011，然后把低位的最后两个数字移出，因为该数字是正数，所以在高位补零。则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 0010。转换为十进制是2。</li><li>数学意义：<br><strong>右移一位相当于除2，右移n位相当于除以2的n次方。</strong></li></ol><p><strong><code>&gt;&gt;&gt; 无符号右移</code></strong></p><ol><li><p>运算规则：<br>按二进制形式把所有的数字向右移动对应位数，低位移出(舍弃)，高位的空位补零。对于正数来说和带符号右移相同，对于负数来说不同。</p></li><li><p>其他结构和&gt;&gt;相似。<br>有的时候，你希望将一个数的二进制值向右或向左移位。执行左移时，在一个数的二进制形式中，所有位都向左移动由移位运算符右侧的操作数指定的位数。 移位后在右边留下的空位将由零来填充。右移位运算符的原理相似，只是朝相反的方向移位。然而，如果数是负数，那么在左侧填充的值就是1而不是0。两个移位 运算符是&gt;&gt;和&lt;&lt;，它们分别是右移位和左移位运算符。除此之外，还有复合移位和赋值运算符&lt;&lt;=和&gt;&gt;=。</p></li></ol><p><strong>参考文档</strong></p><ol><li><a href="https://baike.baidu.com/item/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener">移位运算符-百度百科</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java迭代实现斐波那契数列</title>
      <link href="/Java%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/Java%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><strong>剑指offer第九题Java实现</strong><br>题目：<br>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test9 test9 = <span class="keyword">new</span> Test9();</span><br><span class="line">        System.out.println(test9.Fibonacci(<span class="number">390000</span>));</span><br><span class="line">        System.out.println(test9.Fibonacci3(<span class="number">39</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为什么不采用递归？因为递归实际是大量调用自身，当数量足够大的时候，需要同时保存成千上百个调用记录，容易发生内存溢出。</span></span><br><span class="line"><span class="comment">     * 怎么优化？</span></span><br><span class="line"><span class="comment">     * 1. 采用尾递归，但是Java并没有基于尾递归进行优化，也就是说Java中采用递归还是无法避免很容易发生"栈溢出"错误（stack overflow）。</span></span><br><span class="line"><span class="comment">     * 因为尾递归都是位于调用函数的最后一行，此时可以删除以前所保存的函数内变量，想当于每次只调用了一个函数。</span></span><br><span class="line"><span class="comment">     * 2. 采用迭代</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f1 = <span class="number">0</span>, f2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f1 = f1 + f2;</span><br><span class="line">            f2 = f1 - f2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面这种写法更为巧妙</span></span><br><span class="line"><span class="comment">//        while (n-- &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//            f1 = f1 + f2;</span></span><br><span class="line"><span class="comment">//            f2 = f1 - f2;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用递归的方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Fibonacci3(n - <span class="number">1</span>) + Fibonacci3(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong></p><ol><li><a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html" target="_blank" rel="noopener">尾调用优化</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java实现二叉树的先序、中序、后序、层序遍历（递归和非递归）</title>
      <link href="/binary-tree/"/>
      <url>/binary-tree/</url>
      
        <content type="html"><![CDATA[<p>二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。对于二叉树，有前序、中序以及后序三种遍历方法。因为树的定义本身就是递归定义，因此采用递归的方法去实现树的三种遍历不仅容易理解而且代码很简洁。而对于树的遍历若采用非递归的方法，就要采用栈去模拟实现。在三种遍历中，前序和中序遍历的非递归算法都很容易实现，非递归后序遍历实现起来相对来说要难一点。</p><a id="more"></a><p>节点分布如下:<br><img src="https://images.morethink.cn/19a9e3541a3de168c5d1a2ac6c509270.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李文浩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017/7/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高度，左右子树中的较大值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftHeight = height(node.left);</span><br><span class="line">        <span class="keyword">int</span> rightHeight = height(node.right);</span><br><span class="line">        <span class="keyword">return</span> leftHeight &gt; rightHeight ? leftHeight + <span class="number">1</span> : rightHeight + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历一颗二叉树，用广度优先搜索的思想，使用一个队列来按照层的顺序存放节点</span></span><br><span class="line"><span class="comment">     * 先将根节点入队列，只要队列不为空，然后出队列，并访问，接着讲访问节点的左右子树依次入队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelTraversal</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(node);</span><br><span class="line">        TreeNode treeNode;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            treeNode = queue.poll();</span><br><span class="line">            System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(treeNode.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(treeNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先序递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">            preOrder(treeNode.left);</span><br><span class="line">            preOrder(treeNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inOrder(treeNode.left);</span><br><span class="line">            System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">            inOrder(treeNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            postOrder(treeNode.left);</span><br><span class="line">            postOrder(treeNode.right);</span><br><span class="line">            System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先序非递归：</span></span><br><span class="line"><span class="comment">     * 这种实现类似于图的深度优先遍历（DFS）。</span></span><br><span class="line"><span class="comment">     * 维护一个栈，将根节点入栈，然后只要栈不为空，出栈并访问，</span></span><br><span class="line"><span class="comment">     * 接着依次将访问节点的右节点、左节点入栈。</span></span><br><span class="line"><span class="comment">     * 这种方式应该是对先序遍历的一种特殊实现（看上去简单明了），</span></span><br><span class="line"><span class="comment">     * 但是不具备很好的扩展性，在中序和后序方式中不适用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderStack</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            TreeNode treeNode = stack.pop();</span><br><span class="line">            System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(treeNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(treeNode.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先序非递归2：</span></span><br><span class="line"><span class="comment">     * 利用栈模拟递归过程实现循环先序遍历二叉树。</span></span><br><span class="line"><span class="comment">     * 这种方式具备扩展性，它模拟递归的过程，将左子树点不断的压入栈，直到null，</span></span><br><span class="line"><span class="comment">     * 然后处理栈顶节点的右子树。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderStack2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode treeNode = root;</span><br><span class="line">        <span class="keyword">while</span> (treeNode != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//将左子树点不断的压入栈</span></span><br><span class="line">            <span class="keyword">while</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//先访问再入栈</span></span><br><span class="line">                System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">                stack.push(treeNode);</span><br><span class="line">                treeNode = treeNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//出栈并处理右子树</span></span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                treeNode = stack.pop();</span><br><span class="line">                treeNode = treeNode.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序非递归：</span></span><br><span class="line"><span class="comment">     * 利用栈模拟递归过程实现循环中序遍历二叉树。</span></span><br><span class="line"><span class="comment">     * 思想和上面的先序非递归2相同，</span></span><br><span class="line"><span class="comment">     * 只是访问的时间是在左子树都处理完直到null的时候出栈并访问。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderStack</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (treeNode != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(treeNode);</span><br><span class="line">                treeNode = treeNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左子树进栈完毕</span></span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                treeNode = stack.pop();</span><br><span class="line">                System.out.print(treeNode.val + <span class="string">" "</span>);</span><br><span class="line">                treeNode = treeNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TagNode</span> </span>&#123;</span><br><span class="line">        TreeNode treeNode;</span><br><span class="line">        <span class="keyword">boolean</span> isFirst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序非递归：</span></span><br><span class="line"><span class="comment">     * 后序遍历不同于先序和中序，它是要先处理完左右子树，</span></span><br><span class="line"><span class="comment">     * 然后再处理根(回溯)。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 对于任一结点P，将其入栈，然后沿其左子树一直往下搜索，直到搜索到没有左孩子的结点，</span></span><br><span class="line"><span class="comment">     * 此时该结点出现在栈顶，但是此时不能将其出栈并访问，因此其右孩子还为被访问。</span></span><br><span class="line"><span class="comment">     * 所以接下来按照相同的规则对其右子树进行相同的处理，当访问完其右孩子时，该结点又出现在栈顶，</span></span><br><span class="line"><span class="comment">     * 此时可以将其出栈并访问。这样就保证了正确的访问顺序。</span></span><br><span class="line"><span class="comment">     * 可以看出，在这个过程中，每个结点都两次出现在栈顶，只有在第二次出现在栈顶时，才能访问它。</span></span><br><span class="line"><span class="comment">     * 因此需要多设置一个变量标识该结点是否是第一次出现在栈顶，这里是在树结构里面加一个标记，然后合成一个新的TagNode。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderStack</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TagNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TagNode tagNode;</span><br><span class="line">        <span class="keyword">while</span> (treeNode != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//沿左子树一直往下搜索，直至出现没有左子树的结点</span></span><br><span class="line">            <span class="keyword">while</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                tagNode = <span class="keyword">new</span> TagNode();</span><br><span class="line">                tagNode.treeNode = treeNode;</span><br><span class="line">                tagNode.isFirst = <span class="keyword">true</span>;</span><br><span class="line">                stack.push(tagNode);</span><br><span class="line">                treeNode = treeNode.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                tagNode = stack.pop();</span><br><span class="line">                <span class="comment">//表示是第一次出现在栈顶</span></span><br><span class="line">                <span class="keyword">if</span> (tagNode.isFirst == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    tagNode.isFirst = <span class="keyword">false</span>;</span><br><span class="line">                    stack.push(tagNode);</span><br><span class="line">                    treeNode = tagNode.treeNode.right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//第二次出现在栈顶</span></span><br><span class="line">                    System.out.print(tagNode.treeNode.val + <span class="string">" "</span>);</span><br><span class="line">                    treeNode = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序非递归2：</span></span><br><span class="line"><span class="comment">     * 要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点P，先将其入栈。如果P不存在左孩子和右孩子，则可以直接访问它；</span></span><br><span class="line"><span class="comment">     * 或者P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了，则同样可以直接访问该结点。</span></span><br><span class="line"><span class="comment">     * 若非上述两种情况，则将P的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素的时候，左孩子在右孩子前面被访问，</span></span><br><span class="line"><span class="comment">     * 左孩子和右孩子都在根结点前面被访问。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderStack2</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode currentTreeNode;</span><br><span class="line">        TreeNode preTreeNode = <span class="keyword">null</span>;</span><br><span class="line">        stack.push(treeNode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            currentTreeNode = stack.peek();</span><br><span class="line">            <span class="comment">//如果当前结点没有孩子结点或者孩子节点都已被访问过</span></span><br><span class="line">            <span class="keyword">if</span> ((currentTreeNode.left == <span class="keyword">null</span> &amp;&amp; currentTreeNode.right == <span class="keyword">null</span>) ||</span><br><span class="line">                    (preTreeNode != <span class="keyword">null</span> &amp;&amp; (preTreeNode == currentTreeNode.left || preTreeNode == currentTreeNode.right))) &#123;</span><br><span class="line">                System.out.print(currentTreeNode.val + <span class="string">" "</span>);</span><br><span class="line">                stack.pop();</span><br><span class="line">                preTreeNode = currentTreeNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentTreeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(currentTreeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentTreeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(currentTreeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong></p><ol><li><a href="http://www.cnblogs.com/dolphin0520/archive/2011/08/25/2153720.html" target="_blank" rel="noopener">二叉树的非递归遍历</a></li><li><a href="http://blog.csdn.net/kerryfish/article/details/24309617" target="_blank" rel="noopener"> JAVA下实现二叉树的先序、中序、后序、层序遍历（递归和循环）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>罔</title>
      <link href="/%E8%AF%BB%E4%B9%A6/wang/"/>
      <url>/%E8%AF%BB%E4%B9%A6/wang/</url>
      
        <content type="html"><![CDATA[<p>尼采说，我爱以血书者。所思所感，皆可成诗，诗者，书真情也。</p><p>诗中有大道，我手写我心。</p><a id="more"></a><p><strong>罔</strong></p><p>惘时伤悲望月明，群星闪闪似笑我。<br>姣姣月光人已变，所思所感无不同。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.morethink.cn/4115ca16f89d5c1d13146cd19e6ad6d5.png" alt=""><br>本文记录一些在Linux系统下比较常用的命令。</p><p>首先介绍下Linux下命令生效的顺序：</p><ol><li>第一顺位：执行绝对路径或者相对路径的命令</li><li>第二顺位：执行别名</li><li>第三顺位：执行Bash的内部命令</li><li>第四顺位：执行按照<code>$PATH</code>环境变量设置定义的目录顺序的第一个命令<a id="more"></a></li></ol><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><p>该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下，它的常用参数如下：</p><ul><li>-a：将文件的特性一起复制  </li><li>-p：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份  </li><li>-i：若目标文件已经存在时，在覆盖时会先询问操作的进行  </li><li>-r：递归持续复制，用于目录的复制行为  </li><li>-u：目标文件与源文件有差异时才会复制  </li></ul><p>例：</p><ul><li><code>cp source dest</code> 复制文件</li><li><code>cp -r sourceFolder targetFolder</code> 递归复制整个文件夹</li></ul><h1 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h1><p>该命令用于移动文件、目录或更名，move之意，它的常用参数如下：</p><ul><li>-f：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  </li><li>-i：若目标文件已经存在，就会询问是否覆盖  </li><li>-u：若目标文件已经存在，且比目标文件新，才会更新  </li></ul><p>注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。</p><p>例：</p><ul><li><code>mv file1 file2 file3 dir</code>  把文件file1、file2、file3移动到目录dir中  </li><li><code>mv file1 file2</code> 把文件file1重命名为file2  </li></ul><h1 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h1><p>该命令用于删除文件或目录，remove之间，它的常用参数如下：</p><ul><li>-f ：就是force的意思，忽略不存在的文件，不会出现警告消息  </li><li>-i ：互动模式，在删除前会询问用户是否操作  </li><li>-r ：<strong>递归删除，最常用于目录删除，它是一个非常危险的参数</strong>  </li></ul><p>例如：</p><ul><li><code>rm -i file</code> 删除文件file，在删除之前会询问是否进行该操作  </li><li><code>rm -fr dir</code>  强制删除目录dir中的所有文件</li></ul><h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><p>tar是linux上常用的打包、压缩、解压缩工具，它的参数很多，这里列举常用的压缩与解压缩参数。</p><p>参数：</p><ul><li><code>-c</code>： <strong>建立压缩档案的参数</strong></li><li><code>-x</code>： <strong>解压缩压缩档案的参数</strong></li><li><code>-z</code>： 用<code>gzip</code>压缩</li><li><code>-j</code>： 用<code>bzip2</code>解压文件</li><li><code>-Z</code>： 用<code>compress</code>解压文件</li><li><code>-v</code>： 压缩的过程中显示档案</li><li><code>-f</code>： 置顶文档名，在<code>-f</code>后面立即接文件名，不能再加参数</li></ul><h2 id="打包与解包"><a href="#打包与解包" class="headerlink" title="打包与解包"></a>打包与解包</h2><ul><li><p>将整个/home/www/images 目录下的文件全部打包</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf images.tar images ← 仅打包，不压缩</span><br></pre></td></tr></table></figure></li><li><p>解包到指定的目录</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf filename.tar -C 指定目录</span><br></pre></td></tr></table></figure></li></ul><h2 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h2><h3 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h3><ul><li><p>打包后，以gzip压缩，在参数f后面的压缩文件名是自己取的，习惯上用tar来做，如果加z参数，则以tar.gz 或tgz来代表gzip压缩过的tar文件</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zcvf images.tar.gz images</span><br></pre></td></tr></table></figure></li><li><p>将 images.tar.gz 解压</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf images.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压缩到指定的目录</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf images.tar.gz -C 指定的目录</span><br></pre></td></tr></table></figure></li></ul><h3 id="bzip2压缩"><a href="#bzip2压缩" class="headerlink" title="bzip2压缩"></a>bzip2压缩</h3><ul><li><p>打包后，以bzip2压缩</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jcvf images.tar.bz2 images</span><br></pre></td></tr></table></figure></li><li><p>将 images.tar.bz2 解压</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jxvf images.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>解压缩到指定的目录</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jxvf images.tar.bz2 -C 指定的目录</span><br></pre></td></tr></table></figure></li></ul><h2 id="不同压缩方式的压缩率比较"><a href="#不同压缩方式的压缩率比较" class="headerlink" title="不同压缩方式的压缩率比较"></a>不同压缩方式的压缩率比较</h2><ul><li><code>tar -zcvf test.tar.gz test</code></li><li><code>tar -jcvf test.tar.bz2 test</code></li><li><code>zip -ry test.zip test</code><br>  zip命令要加上两个选项<ul><li><code>-r</code>：表示递归目录，不然只压出来一个空目录。</li><li><code>-y</code>：表示保持符号链接，而不用把符号链接指向的文件也压进来。</li></ul></li></ul><p>结果比较：<code>ll -h test.*</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 liwenhao staff 45M  8  6 20:12 test.tar.bz2</span><br><span class="line">-rw-r--r-- 1 liwenhao staff 47M  8  6 20:12 test.tar.gz</span><br><span class="line">-rw-r--r-- 1 liwenhao staff 50M  8  6 20:13 test.zip</span><br></pre></td></tr></table></figure></p><p>可以看到：<br>压缩率：bzip2 &gt; gzip &gt; zip</p><h2 id="tar打包绝对路径"><a href="#tar打包绝对路径" class="headerlink" title="tar打包绝对路径"></a>tar打包绝对路径</h2><p>备份mysql时，想把之前的文件压缩，但是用<code>tar czvf /data/backup/test.tar.gz /data/a/b/directory</code></p><p>打开一看，里面的内容是把整个绝对路径都放进去了。</p><p>如果想实现相对路径，这样写就可以解决了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar czvf /data/backup/test.tar.gz /data/a/b/directory</span><br><span class="line">改成</span><br><span class="line">tar czvf /data/backup/test.tar.gz -C /data/a/b directory</span><br></pre></td></tr></table></figure><p>C是临时切换工作目录，-P是绝对路径，在这里只用到-C参数就行了。</p><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下：</p><ul><li>-A ：所有的进程均显示出来  </li><li>-a ：显示 <strong>同一终端下</strong> 的所有程序</li><li>-u ：有效用户的相关进程  </li><li>-x ：一般与a参数一起使用，可列出较完整的信息  </li><li>-l ：较长，较详细地将PID的信息列出  </li><li>-e ：等于<code>&quot;-A&quot;</code></li><li>-f ：显示程序间的关系</li></ul><p>其实我们只要记住ps一般使用的命令参数搭配即可，它们并不多，如下：</p><ul><li><code>ps aux</code> 查看系统所有的进程数据  </li><li><code>ps ax</code>  查看不与terminal有关的所有进程  </li><li><code>ps -lA</code>  查看系统所有的进程数据  </li><li><code>ps axjf</code> 查看连同一部分进程树状态</li></ul><p>查看某个进程：</p><ul><li><code>ps –ef|grep tomcat</code> 查看所有有关tomcat的进程</li><li><code>ps -ef|grep --color java</code> 高亮要查询的关键字</li></ul><h1 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h1><p>该命令用于向某个工作（jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，它的基本语法如下：<br><code>kill -signal PID</code><br>signal的常用参数(最前面的数字为信号的代号，使用时可以用代号代替相应的信号)如下：</p><ul><li>1：SIGHUP，启动被终止的进程  </li><li>2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  </li><li>9：SIGKILL，强制中断一个进程的进行  </li><li>15：SIGTERM，以正常的结束进程方式来终止进程  </li><li>17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行  </li></ul><p>例如：</p><ul><li>以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程<br><code>kill -SIGTERM %1</code> 或者 <code>kill -15 %1</code></li><li>重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进行筛选获得<br><code>kill -SIGHUP PID</code> 或者 <code>kill -1 PID</code></li><li>终止线程号位19979的进程<br><code>kill -9 19979</code></li></ul><h1 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h1><p>该命令用于向一个命令启动的进程发送一个信号，它的一般语法如下：</p><p><code>killall [-iIe] [command name]</code><br>它的参数如下：</p><ul><li>-i ：交互式的意思，若需要删除时，会询问用户  </li><li>-e ：表示后面接的command name要一致，但command name不能超过15个字符  </li><li>-I ：命令名称忽略大小写  </li></ul><p>例如：<br><code>killall -SIGHUP syslogd</code> 重新启动syslogd  </p><h1 id="file"><a href="#file" class="headerlink" title="file"></a>file</h1><p>该命令用于判断接在file命令后的文件的基本数据，因为在Linux下文件的类型并不是以后缀为分的，所以这个命令对我们来说就很有用了，它的用法非常简单，基本语法如下：<br><code>file filename</code><br>例如：<br><code>file ./test</code></p><h1 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h1><p>ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><h2 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h2><p><code>ln [参数][源文件或目录][目标文件或目录]</code></p><h2 id="命令功能："><a href="#命令功能：" class="headerlink" title="命令功能："></a>命令功能：</h2><p>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p><ul><li><p><strong>软链接</strong>：</p><ol><li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>软链接可以 跨文件系统 ，硬链接不可以</li><li>软链接可以对一个不存在的文件名进行链接</li><li>软链接可以对目录进行链接</li></ol></li><li><p><strong>硬链接</strong>:</p><ol><li>硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>不允许给目录创建硬链接</li><li>硬链接只有在同一个文件系统中才能创建</li></ol></li></ul><p>这里有两点要注意：</p><ol><li><p><strong>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化</strong>；</p></li><li><p>ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。<br>ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</p></li><li><p>命令参数：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">必要参数:</span><br><span class="line">-b 删除，覆盖以前建立的链接</span><br><span class="line">-d 允许超级用户制作目录的硬链接</span><br><span class="line">-f 强制执行</span><br><span class="line">-i 交互模式，文件存在则提示用户是否覆盖</span><br><span class="line">-n 把符号链接视为一般目录</span><br><span class="line">-s 软链接(符号链接)</span><br><span class="line">-v 显示详细的处理过程</span><br><span class="line">选择参数:</span><br><span class="line">-S &quot;-S&lt;字尾备份字符串&gt; &quot;或 &quot;--suffix=&lt;字尾备份字符串&gt;”</span><br><span class="line">-V &quot;-V&lt;备份方式&gt;&quot;或&quot;--version-control=&lt;备份方式&gt;&quot;</span><br><span class="line">--help 显示帮助信息</span><br><span class="line">--version 显示版本信息</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>实例1：给文件创建软链接</p><p>命令：</p><p><code>ln -s log2013.log link2013</code></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# ll</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ln -s log2013.log link2013</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ll</span><br><span class="line"></span><br><span class="line">lrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</span><br></pre></td></tr></table></figure><p>说明：</p><p>为log2013.log文件创建软链接link2013，如果log2013.log丢失，link2013将失效</p><p>实例2：给文件创建硬链接</p><p>命令：<br><code>ln log2013.log ln2013</code><br>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# ll</span><br><span class="line"></span><br><span class="line">lrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ln log2013.log ln2013</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ll</span><br><span class="line"></span><br><span class="line">lrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 2 root bin      61 11-13 06:03 ln2013</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 2 root bin      61 11-13 06:03 log2013.log</span><br></pre></td></tr></table></figure><p>说明：</p><p>为log2013.log创建硬链接ln2013，log2013.log与ln2013的各项属性相同</p><h2 id="删除软连接"><a href="#删除软连接" class="headerlink" title="删除软连接"></a>删除软连接</h2><blockquote><p>目录的软连接要谨慎删除，有可能把原文件目录下的文件给删除了。</p></blockquote><ol><li><p>先建立一个软连接</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@rekfan.com test]# ls -il</span><br><span class="line">总计  0</span><br><span class="line">1491138 -rw-r–r– 1 root root 48 07-14 14:17 file1</span><br><span class="line">1491139 -rw-r–r– 2  root root 0 07-14 14:17 file2</span><br><span class="line">1491139 -rw-r–r– 2 root root 0 07-14 14:17  file2hand</span><br><span class="line"><span class="meta">#</span>建立file1和file1soft软连接</span><br><span class="line">[root@rekfan.com test]# ln -s file1  file1soft</span><br><span class="line">[root@rekfan.com test]# ls -il</span><br><span class="line">总计 0</span><br><span class="line">1491138 -rw-r–r– 1 root  root 48 07-14 14:17 file1</span><br><span class="line">1491140 lrwxrwxrwx 1 root root 5 07-14 14:24  file1soft -&gt; file1</span><br><span class="line">1491139 -rw-r–r– 2 root root 0 07-14 14:17  file2</span><br><span class="line">1491139 -rw-r–r– 2 root root 0 07-14 14:17 file2hand</span><br></pre></td></tr></table></figure></li><li><p>删除上面建立的软连接</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@rekfan.com test]# ls -il</span><br><span class="line">总计  0</span><br><span class="line">1491138 -rw-r–r– 1 root root 0 07-14 14:17 file1</span><br><span class="line">1491140 lrwxrwxrwx 1  root root 5 07-14 14:24 file1soft -&gt; file1</span><br><span class="line">1491139 -rw-r–r– 2 root root 0  07-14 14:17 file2</span><br><span class="line">1491139 -rw-r–r– 2 root root 0 07-14 14:17  file2hand</span><br><span class="line"><span class="meta">#</span>删除软连接</span><br><span class="line">[root@rekfan.com test]# rm -rf file1soft</span><br><span class="line">[root@rekfan.com test]#  ls -il</span><br><span class="line">总计 0</span><br><span class="line">1491138 -rw-r–r– 1 root root 0 07-14 14:17 file1</span><br><span class="line">1491139  -rw-r–r– 2 root root 0 07-14 14:17 file2</span><br><span class="line">1491139 -rw-r–r– 2 root root 0 07-14  14:17 file2hand</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>删除软链接 确实是用rm 但是!!!<br>rm -fr xxxx/ 加了个/ 这个是删除文件夹<br>rm -fr xxxx 没有/ 这个是删除软链接</p></blockquote><h1 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h1><p>该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。例如：</p><p><code>cat text | less</code>  查看text文件中的内容<br>注：这条命令也可以使用less text来代替  </p><h1 id="chgrp命令"><a href="#chgrp命令" class="headerlink" title="chgrp命令"></a>chgrp命令</h1><p>该命令用于改变文件所属用户组，它的使用非常简单，它的基本用法如下：</p><p><code>chgrp [选项] [组] [文件]</code></p><ul><li><code>-R</code>：处理指定目录以及其子目录下的所有文件</li><li><code>-v</code>：运行时显示详细的处理信息</li><li><code>--dereference</code>：作用于符号链接的指向，而不是符号链接本身</li><li><code>--no-dereference</code>：作用于符号链接本身</li></ul><p>例如：<br><code>chgrp -vR users ./dir</code> 递归地把dir目录下中的所有文件和子目录下所有文件的用户组修改为users  </p><h1 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h1><p>该命令用于改变文件的所有者，与chgrp命令的使用方法相同，只是修改的文件属性不同。</p><h1 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h1><p>该命令用于改变文件的权限，一般的用法如下：</p><p><code>chmod [-R] xyz 文件或目录</code><br>-R：进行递归的持续更改，即连同子目录下的所有文件都会更改<br>同时，chmod还可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。</p><p>例如：<br><code>chmod 755 file</code>  把file的文件权限改变为-rxwr-xr-x，r表示读、w表示写、x表示可执行。<br><code>chmod g+w file</code> 向file的文件权限中加入用户组可写权限。<br><code>chmod +x file</code> 让文件可执行。</p><p>权限代号：</p><ul><li>r：读权限，用数字4表示</li><li>w：写权限，用数字2表示</li><li>x：执行权限，用数字1表示</li></ul><h1 id="关于搜索的命令"><a href="#关于搜索的命令" class="headerlink" title="关于搜索的命令"></a>关于搜索的命令</h1><h2 id="1-find"><a href="#1-find" class="headerlink" title="1 find"></a>1 find</h2><ol><li>find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。（避免大范围的搜索，会非常浪费系统资源，建议不在直接在”/“目录下搜索）</li><li>格式：find [搜索范围] [搜索条件]</li><li><p>例：</p><ul><li>find /home -name 文件名</li><li>find /home -iname 文件名 (不区分大小写)</li><li>find /home -user 文件名 (所有者文件)</li><li>find /home -nouser 文件名(没有所属者的文件，liunx中，每个文件都有所属者，如果没有，那么一般都是垃圾文件，但还是有特例的，比如内核产生的文件，就没有所属者，一般在proc和sys目录下；还有外来文件，也就是U盘拷入的文件也会忽略所有者。)</li><li>find . -type f -mmin -10 搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。</li><li>find 目录 -size 文件大小 (注意：文件大小用小写k和大写M。)</li></ul></li></ol><p><strong>如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。</strong></p><h2 id="2-locate"><a href="#2-locate" class="headerlink" title="2 locate"></a>2 locate</h2><p>locate命令其实是”find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用<strong>updatedb</strong>命令，手动更新数据库。 locate命令的使用实例：</p><ul><li><code>locate /etc/sh</code>,搜索etc目录下所有以sh开头的文件。</li><li><code>locate ~/m</code>,搜索用户主目录下，所有以m开头的文件。</li><li><code>locate -i ~/m</code>,搜索用户主目录下，所有以m开头的文件，并且忽略大小写。</li></ul><h2 id="3-whereis"><a href="#3-whereis" class="headerlink" title="3 whereis"></a>3 whereis</h2><p>whereis命令只能用于<strong>程序名</strong>的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。 whereis命令的使用实例： <code>whereis grep</code></p><h2 id="4-which"><a href="#4-which" class="headerlink" title="4 which"></a>4 which</h2><p>which命令的作用是，<strong>在PATH变量指定的路径中</strong>，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 which命令的使用实例： <code>which grep</code></p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>搜索文件中的信息，一般为字符串，与正则表达式结合使用 grep [选项] 字符串 文件名 （字符串使用 “” 包围，结果为行记录） -i 忽略大小写 -v 排除指定字符串</p><p><strong>find与grep的区别</strong>：</p><ul><li>find：在 系统 中搜索符合条件的 文件名，使用 通配符（完全）匹配</li><li>grep：在 文件 当中搜索符合条件的 字符串，使用 正则表达式 （包含）匹配</li></ul><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p>time 可以统计命令执行的时间，包括程序的实际运行时间(real time)，以及程序运行在用户态的时间(user time)和内核态的时间(sys time)。<br>例如：<code>time git pull</code> 则是统计更新代码花费多长时间</p><h1 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h1><p>alias命令用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号’’将原来的命令引起来，防止特殊字符导致错误。</p><p>alias命令的作用只局限于该次登入的操作。若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到bash的初始化文件<code>/etc/bashrc</code>中。</p><p>alias 的基本使用方法为：<code>alias 新的命令=&#39;原命令 -选项/参数&#39;</code><br>例如：<code>alias l=‘ls -lsh&#39;</code>将重新定义ls命令，现在只需输入l就可以列目录了。直接输入 alias 命令会列出当前系统中所有已经定义的命令别名。</p><p>要删除一个别名，可以使用 unalias 命令，如 unalias l。</p><p><strong>查看系统已经设置的别名：</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias egrep='egrep --color'</span><br><span class="line">alias fgrep='fgrep --color'</span><br><span class="line">alias grep='grep --color'</span><br><span class="line">alias hpush='bash /Users/liwenhao/Desktop/github/hpush.sh'</span><br><span class="line">alias ll='ls -l'</span><br><span class="line">alias ls='ls -F --show-control-chars --color=auto'</span><br><span class="line">alias vi='vim'</span><br></pre></td></tr></table></figure><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p><code>tail</code> 命令从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，<code>tail -f filename</code>会把filename里最尾部的内容显示在屏幕上，并且不但刷新，使你看到最新的文件内容.</p><ol><li><p>命令格式;</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail[必要参数][选择参数][文件]</span><br></pre></td></tr></table></figure></li><li><p>命令功能：用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p></li><li><p>命令参数：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-f 循环读取</span><br><span class="line">-q 不显示处理信息</span><br><span class="line">-v 显示详细的处理信息</span><br><span class="line">-c &lt;数目&gt; 显示的字节数</span><br><span class="line">-n &lt;行数&gt; 显示行数</span><br><span class="line">--pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.</span><br><span class="line">-q, --quiet, --silent 从不输出给出文件名的首部</span><br><span class="line">-s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</span><br></pre></td></tr></table></figure></li><li><p>举例</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 写到1.log，且后台运行</span><br><span class="line">ping www.baidu.com &gt; 1.log 2&gt;&amp;1 &amp;</span><br><span class="line"># 循环查看尾部日志</span><br><span class="line">tail -f 1.log</span><br><span class="line"># 杀死 ping进程</span><br><span class="line">killall ping</span><br></pre></td></tr></table></figure></li></ol><h1 id="执行多个命令"><a href="#执行多个命令" class="headerlink" title="执行多个命令"></a>执行多个命令</h1><ul><li>后一个命令依赖于前一个命令的输出，可以是用管道(|)<br><code>ls | wc -l</code> :当前目录文件个数</li><li>后一个命令必须等前一个命令运行成功后在运行，可以使用双与号(&amp;&amp;)<br><code>aa &amp;&amp; ls</code> ：只运行aa，ls不运行</li><li>后一个命令必须等前一个命令运行完，不关心是否成功，使用单与号(&amp;)<br><code>aa &amp; ls</code> ：aa和ls都运行，但是ls必须等aa运行完。</li><li>并行执行多个命令，使用两个竖号(||)<br><code>aa || ls</code>：aa和ls并行执行，互不影响。</li></ul><h1 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h1><p>当我们写完一个脚本的时候，它是不可以被直接运行的。我们可以通过：</p><ol><li>通过Bash调用执行脚本 ：<code>bash hello.sh</code></li><li>首先赋予执行权限：<code>chmod 755 hello.sh</code>，然后就可以通过相对路径 <code>./hello.sh</code> 或者通过绝对路径 <code>/root/hello.sh</code>来执行。</li></ol><h2 id="Shell特殊变量：-0-和命令行参数"><a href="#Shell特殊变量：-0-和命令行参数" class="headerlink" title="Shell特殊变量：$0, $#, $*, $@, $?, $$和命令行参数"></a>Shell特殊变量：<code>$0</code>, <code>$#</code>, <code>$*</code>, <code>$@</code>, <code>$?</code>, <code>$$</code>和命令行参数</h2><p>变量名只能包含数字、字母和下划线，因为某些包含其他字符的变量有特殊含义，这样的变量被称为特殊变量。</p><p>例如，<code>$$</code> 表示当前Shell进程的ID，即pid，看下面的代码：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span>echo $$</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">29949</span><br></pre></td></tr></table></figure></p><p><strong>特殊变量列表</strong>：</p><table><thead><tr><th style="text-align:center">变量</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>$0</code></td><td>当前脚本的文件名</td></tr><tr><td style="text-align:center"><code>$n</code></td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。</td></tr><tr><td style="text-align:center"><code>$#</code></td><td>传递给脚本或函数的参数个数。</td></tr><tr><td style="text-align:center"><code>$*</code></td><td>传递给脚本或函数的所有参数。</td></tr><tr><td style="text-align:center"><code>$@</code></td><td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td></tr><tr><td style="text-align:center"><code>$?</code></td><td>上个命令的退出状态，或函数的返回值。</td></tr><tr><td style="text-align:center"><code>$$</code></td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 <code>$n</code> 表示，例如，<code>$1</code> 表示第一个参数，<code>$2</code> 表示第二个参数，依次类推。</p><p>请看下面的脚本：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "File Name: $0"</span><br><span class="line">echo "First Parameter : $1"</span><br><span class="line">echo "First Parameter : $2"</span><br><span class="line">echo "Quoted Values: $@"</span><br><span class="line">echo "Quoted Values: $*"</span><br><span class="line">echo "Total Number of Parameters : $#"</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$./test.sh Zara Ali</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File Name : ./test.sh</span><br><span class="line">First Parameter : Zara</span><br><span class="line">Second Parameter : Ali</span><br><span class="line">Quoted Values: Zara Ali</span><br><span class="line">Quoted Values: Zara Ali</span><br><span class="line">Total Number of Parameters : 2</span><br></pre></td></tr></table></figure><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a><code>$*</code> 和 <code>$@</code> 的区别</h2><p><code>$*</code>和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以<code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code> … <code>&quot;$n&quot;</code> 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，<code>&quot;$*&quot;</code> 会将所有的参数作为一个整体，以”<code>$1</code> <code>$2</code> … <code>$n</code>“的形式输出所有参数；<code>&quot;$@&quot;</code> 会将各个参数分开，以<code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code> … <code>&quot;$n&quot;</code> 的形式输出所有参数。</p><p>下面的例子可以清楚的看到 <code>$*</code> 和 <code>$@</code>的区别：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "\$*=" $*</span><br><span class="line">echo "\"\$*\"=" "$*"</span><br><span class="line">echo "\$@=" $@</span><br><span class="line">echo "\"\$@\"=" "$@"</span><br><span class="line">echo "print each param from \$*"</span><br><span class="line">for var in $*</span><br><span class="line">do</span><br><span class="line">    echo "$var"</span><br><span class="line">done</span><br><span class="line">echo "print each param from \$@"</span><br><span class="line">for var in $@</span><br><span class="line">do</span><br><span class="line">    echo "$var"</span><br><span class="line">done</span><br><span class="line">echo "print each param from \"\$*\""</span><br><span class="line">for var in "$*"</span><br><span class="line">do</span><br><span class="line">    echo "$var"</span><br><span class="line">done</span><br><span class="line">echo "print each param from \"\$@\""</span><br><span class="line">for var in "$@"</span><br><span class="line">do</span><br><span class="line">    echo "$var"</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>执行 ./test.sh “a” “b” “c” “d”，看到下面的结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$*=  a b c d</span><br><span class="line">&quot;$*&quot;= a b c d</span><br><span class="line">$@=  a b c d</span><br><span class="line">&quot;$@&quot;= a b c d</span><br><span class="line">print each param from $*</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">print each param from $@</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">print each param from &quot;$*&quot;</span><br><span class="line">a b c d</span><br><span class="line">print each param from &quot;$@&quot;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure></p><h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h2><p><code>$?</code> 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p><p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p><p>不过，也有一些命令返回其他值，表示不同类型的错误。</p><p>下面例子中，命令<code>$./test.sh Zara Ali</code>成功执行输出：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File Name : ./test.sh</span><br><span class="line">First Parameter : Zara</span><br><span class="line">Second Parameter : Ali</span><br><span class="line">Quoted Values: Zara Ali</span><br><span class="line">Quoted Values: Zara Ali</span><br><span class="line">Total Number of Parameters : 2</span><br><span class="line">$echo $?</span><br><span class="line">0</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><p><strong><code>$?</code> 也可以表示函数的返回值</strong>。</p><h1 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h1><p>下面的第一种方式关机后会失效，相当于临时环境变量，后面两种都是写进了系统配置，因此会永久生效。</p><ol><li>直接用export命令 <code>export PATH=$PATH:/usr/local/src/node-v0.10.24/node_modules/node-sass/bin</code></li><li><p>修改profile文件：</p><ul><li><code>vi /etc/profile</code></li><li>然后在文件里面加入<code>export PATH=$PATH:/usr/local/src/node-v0.10.24/node_modules/node-sass/bin</code></li><li>执行命令 <code>source /etc/profile</code> 生效</li></ul></li><li><p>修改.bashrc文件</p><ul><li><code>vi /root/.bashrc</code></li><li>在里面加入 <code>export PATH=$PATH:/usr/local/src/node-v0.10.24/node_modules/node-sass/bin</code></li><li>执行命令<code>source /root/.bashrc</code> 生效</li></ul></li></ol><p>如果修改了<code>/etc/profile</code>，那么编辑结束后执行<code>source profile</code>(<code>source /etc/profile</code>) 或 执行点命令 <code>. ./profile</code>，PATH的值才会立即生效，不然就只有等下一次开机。</p><p>这个方法的原理就是再执行一次/etc/profile shell脚本，注意如果用sh /etc/profile是不行的，因为sh是在子shell进程中执行的，即使PATH改变了也不会反应到当前环境中，但是source是在当前 shell进程中执行的，所以我们能看到PATH的改变。</p><p>有时我们可能不小心将PATH环境变量设置错误导致命令失效，可以参考下面两种方式解决。</p><ol><li>如果是通过命令行设置的，可以通过重启或者离开本次登录(退出本次shell)</li><li>如果是因为修改配置文件导致无法使用，可以执行<code>export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin</code>命令暂时使用这些目录下的命令，如 <code>vi</code>,<code>ls</code>,<code>cd</code>，从新修改配置文件。</li></ol><h1 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h1><ol><li>光标移动<ul><li><strong>Ctrl + f – 向右移动一个字符，当然多数人用→</strong></li><li><strong>Ctrl + b – 向左移动一个字符， 多数人用←</strong></li><li>ESC + f – 向右移动一个单词，MAC下建议用ALT + →</li><li>ESC + b – 向左移动一个单词，MAC下建议用ALT + ←</li><li><strong>Ctrl + a – 跳到行首</strong></li><li><strong>Ctrl + e – 跳到行尾</strong></li></ul></li><li>删除<ul><li>Ctrl + d – 向右删除一个字符</li><li><strong>Ctrl + h – 向左删除一个字符</strong></li><li><strong>Ctrl + u – 删除当前位置字符至行首（输入密码错误的时候多用下这个）</strong></li><li>Ctrl + k – 删除当前位置字符至行尾</li><li>Ctrl + w – 删除从光标到当前单词开头</li></ul></li><li>命令切换<ul><li><strong>Ctrl + p – 上一个命令，也可以用↑</strong></li><li><strong>Ctrl + n – 下一个命令，也可以用↓</strong></li></ul></li><li>其他快捷键<ul><li>Ctrl + y – 插入最近删除的单词</li><li>Ctrl + c – 终止操作</li><li>Ctrl + d – 当前操作转到后台</li><li><strong>Ctrl + l – 清屏 （有时候为了好看）</strong></li><li>ctrl + z - 把命令放入后台，这个命令谨慎使用</li><li><strong>ctrl + r - 历史命令搜索</strong></li><li>Alt + f - 光标向前（Forward）移动到下一个单词</li><li>Alt + b - 光标往回（Backward）移动到前一个单词</li><li><strong>Ctrl + w - 删除从光标位置前到当前所处单词（Word）的开头</strong></li><li>Alt + d - 删除从光标位置到当前所处单词的末尾</li><li>Ctrl + y - 粘贴最后一次被删除的单词</li></ul></li></ol><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.ruanyifeng.com/blog/2009/10/5_ways_to_search_for_files_using_the_terminal.html" target="_blank" rel="noopener">Linux的五个查找命令</a></li><li><a href="https://blog.csdn.net/ljianhui/article/details/11100625" target="_blank" rel="noopener">初窥Linux 之 我最常用的20条命令</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Windows、Linux及Mac查看端口和杀死进程</title>
      <link href="/Windows-and-Linux-view-the-port-and-kill-the-process/"/>
      <url>/Windows-and-Linux-view-the-port-and-kill-the-process/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何在Windows、Linux及Mac下查看端口和杀死进程。</p><a id="more"></a><h1 id="Windows下查看端口和杀死进程"><a href="#Windows下查看端口和杀死进程" class="headerlink" title="Windows下查看端口和杀死进程"></a>Windows下查看端口和杀死进程</h1><ol><li>查看占用端口号的进程号：<code>netstat –ano | findstr &quot;指定端口号&quot;</code></li><li>通过进程号杀死进程：<code>taskkill /pid 进程号</code><ul><li>通过进程号强制杀死进程：<code>taskkill /f /pid 进程号</code></li></ul></li><li>通过进程号查看进程 <code>tasklist | findstr &quot;进程号&quot;</code></li></ol><h1 id="Linux下查看端口和杀死进程"><a href="#Linux下查看端口和杀死进程" class="headerlink" title="Linux下查看端口和杀死进程"></a>Linux下查看端口和杀死进程</h1><ol><li>Linux下查看端口号所使用的进程号：<code>netstat -anp|grep port</code></li><li><p>杀死进程</p><ul><li><code>kill -9 PID</code></li><li>Linux下还提供了一个killall命令，可以直接使用进程的名字而不是进程标识号，例如： <code>killall -9 name</code></li></ul></li><li><p>通过端口号查看进程号</p><ol><li>查看程序对应进程号：<code>ps -ef | grep 进程名</code></li><li>查看进程号所占用的端口号<ul><li>REDHAT: <code>netstat -nltp|grep pid</code></li><li>ubuntu: <code>netstat -anp|grep pid</code></li></ul></li></ol></li></ol><h1 id="Mac下查看端口和杀死进程"><a href="#Mac下查看端口和杀死进程" class="headerlink" title="Mac下查看端口和杀死进程"></a>Mac下查看端口和杀死进程</h1><p>Mac下使用lsof（list open files）来查看端口占用情况，lsof 是一个列出当前系统打开文件的工具。</p><p>使用 <code>-i</code> 查看某个端口是否被占用，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:3000</span><br></pre></td></tr></table></figure></p><p>如果端口被占用，则会返回相关信息，如果没被占用，则不返回任何信息。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>我读东坡</title>
      <link href="/%E8%AF%BB%E4%B9%A6/%E8%8B%8F%E4%B8%9C%E5%9D%A1%E4%BC%A0/"/>
      <url>/%E8%AF%BB%E4%B9%A6/%E8%8B%8F%E4%B8%9C%E5%9D%A1%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>每当我一提起苏东坡来，大家总会不自觉的微笑，这句话最能概括苏东坡的一切。<br>有诗云：<br>人生所处应何似，应是飞鸿踏雪泥。<br>泥上偶然留指爪，鸿飞哪复计东西。</p><a id="more"></a><p>苏东坡的一生是一个乐观从政到乐观生活的过程，苏东坡以其拒不妥协的气质而为官场所不容，本来有治世之才的苏东坡先因王安石变法而惨遭排挤，后得到太皇太后的赏识而开始肃清变法流毒，不料随着太皇太后的去世，自己也被流放，究其原因，乃是因为皇位的更迭，一位不贤明的皇帝易受小人蒙蔽而不行益民之策。我们不能保证天才的后代仍然是天才，而把王朝的命运寄托于基因实非好事。</p><p>想起《明朝那些事儿》的徐阶，明里退让，暗里积蓄力量，秉持忠义之心，严嵩终倒。<br>正所谓，贪官奸，你要比贪官更奸。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>给大一的学弟</title>
      <link href="/to-16-freshman/"/>
      <url>/to-16-freshman/</url>
      
        <content type="html"><![CDATA[<h1 id="我应该编程吗？"><a href="#我应该编程吗？" class="headerlink" title="我应该编程吗？"></a>我应该编程吗？</h1><ol><li><a href="https://www.zhihu.com/question/35256075" target="_blank" rel="noopener">如何确定自己是否适合做程序员？</a></li><li><a href="https://www.zhihu.com/question/19578287" target="_blank" rel="noopener">如何学习编程？</a></li></ol><p><strong>为什么不尝试一下呢？</strong></p><a id="more"></a><h1 id="学会使用工具"><a href="#学会使用工具" class="headerlink" title="学会使用工具"></a>学会使用工具</h1><p>其实整个互联网就是一个工具，是我们获取信息、交流的工具，而作为”Write the code, Change the world”的程序员，更应该通过工具来提高效率。</p><p><strong>Windows</strong></p><p><a href="http://www.cnblogs.com/wayou/p/shortcuts.html" target="_blank" rel="noopener">没有鼠标的日子多亏了我精湛的手操，各种快捷键分享</a></p><p><strong>Chrome</strong></p><p><a href="http://www.jeffjade.com/2015/10/19/2015-10-18-chrome-vimium/" target="_blank" rel="noopener">Vimium~让您的Chrome起飞</a></p><p><strong>IDEA</strong></p><p>IDEA 是一种编程工具，而编程工具是用来提高编程效率的，因此，怎么有效提高编程效率，才是我们使用工具所要考虑的。</p><ol><li><a href="http://whudoc.qiniudn.com/2016/IntelliJ-IDEA-Tutorial/index.html" target="_blank" rel="noopener">IDEA 中文教程</a></li><li><a href="http://blog.csdn.net/kiwi_coder/article/details/17113759" target="_blank" rel="noopener">IntelliJ下使用Code/Live Template加快编码速度：程序员的工作不是写程序，而是写程序解决问题</a></li></ol><h1 id="程序员素养"><a href="#程序员素养" class="headerlink" title="程序员素养"></a>程序员素养</h1><p>说到底，程序员不过是一种职业，做一个优秀的程序员不仅需要素养，还需要良好的习惯，当然，一切都可以培养。</p><ol><li><a href="http://www.cnblogs.com/morethink/p/6790464.html" target="_blank" rel="noopener">怎么解决问题</a></li><li><a href="http://coolshell.cn/articles/4506.html" target="_blank" rel="noopener">再谈“我是怎么招聘程序员的”（上）</a></li><li><a href="http://www.cnblogs.com/xueweihan/p/5220513.html" target="_blank" rel="noopener">什么是真正的程序员</a></li><li><a href="http://zwchen.iteye.com/blog/1154193" target="_blank" rel="noopener">Java源码阅读的真实体会</a></li><li><a href="http://www.csdn.net/article/2012-10-19/2810967-Why-are-China%27s-programmers-always-calle" target="_blank" rel="noopener">为什么中国的程序员总被称为码农？</a></li></ol><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p><strong>Java 后端技能树</strong><br><img src="https://images.morethink.cn/java-skill-tree.png" alt=""><br><strong>Java 学习过程</strong></p><ol><li><a href="https://www.zhihu.com/question/29581524/answer/44872235" target="_blank" rel="noopener">学习 JAVA，有什么书籍推荐？学习的方法和过程是怎样的？</a></li><li><a href="http://www.hollischuang.com/archives/489" target="_blank" rel="noopener">Java工程师成神之路~</a></li><li><a href="https://www.zhihu.com/question/19945685" target="_blank" rel="noopener">我们如何学好Java？</a></li><li><a href="http://www.imooc.com/course/programdetail/pid/31" target="_blank" rel="noopener">Java工程师</a></li></ol><p><strong>学习平台</strong></p><ol><li>慕课网是一个很好学习平台，里面有很多不错的学习资料，比较系统和全面。<br><img src="https://images.morethink.cn/imooc.jpg" alt=""></li><li><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></li><li><a href="https://www.shiyanlou.com/" target="_blank" rel="noopener">实验楼</a></li></ol><p><strong>Java 博客</strong></p><ol><li><a href="http://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html" target="_blank" rel="noopener">skywang的博客目录(持续更新中…)</a></li><li><a href="http://blog.csdn.net/ns_code/article/details/17539599" target="_blank" rel="noopener">【Java并发编程】并发编程大合集</a></li><li><a href="http://www.hollischuang.com/archives/1003" target="_blank" rel="noopener">《成神之路-基础篇》JVM——Java内存相关(已完结)</a></li><li><a href="http://cmsblogs.com/" target="_blank" rel="noopener">http://cmsblogs.com/</a> 一个Java牛人的博客</li></ol><p><strong>暑假入门书籍</strong><br>《Java 核心技术：卷1 基础知识》</p><h1 id="价值博客们"><a href="#价值博客们" class="headerlink" title="价值博客们"></a>价值博客们</h1><ol><li><a href="http://mindhacks.cn/" target="_blank" rel="noopener">刘未鹏 | Mind Hacks</a> - 里面讲了一些方法论，还可以买他的暗时间来看看</li><li><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰的个人网站</a> - 科技与人文并重，他翻译的黑客与画家可以看看</li><li><a href="http://coolshell.cn/" target="_blank" rel="noopener">High一下! 酷 壳 – COOLSHELL</a> - 一个优秀的程序员，享受编程和技术所带来的快乐</li></ol><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><ol><li><a href="http://www.infoq.com/cn/" target="_blank" rel="noopener">infoq</a></li><li>APP：开发者头条，掘金，segmentfault，CSDN</li></ol><p>最后，任何事情最拍专注且坚持，慢慢来。</p>]]></content>
      
      
      <categories>
          
          <category> 编程思考 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring事务不回滚原因分析</title>
      <link href="/Spring-transaction-no-rollback/"/>
      <url>/Spring-transaction-no-rollback/</url>
      
        <content type="html"><![CDATA[<p>Synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。</p><p>在我完成一个项目的时候，遇到了一个Spring事务不回滚的问题，通过aspectJ和@Transactional注解都无法完成对于事务的回滚，经过查看博客和文档</p><ol><li>默认回滚RuntimeException</li><li>Service内部方法调用</li><li>Spring父子容器覆盖</li></ol><p>代码已经上传到 <a href="https://github.com/morethink/transactional" target="_blank" rel="noopener">https://github.com/morethink/transactional</a></p><a id="more"></a><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>下面是@Transactional的注释文档，下面有个If no rules are relevant to the exception,it will be treated like {@link  org.springframework.transaction.interceptor.DefaultTransactionAttribute} (rolling back on runtime exceptions).<br>默认会使用<code>RuntimeException</code>,那为什么<strong>Spring默认回滚RuntimeException</strong>，因为Java把Exception分为两种。</p><ol><li>checked Exception：Exception类本身，以及Exception的子类中除了”运行时异常”之外的其它子类都属于被检查异常。</li><li>unchecked Exception： RuntimeException和Error都属于未检查异常。</li></ol><p><img src="https://images.morethink.cn/java-exception.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Describes transaction attributes on a method or class.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This annotation type is generally directly comparable to Spring&apos;s</span><br><span class="line"> * &#123;@link org.springframework.transaction.interceptor.RuleBasedTransactionAttribute&#125;</span><br><span class="line"> * class, and in fact &#123;@link AnnotationTransactionAttributeSource&#125; will directly</span><br><span class="line"> * convert the data to the latter class, so that Spring&apos;s transaction support code</span><br><span class="line"> * does not have to know about annotations. If no rules are relevant to the exception,</span><br><span class="line"> * it will be treated like</span><br><span class="line"> * &#123;@link org.springframework.transaction.interceptor.DefaultTransactionAttribute&#125;</span><br><span class="line"> * (rolling back on runtime exceptions).</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;For specific information about the semantics of this annotation&apos;s attributes,</span><br><span class="line"> * consult the &#123;@link org.springframework.transaction.TransactionDefinition&#125; and</span><br><span class="line"> * &#123;@link org.springframework.transaction.interceptor.TransactionAttribute&#125; javadocs.</span><br><span class="line"> *</span><br><span class="line"> * @author Colin Sampaleanu</span><br><span class="line"> * @author Juergen Hoeller</span><br><span class="line"> * @author Sam Brannen</span><br><span class="line"> * @since 1.2</span><br><span class="line"> * @see org.springframework.transaction.interceptor.TransactionAttribute</span><br><span class="line"> * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute</span><br><span class="line"> * @see org.springframework.transaction.interceptor.RuleBasedTransactionAttribute</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>因此，如果发生的不是RuntimeException，而你有没有配置rollback for ，那么，异常就不会回滚。</p><h1 id="service-内部方法调用"><a href="#service-内部方法调用" class="headerlink" title="service 内部方法调用"></a>service 内部方法调用</h1><p><strong>就是一个没有开启事务控制的方法调用一个开启了事务控制方法，不会事务回滚。</strong></p><p><strong>AccountService类</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class AccountService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 完成转钱业务,transfer方法开启事务</span><br><span class="line">     *</span><br><span class="line">     * @param out</span><br><span class="line">     * @param in</span><br><span class="line">     * @param money</span><br><span class="line">     */</span><br><span class="line">    @Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)</span><br><span class="line">    public void transfer(String out, String in, double money) &#123;</span><br><span class="line">        Account account = new Account();</span><br><span class="line">        account.setName(out);</span><br><span class="line">        account.setMoney(money);</span><br><span class="line">        accountDao.out(account);</span><br><span class="line">        int i = 1 / 0;</span><br><span class="line">        account.setName(in);</span><br><span class="line">        accountDao.in(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 完成转钱业务,transferProxy方法没有开启事务</span><br><span class="line">     *</span><br><span class="line">     * @param out</span><br><span class="line">     * @param in</span><br><span class="line">     * @param money</span><br><span class="line">     */</span><br><span class="line">    public void transferProxy(String out, String in, double money) &#123;</span><br><span class="line">        System.out.println(&quot;调用transfer方法 开始&quot;);</span><br><span class="line">        transfer(out, in, money);</span><br><span class="line">        System.out.println(&quot;调用transfer方法 结束&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>AccountAction类</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class AccountAction &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountService accountService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/transfer&quot;)</span><br><span class="line">    public String transfer(String out, String in, double money) &#123;</span><br><span class="line">        accountService.transfer(out, in, money);</span><br><span class="line">        return &quot;transfer&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/transferProxy&quot;)</span><br><span class="line">    public String transferProxy(String out, String in, double money) &#123;</span><br><span class="line">        accountService.transferProxy(out, in, money);</span><br><span class="line">        return &quot;transfer&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>通过transferProxy方法调用transfer方法时</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logging initialized using &apos;class org.apache.ibatis.logging.stdout.StdOutImpl&apos; adapter.</span><br><span class="line">调用transfer方法 开始</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@a0dbf4] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [com.mchange.v2.c3p0.impl.NewProxyConnection@6386ed [wrapping: com.mysql.jdbc.JDBC4Connection@9f2009]] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: update account set money = money - ? where name = ?</span><br><span class="line">==&gt; Parameters: 100.0(Double), aaa(String)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@a0dbf4]</span><br></pre></td></tr></table></figure><p> 发现没有开启事务</p></li><li>直接调用transfer方法时 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logging initialized using &apos;class org.apache.ibatis.logging.stdout.StdOutImpl&apos; adapter.</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@238be2]</span><br><span class="line">JDBC Connection [com.mchange.v2.c3p0.impl.NewProxyConnection@a502e0 [wrapping: com.mysql.jdbc.JDBC4Connection@3dbe42]] will be managed by Spring</span><br><span class="line">==&gt;  Preparing: update account set money = money - ? where name = ?</span><br><span class="line">==&gt; Parameters: 100.0(Double), aaa(String)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@238be2]</span><br><span class="line">Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@238be2]</span><br><span class="line">Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@238be2]</span><br></pre></td></tr></table></figure></li></ol><p>我们都知道Spring事务管理是通过AOP代理实现的，可是那么什么条件会使得AOP代理开启？通过查看<br><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#transaction" target="_blank" rel="noopener">Sprin官方文档</a>，发现只有把整个Service设为事务控制时，才会进行AOP代理。如果我们通过一个没有事务的transferProxy方法去调用有事务的transfer方法，是通过this引用进行调用，没有开启事务，即使发生了RuntimeException也不会回滚。</p><p><img src="https://images.morethink.cn/tx.png" alt=""></p><p>然后</p><h1 id="Spring父子容器覆盖"><a href="#Spring父子容器覆盖" class="headerlink" title="Spring父子容器覆盖"></a>Spring父子容器覆盖</h1><p>Spring容器优先加载由ServletContextListener（对应applicationContext.xml）产生的父容器，而SpringMVC（对应mvc_dispatcher_servlet.xml）产生的是子容器。子容器Controller进行扫描装配时装配的@Service注解的实例是没有经过事务加强处理，即没有事务处理能力的Service，而父容器进行初始化的Service是保证事务的增强处理能力的。如果不在子容器中将Service exclude掉，此时得到的将是原样的无事务处理能力的Service，因为在多上下文的情况下，如果同一个bean被定义两次，后面一个优先。</p><p>当我们在applicationContext.xml,spring-mvc.xml都配置如下扫描包时，spring-mvc.xml中的service就会覆盖applicationContext.xml中的service。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">context:component-scan base-package=&quot;net.morethink&quot;/&gt;</span><br></pre></td></tr></table></figure><p>注意：当我们使用JUnit测试的时候，不会出现这种情况。<br>JUnit配置如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;, &quot;classpath:dispatcher-servlet.xml&quot;&#125;)</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">public class AccountActionTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected MockMvc mockMvc;</span><br><span class="line">    @Autowired</span><br><span class="line">    protected WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    @Before()  //这个方法在每个方法执行之前都会执行一遍</span><br><span class="line">    public void setup() &#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();  //初始化MockMvc对象</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testTransfer() throws Exception &#123;</span><br><span class="line">        String responseString = mockMvc.perform(</span><br><span class="line">                get(&quot;/transfer&quot;)    //请求的url,请求的方法是get</span><br><span class="line">                        .contentType(MediaType.APPLICATION_FORM_URLENCODED)  //数据的格式</span><br><span class="line">                        .param(&quot;out&quot;, &quot;aaa&quot;)</span><br><span class="line">                        .param(&quot;in&quot;, &quot;bbb&quot;)</span><br><span class="line">                        .param(&quot;money&quot;, &quot;100&quot;)</span><br><span class="line">        ).andExpect(status().isOk())    //返回的状态是200</span><br><span class="line">//                .andDo(print())         //打印出请求和相应的内容</span><br><span class="line">                .andReturn().getResponse().getContentAsString();   //将相应的数据转换为字符串</span><br><span class="line">        System.out.println(responseString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testTransferProxy() throws Exception &#123;</span><br><span class="line">        String responseString = mockMvc.perform(</span><br><span class="line">                get(&quot;/transferProxy&quot;)    //请求的url,请求的方法是get</span><br><span class="line">                        .contentType(MediaType.APPLICATION_FORM_URLENCODED)  //数据的格式</span><br><span class="line">                        .param(&quot;out&quot;, &quot;aaa&quot;)</span><br><span class="line">                        .param(&quot;in&quot;, &quot;bbb&quot;)</span><br><span class="line">                        .param(&quot;money&quot;, &quot;100&quot;)</span><br><span class="line">        ).andExpect(status().isOk())    //返回的状态是200</span><br><span class="line">//                .andDo(print())         //打印出请求和相应的内容</span><br><span class="line">                .andReturn().getResponse().getContentAsString();   //将相应的数据转换为字符串</span><br><span class="line">        System.out.println(responseString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>可能因为JUnit不会产生父子容器。</strong></p><p><strong>还有可能是其它配置文件出错，例如，连接池配置为多例</strong></p><p>参考文档</p><ol><li><a href="http://www.jianshu.com/p/f5fc14bde8a0" target="_blank" rel="noopener">Spring声明式事务为何不回滚</a></li><li><a href="http://www.importnew.com/19489.html" target="_blank" rel="noopener">Spring中@Transactional事务回滚（含实例详细讲解，附源码）</a></li><li><a href="http://blog.csdn.net/c289054531/article/details/9187081" target="_blank" rel="noopener">深入研究java.lang.ThreadLocal类</a></li><li><a href="http://blog.csdn.net/c289054531/article/details/9196053" target="_blank" rel="noopener">Spring单实例、多线程安全、事务解析</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>有一种斜落下来的幽光</title>
      <link href="/%E8%AF%BB%E4%B9%A6/There-is-a-light-that-falls-down/"/>
      <url>/%E8%AF%BB%E4%B9%A6/There-is-a-light-that-falls-down/</url>
      
        <content type="html"><![CDATA[<p>By:Emily Dickinson<br>译:余光中</p><p>冬日的下午往往有一种<br>斜落下来的幽光，<br>压迫着我们，那重量如同<br>大教堂中的琴响。<br><a id="more"></a><br>它给我们以神圣的创伤；<br>我们找不到斑痕。<br>只有内心所引起的变化，<br>将它的意义蕴存。</p><p>没人能够使它感悟；<br>它是绝望的烙印，<br>一种无比美妙的痛苦，<br>借大气传给我们。</p><p>当它来时，四野都倾听，<br>阴影全屏住呼吸；<br>当去时，远得像我们<br>遥望死亡的距离。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>怎么使用IDEA</title>
      <link href="/how-to-use-IDEA/"/>
      <url>/how-to-use-IDEA/</url>
      
        <content type="html"><![CDATA[<h1 id="war-和-war-exploded"><a href="#war-和-war-exploded" class="headerlink" title="war 和 war exploded"></a>war 和 war exploded</h1><ol><li>war部署首先通过IDEA生成.war工程文件，然后将WEB工程以包的形式上传到服务器，因此会替代服务器本来同名的web app项目。</li><li>war exploded模式直接将WEB工程以当前文件夹的位置关系上传到服务器。</li></ol><a id="more"></a><p>使用：</p><ol><li>war模式这种可以称之为是发布模式，看名字也知道，这是先打成war包，再发布；</li><li>war exploded模式是直接把文件夹、jsp页面 、classes等等移到IDEA生成的Tomcat部署文件夹里面，进行加载部署，不会替代本来tomcat中的同名web app项目。因此这种方式支持热部署，一般在开发的时候也是用这种方式。</li><li>在平时开发的时候，使用热部署的话，应该对Tomcat中进行相应的设置,更改图中两处标记为 <code>update classes and resources</code>:<br><img src="https://images.morethink.cn/IDEA-update.jpg" alt=""><br>这样的话修改的html，jsp或者第三方模版框架例如 Freemarker热部署才可以生效。</li></ol><h1 id="热部署插件-JRebel"><a href="#热部署插件-JRebel" class="headerlink" title="热部署插件 JRebel"></a>热部署插件 JRebel</h1><blockquote><p>在 Java Web 开发中， 一般更新了 Java 文件后要手动重启 Tomcat 服务器， 才能生效， 浪费不少生命啊， 自从有了 JRebel 这神器的出现， 不论是更新 class 类还是更新 Spring 配置文件都能做到立马生效，大大提高开发效率。</p></blockquote><p><a href="http://whudoc.qiniudn.com/2016/IntelliJ-IDEA-Tutorial/jrebel-setup.html" target="_blank" rel="noopener">IntelliJ IDEA 的 Java 热部署插件 JRebel 安装及使用</a></p><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><ol><li>阿里巴巴规约检测</li><li>翻译插件</li><li>wakatime</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>怎么解决问题</title>
      <link href="/%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
      <url>/%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>编程总是会遇到很多问题，你解决问题的、方式反映你的思维方式，你的思维方式决定你的未来，很多事情可以靠经验解决，思维却需要不断的锻炼。</p><p>程序员不仅仅是程序员，他更应该是一个高效的学习者。</p><a id="more"></a><p><strong>以下主要来源于马士兵老师(很有参考意义)：</strong></p><p>在编程中，每个人都会难免遇到问题，那么，遇到问题之后，环境配不通，程序调不过，运行不正常，遇见这些恼人的问题的时候，该怎么办呢？<br>首先我要恭喜你，遇见问题，意味着你又有涨经验的机会了，每解决一个问题，你的JAVA经验值就应该上升几百点，问题遇到的越多，知识提升的越快。 但是总是解决不了也是很恼人的，怎么办呢？ 我一般要求我们的学生都是这样来进行的。</p><p>当你遇到一个问题的时候：</p><h1 id="要仔细的观察错误的现象，是的，要仔细"><a href="#要仔细的观察错误的现象，是的，要仔细" class="headerlink" title="要仔细的观察错误的现象，是的，要仔细"></a>要仔细的观察错误的现象，是的，要仔细</h1><p><em>英语是成为一个牛逼程序员的必经之路</em></p><p>有不少同学的手非常快，在编译一个程序的时候，报了一大堆的错误，扫了一眼之后就开始盯着代码一行一行的找，看清什么错误了吗？没有！有的时候安装软件出问题了，一个对话框弹出来说出错了，马上举手问老师：“不得了了，出错了，出错了”。</p><p>“什么错误？”</p><p>“还没看呢？”</p><p>这都是典型的不上心的方法！请记住，学习编程并不是一件很容易的事情，自己首先要重视，要用心才可以。在开发中，仔细观察出错信息，或者运行不正常的信息，是你要做的第一件事。读清楚了，才能在以后的步骤中有的放矢，哭了半天，总要知道哭的是谁才成。</p><p>这里又分三种情况：</p><p>A:错误信息读懂了，那么请进入2步：要仔细思考问题会出在哪些环节</p><p>B:没读懂，愣是一点没看懂，进入第4步吧：google</p><p>C:读了个半懂，有些眉目但是不太能确定，第2步和第4步结合着来。</p><h1 id="要仔细思考问题会出在哪些环节（重要）"><a href="#要仔细思考问题会出在哪些环节（重要）" class="headerlink" title="要仔细思考问题会出在哪些环节（重要）"></a>要仔细思考问题会出在哪些环节（重要）</h1><p>当你读懂了一个问题之后，要好好的思考这个问题可能会在哪些环节上出错。</p><p>一辆汽车从总成品线上下来，车门子关不上！ 哪错了？你怎么查？ 当然是顺着生产线一站一站的查下来。 程序也是一样的，也是一系列语句完成后产生的结果。</p><p>写一个网络程序，总是发现服务器端打印不出接收的数据，有几个环节会出错？仔细分析这个现象的环节：</p><p>客户端产生数据-&gt;按“发送”按钮-&gt;发送到服务器-&gt;服务器接收到后打印</p><p>这几个环节都有可能会出错：</p><p>有可能客户端根本就没产生数据，有可能发送按钮按下去后根本就没发出去，或者发出去的不是你产生的东西，或者根本就没连接网络，或者发送出去服务器没有接收到，或者接收到之前就打印了等等等等。</p><p>学着去这样仔细的分析程序的环节和这些环节可能会产生的问题，你的经验值定然会大幅度快速的提升，这样做很累人，但是一件事情如果做下来一点都不累的话，这个东西还有价值吗？</p><p>在网页A输入了一个人的名字，提交到B，首先存储到数据库，然后再读出来，发现乱码！怎么办？当然是分析环节：</p><p>客户输入-&gt;HTTP发送-&gt;B接收-&gt;存储到数据库-&gt;读出-&gt;展现到网页</p><p>每个环节都可能出问题，怎么才能知道哪里出的问题？继续往下读。</p><h1 id="如何定位错误（重要）"><a href="#如何定位错误（重要）" class="headerlink" title="如何定位错误（重要）"></a>如何定位错误（重要）</h1><p><strong>分析清楚有哪些环节之后，下一步就是定位到底什么环节出错了</strong></p><p>定位有以下三种办法：</p><p>A 打印输出，比如java的System.out.println()，比如js的alert()，这种办法常用，必须掌握</p><p>B Debug，可以参考我们的视频《坦克大战》，详细讲了Eclipse的调试。</p><p>C 删掉一部分调试一部分，也就是去掉一部分的功能，做简化，然后调试剩下的功能，JSP和JavaScript常用。</p><h1 id="如果还不行，google吧"><a href="#如果还不行，google吧" class="headerlink" title="如果还不行，google吧"></a>如果还不行，google吧</h1><p>还查不出来？恭喜你，你遇到的错误是值得认真对待的错误，是会影响你学习生涯的错误，问一下google或者百度吧。照着下面的方法查查看。</p><p>先精后粗，首先先进行尽量精确的查找，比如一个错误，SocketException，你怀疑它是在connect()方法出的问题，那么当然是选这样的关键词<code>java connect SocketException</code></p><ol><li><p>先中后英，本着以解决问题为主的想法，练习英文还是先放在一边吧，首先应该在中文网页中查询，还不行的话，搜索英文的吧。有很多东西就像一层窗户纸，远看灰蒙蒙怪唬人的，你壮着胆子一捅，它就破了。阅读英文的书籍就是如此，不是想象中的那么困难(宁可在沙场上战死，也不能被吓死不是吗)</p></li><li><p>信息筛选，搜索出来的结果不见得能够完全匹配，建议大家多阅读前几页的搜索结果，多打开几个网页看看，不过，我的经验是超过3页一般就没意义了，所以超过3页还没有找到合适的答案，或许应该调整一下关键词，或者放粗整个搜索的结果了。</p></li><li><p>经常的进行知识难点的查询，如果一个问题牵扯的面比较广，就干脆到网上搜索一些相关的专题，比如“java 乱码 mysql” “oracle 创建用户”等等，如果有必要，不要犯懒，勤动手写一些小小的测试程序，来弄明白知识点的细节。这也是涨知识的重要的途径。</p></li></ol><h1 id="什么？还不行？那么就BBS吧"><a href="#什么？还不行？那么就BBS吧" class="headerlink" title="什么？还不行？那么就BBS吧"></a>什么？还不行？那么就BBS吧</h1><p>如果实在还不行，就到BBS上面问一问高手吧。 到哪个BBS上？</p><p>google或者百度不就行了么？关键词“java论坛”“java bbs”</p><p>然后在搜索结果里好好的看看那些活动频繁的论坛，以后就是你经常光顾的地方了。CSDN论坛首页就很不错。</p><p>向别人提问是非常需要技巧的！</p><p>曾经有人问我这样的问题：“请问如何才能学好java呢？”这个要求太泛泛了。还有人给我一段代码甚至jar包也寄过来，然后说老师的我的代码中有个错误您帮我查查。</p><p>我没有办法去花大量的时间建立环境去调试一个还不知道存在不存在的错误！</p><p>还有人在BBS上问这样的问题：“是否有人能帮我完成一个完整聊天的程序？请帮我写一个登陆模块吧！”</p><p>这个要求有些过分了，有人帮你做是你的运气，没有人帮你是正常反应。</p><p>向别人提问，应该首先确定你已经做了自己应该做的事，简单说是我前面列举的1，2，3，4步你都作过了，然后再求助于人。不要没有经过认真思考就草率的向别人提问，自己也不会有长足进步的。</p><p>那我该怎么样向别人提问呢？</p><p>在google或百度搜索《提问的智慧》，你会找到答案。</p><p>在这里我给出一个链接<br>！<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">提问的智慧</a>，磨刀不误砍柴功，先花点时间去阅读一下吧。</p><p>得到别人的回答，要懂得感恩。不需要去写信感谢，不需要支付费用，不需要那些花言巧语，做到下面这一点就够了：</p><p>当你逐步成为高手的时候，要回答别人在论坛上提出的问题，有时间有精力的前提之下！</p>]]></content>
      
      
      <categories>
          
          <category> 编程思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如果你真的想做一件事，你一定会找到一个方法</title>
      <link href="/there-is-away/"/>
      <url>/there-is-away/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写博客这件事情给我最大的体会就是，一件事情如果你能够坚持做8年，那么不管效率和频率多低，最终总能取得一些很可观的收益。而另一个体会就是，一件事情只要你坚持得足够久，“坚持”就会慢慢变成“习惯”。原本需要费力去驱动的事情便成了家常便饭，云淡风轻。–刘未鹏</p></blockquote><a id="more"></a><p>分享一个我非常喜欢的故事，这篇文章对我影响很深，每当我想放弃我的计划时，就会响起这句话： <strong>Where there is a will，there is away</strong>。然后我的计划就又能继续下去了。这句话就是意志力最直接的体现，绝不放弃自己想做的事，不管发生什么事情，你一定会想到一个解决这件事的办法。</p><p>希望每个能看到这篇文章的人，要要记得下面的话：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你真的想做一件事，你一定会找到一个方法；</span><br><span class="line">如果你不想做一件事，你一定会找到一个借口。</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1953 年11月13日，丹麦首都哥本哈根。消防队的电话总机在清晨三点收到一个电话。二十二岁的年青消防员埃里希在值班。<br>　　「喂喂！这里是消防队」。电话的那端没人回答，可是埃里希听到一沉重的呼吸声。<br>　　后来一个十分激动的声音，说：「救命，救命啊！我站不起来！我的血在流！」<br>　　「别慌，太太」，埃里希回答，「我们马上就到，您在那里？」<br>　　「我不知道。」<br>　　「不在您的家里？」<br>　　「是的，我想是在家里。」<br>　　「家在哪里，哪条街？」<br>　　「我不知道，我的头晕，我在流血。」<br>　　「您至少要告诉我您叫什么名字！」<br>　　「我记不得了，我想我撞到了头。」<br>　　「请不要把电话挂掉。」<br>　　埃里希拿起第二具电话，拨到电话公司，回答他的是一个年老的男士。<br>　　「请您帮我找一下一个电话客户的号码，这客户现在正和消防总队通电话。」<br>　　「不，我不能，我是守夜的警卫，我不懂这些事。而且今天是星期六，没有任何人在。」<br>　　埃里希挂上电话。他有了另一个主意，于是问那女人：「你怎样找到消防队的电话号码的？」<br>　　「号码写在电话机上，我跌倒时把它给拖下来了。」<br>　　「那您看看电话机上是否也有您家的电话号码。」<br>　　「没有，没有别的任何号码。请你们快点来啊！」那女人的声音愈来愈弱。<br>　　「请您告诉我，您能看到什么东西？」<br>　　「我…我看到窗子，窗外，街上，有一盏路灯。」<br>　　好啊──埃里希想──她家面向大街，而且必定是在一层不太高的楼上，因为她看得见路灯。「窗户是怎样的？」他继续查问，「是正方形的吗？」<br>　　「不，是长方形的。」<br>　　那么，一定是在一个旧区内。<br>　　「您点了灯吗？」<br>　　「是的，灯亮着。」<br>　　埃里希还想问，但不再有声音回答了。<br>　　需要赶快采取行动！但是做什么？<br>　　埃里希打电话给上司，向他陈述案情。<br>　　上司说：「一点办法也没有。不可能找到那个女人。而且，」他几乎生起气来，「那女人占了我们的一条电话线，要是哪里发生火警？」<br>　　但是埃里希不愿放弃。救命是消防队员的首要职责！他是这样被教导的。<br>　　突然，他兴起一个疯狂的念头。上司听了，吓坏了：「人们会以为原子战争爆发了！」他说。「在深夜，在哥本哈根这样一个大都会里 ……」<br>　　「我恳求您！」埃里希坚持，「我们必须赶快行动，否则全都徒劳无益！」<br>　　电话线的另一端静默了片刻，而后埃里希听到答复：「好的，我们就这么做。我马上来。」<br>　　十五分钟后，二十辆救火车在城中发出响亮的警笛声，每辆车在一个区域内四面八方的跑。<br>　　那女人已经不能再说话了，但埃里希仍听到她那急促的呼吸声。<br>　　十分钟后埃里希喊说：「我听到电话里传来警笛声！」<br>　　队长透过收发对讲机，下令：「一号车，熄灭警笛！」而后转问埃里希。<br>　　「我还听到警笛声！」他答说。<br>　　「二号车，熄灭警笛！」<br>　　「我还听得见… 。」<br>　　直到第十二辆车，埃里希喊说：「我现在听不见了。」<br>　　队长下令：「十二号车，再放警笛。」<br>　　埃里希告知：「我现在又听到了，但越走越远！」<br>　　「十二号车掉回头！」队长下令。<br>　　不久，埃里希喊道：「又逐渐地近了，现在声音非常刺耳，应该刚好到了正确的路上。」<br>　　「十二号车，你们找一个有灯光的窗户！」<br>　　「有上百盏的灯在亮着，人们出现在窗口为看发生了什么事！」<br>　　「利用扩音机！」队长下令。<br>　　埃里希经由电话听到扩音机的声音：「各位女士和先生，我们正在寻找一个生命有严重危险的妇女。我们知道她在一间有灯光的房间里，请你们关掉你们的灯。」<br>　　所有的窗户都变黑了，除了一个。<br>　　过了一会儿，埃里希听到消防队员闯入房间，而后一个男音向对讲机说：「这女人已失去知觉，但脉搏仍在跳动。我们立刻把她送到医院。我相信有救。」<br>　　海伦．索恩达──这是那女人的名字──真的获救了。她苏醒了，几个星期后，也恢复了记忆。<br>　　<strong>如果你真的想做一件事，你一定会找到一个方法；如果你不想做一件事，你一定会找到一个借口。</strong>「 <em>Where there is a will，there is a way</em>。」</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring 事务</title>
      <link href="/Spring-Transaction/"/>
      <url>/Spring-Transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ol><li>事务：逻辑上的一组操作,这组操作要么全部成功,要么全部失败</li><li>事务四大特性<ul><li><strong>原子性</strong>: 事务是一个不可分割的工作单位,事务中的操作要么都发生,要么都不发生</li><li><strong>一致性</strong>: 事务前后数据的完整性必须保持一致(例如:两个人转账,转账前后总金额的数目都是固定的)</li><li><strong>隔离性</strong>: 多个用户并发访问数据库时,一个用户的事务不能被其他用户的事务所干扰,多个并发事务之间数据要相互隔离(例如:假设有两个事务同时在操作数据库,例如张三修改一个记录,同时李四也在修改这个记录,会导致该记录被重复修改,或者第一次修改的记录被第二次记录给覆盖掉)</li><li><strong>持久性</strong>: 一个事务一旦被提交,它对数据库中数据的改变就是永久性的,即使数据库发生故障也不应该对其有任何影响</li></ul></li></ol><a id="more"></a><h1 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h1><p>通常来说，在一个应用中，会同时有多个用户访问数据库，在并发访问数据库的时候，可能会有，以下三个问题</p><ol><li><strong>脏读</strong><br> 一个事务读取了另一个事务改写但还未提交的数据，如果这些数据被回滚，则读到的数据是无效的。</li><li><strong>不可重复读</strong><br> 在同一个事务中，多次读取同一数据返回的结果有所不同。</li><li><strong>幻读</strong>(“幻读”是不可重复读的一种特殊场景)<br> 一个事务读取了几行记录后，另一个事务插入一些记录，幻读就发生了。再后来的查询中，第一个事务就会发现有些原来没有的记录。</li></ol><p><strong>DBMS通过加锁来进行并发控制，不同的隔离级别拥有不同的持锁时间。</strong></p><p>“C”-表示锁会持续到事务提交。 “S” –表示锁持续到当前语句执行完毕。如果锁在语句执行完毕就释放则另外一个事务就可以在这个事务提交前修改锁定的数据，从而造成混乱。</p><table><thead><tr><th>隔离级别l</th><th>写操作</th><th>读操作</th><th>范围操作 (…where…)</th></tr></thead><tbody><tr><td>未提交读</td><td>S</td><td>S</td><td>S</td></tr><tr><td>提交读</td><td>C</td><td>S</td><td>S</td></tr><tr><td>可重复读</td><td>C</td><td>C</td><td>S</td></tr><tr><td>可序列化</td><td>C</td><td>C</td><td>C</td></tr></tbody></table><p><strong>隔离级别</strong></p><ol><li>未提交读(<code>READ_UNCOMMITED</code>);<br>允许你读取还未提交的改变了的数据，可能导致脏，幻，不可重复读。</li><li>提交读(<code>READ_COMMINTED</code>):<br>允许在并发事务已经提交后读取，可防止脏读，但幻读和不可重复读还是有可能发生。</li><li>可重复读(<code>REPEATABLE_READ</code>):<br>对相同字段的多次读取是一致的，除非数据被事务本身改变，可防止脏读，不可重复读，但幻读仍有可能出现。</li><li>可序列化(<code>SERILIZABLE</code>):<br>完全服从ACID的隔离级别，确保不发生脏读，幻读，不可重复读，这在所有的隔离级别中是最慢的，它是典型的完全通过锁定在事务中涉及的数据表来完成的。</li></ol><p>如下表所示：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>未提交读</td><td>可能发生</td><td>可能发生</td><td>可能发生</td></tr><tr><td>提交读</td><td>-</td><td>可能发生</td><td>可能发生</td></tr><tr><td>可重复读</td><td>-</td><td>-</td><td>可能发生</td></tr><tr><td>可序列化</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>TransactionDefinition定义事务隔离级别</p><p><strong>默认事务隔离级别</strong></p><p>除了以上的数据库提供的事务隔离级别，spring提供了Default隔离级别，该级别表示spring使用后端数据库默认的隔离级别。</p><ul><li>MySQL：REPATABLE_READ(可能出现幻读)</li><li>Oracle：READ_COMMITTED(可能出现不可重复读和幻读)</li></ul><p><strong>并发操作怎么设置数据库隔离级别</strong></p><p>这个要看你具体使用场景，例如你是并发的时候去写，还是去读，还是去读写，一般来说是读写，那么一般是 repeatable read，虽然他有幻读得可能性，但是一般去发生幻读得业务是不常见的。</p><h1 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h1><p>事务的传播行为：解决业务层的方法之间的相互调用的问题(在调用方法的过程中,事务是如何传递的)</p><p>事务的传播行为有七种，又分为三类：</p><ol><li>如果 A 方法中有事务，则调用 B 方法时就用该事务，即：A和B方法在同一个事务中。<ul><li><strong>PROPAGATION_REQUIRED</strong>：如果 A 方法中没有事务，则调用 B 方法时就创建一个新的事务，即：A和B方法在同一个事务中。</li><li><strong>PROPAGATION_SUPPORTS</strong>：如果 A 方法中没有事务，则调用 B 方法时就不使用该事务。</li><li><strong>PROPAGATION_MANDATORY</strong>：如果 A 方法中没有事务，则调用 B 方法时就抛出异常。</li></ul></li><li>A 方法和 B 方法不在同一个事务里面。<ul><li><strong>PROPAGATION_REQUIRES_NEW</strong>：如果 A 方法中有事务，则挂起并新建一个事务给 B 方法。</li><li><strong>PROPAGATION_NOT_SUPPORTED</strong>：如果 A 方法中有事务，则挂起。</li><li><strong>PROPAGATION_NEVER</strong>：如果 A 方法中有事务，则报异常。</li></ul></li><li>如果 A 方法有的事务执行完，设置一个保存点，如果 B 方法中事务执行失败，可以滚回保存点或初始状态。<ul><li><strong>PROPAGATION_NESTED</strong> ：如果当前事务存在，则嵌套事务执行</li></ul></li></ol><p>重点的三种：</p><ul><li>PROPAGATION_REQUIRED</li><li>PROPAGATION_REQUIRES_NEW</li><li>PROPAGATION_NESTED</li></ul><h1 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h1><p>Spring将事务管理分成了两类:</p><ul><li>编程式事务管理<ul><li>手动编写代码进行事务管理(很少使用)</li></ul></li><li>声明式事务管理<ul><li>基于TransactionProxyFactoryBean的方式(很少使用),需要为每个进行事务管理的类,配置一个TransactionProxyFactoryBean进行增强</li><li>基于AspectJ的xml方式(经常使用),一旦配置好,类上不需要添加任何东西</li><li>基于注解(经常使用),配置简单,需要在业务层类上添加一个@Transactionl的注解</li></ul></li></ul><h1 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h1><h2 id="TransactionProxyFactoryBean"><a href="#TransactionProxyFactoryBean" class="headerlink" title="TransactionProxyFactoryBean"></a>TransactionProxyFactoryBean</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountServiceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                   prop格式：</span></span><br><span class="line"><span class="comment">                       * PROPAGATION：事务的传播行为</span></span><br><span class="line"><span class="comment">                       * ISOLATION：事务的隔离级别</span></span><br><span class="line"><span class="comment">                       * readOnly：只读(不可以进行修改,插入,删除的操作)</span></span><br><span class="line"><span class="comment">                       * -Exception：发生哪些异常回滚事务</span></span><br><span class="line"><span class="comment">                       * +Exception：发生哪些异常事务不回滚</span></span><br><span class="line"><span class="comment">                 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"transfer"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的通知（事务的增强） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                propagation：传播行为</span></span><br><span class="line"><span class="comment">                isolation：隔离级别</span></span><br><span class="line"><span class="comment">                read-only：只读</span></span><br><span class="line"><span class="comment">                rollback-for：发生哪些异常时回滚</span></span><br><span class="line"><span class="comment">                no-rollback-for：发生哪些异常时不回滚</span></span><br><span class="line"><span class="comment">                timeout：过期信息</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置aop切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* net.morethink.service.AccountService+.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Transactionl"><a href="#Transactionl" class="headerlink" title="@Transactionl"></a>@Transactionl</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>参考文档</p><ol><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E5%8B%99%E9%9A%94%E9%9B%A2" target="_blank" rel="noopener">事务隔离-维基百科</a></li><li><a href="https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/" target="_blank" rel="noopener">全面分析 Spring 的编程式事务管理及声明式事务管理-IBM</a></li><li><a href="http://www.cnblogs.com/xrq730/p/5454381.html" target="_blank" rel="noopener">MyBatis6：MyBatis集成Spring事物管理（下篇）-博客园</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7下 Java、Tomcat、MySQL、Maven热部署</title>
      <link href="/Linux-Java/"/>
      <url>/Linux-Java/</url>
      
        <content type="html"><![CDATA[<p>本文介绍了CentOS7 64位下Java、Tomcat、MySQL、Maven热部署等服务器环境的搭建和调试过程。</p><p>学生服务器资源获取方法：</p><ol><li><a href="https://www.qcloud.com/act/campus" target="_blank" rel="noopener">云+校园计划 - 腾讯云</a></li><li>阿里云云翼计划</li><li>github 学生包，里面有Digital Ocean 50美元的VPS可用</li></ol><p>已经将所需要的工具(Xshell,Xftp、FileZilla等sftp上传工具，jdk-8u101-linux-x64.tar.gz和apache-tomcat-9.0.0.M10.tar.gz)上传至百度云 <a href="http://pan.baidu.com/s/1qYRms8G" target="_blank" rel="noopener">http://pan.baidu.com/s/1qYRms8G</a></p><a id="more"></a><h1 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>通过<code>uname -r</code>判断系统是多少位</p><ul><li>64位 ： 出现x86_64</li><li>32位 ： 出现i686或i386</li></ul><h2 id="安装Java-JDK8-0"><a href="#安装Java-JDK8-0" class="headerlink" title="安装Java JDK8.0"></a>安装Java JDK8.0</h2><ol><li>建立Java目录，存放Java和Tomcat<ul><li>cd /usr/local/</li><li>mkdir Java</li><li>cd Java</li></ul></li><li>使用FileZilla将下载好的jdk-8u101-linux-x64.tar.gz 和 apache-tomcat-9.0.0.M10.tar.gz上传至Java目录下(传送的国外服务器很慢,国内几乎是国外的十倍，但是也只有两三百KB，也可能是电脑问题)</li><li>将上传的jdk解压，然后重命名为jdk<ul><li>tar -zxv -f  jdk-8u101-linux-x64.tar.gz</li><li>mv jdk1.8.0_101  jdk</li><li>cd jdk</li></ul></li><li><p>配置环境变量Environment=JAVA_HOME=/usr/local/Java/jdk</p><ol><li>vim /etc/profile</li><li><p>打开之后按键盘（i）进入编辑模式,将下面的内容复制到底部</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/Java/jdk</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>写完之后我们按键盘（ESC）按钮退出，然后按（:wq）保存并且关闭Vim。</p></li><li>使用 <code>source /etc/profile</code>命令使其立即生效</li><li>通过<code>java -version</code>验证Java是否配置成功。</li></ol></li></ol><h1 id="安装Tomcat9"><a href="#安装Tomcat9" class="headerlink" title="安装Tomcat9"></a>安装Tomcat9</h1><ol><li>在Java目录下解压上面一步已经上传上去的Tomcat9.0<ul><li>tar -zxv -f apache-tomcat-9.0.0.M10.tar.gz</li><li>mv apache-tomcat-9.0.0.M10 tomcat</li><li>cd tomcat</li></ul></li><li>启动命令为 /usr/local/Java/tomcat/bin/startup.sh</li><li>启动完成后还需开放8080端口(CentOS7这个版本的防火墙默认使用的是firewall，与之前的版本使用iptables不一样。 <strong>关于防火墙端口可以查看后面的参考文档</strong>)<ul><li>firewall-cmd –zone=public –add-port=8080/tcp –permanent<br>出现success表明添加成功</li><li>更新防火墙规则即可： firewall-cmd –reload</li><li>重启防火墙 systemctl restart firewalld.service</li></ul></li><li>然后再次在浏览器中输入<a href="http://ip:8080，如果看到tomcat系统界面，说明安装成功。" target="_blank" rel="noopener">http://ip:8080，如果看到tomcat系统界面，说明安装成功。</a></li><li>Tomcat 8080 端口无法访问<ul><li>查看8080端口被那个程序占用(应该是Java) netstat -anp 然后再杀死占用进程。</li><li><strong>可能是你的服务器提供商有安全组来控制端口，你需要去提供商那里开启端口(PS：我的阿里云服务器就是必须要设置端口安全组才可以访问端口)</strong></li></ul></li><li>关闭命令为 /usr/local/Java/tomcat/bin/shutdown.sh</li></ol><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>CentOS 7的yum源中貌似没有正常安装mysql时的mysql-sever文件，需要去官网上下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line"># yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>成功安装之后重启mysql服务。<br>初次安装mysql是root账户是没有密码的<br>设置密码的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl start mysqld.service</span><br><span class="line"></span><br><span class="line"># mysql -uroot</span><br><span class="line"># mysql&gt;set password = password(&quot;你的密码&quot;);</span><br><span class="line"># mysql&gt;flush privileges;</span><br><span class="line"># mysql&gt; exit</span><br></pre></td></tr></table></figure><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>进入MySQL后通过<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;你的密码&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p><p>可以允许任意主机访问你在服务器搭建的MySQL，可以吧<code>%</code>更换为你需要允许的IP和主机。</p><p>但是，在我进行远程连接的时候发生如下错误<br><img src="https://images.morethink.cn/mysql-2003-error.png" alt=""><br>可以根据下面进行排错</p><ol><li>服务器是否可以访问，是否能ping 通</li><li>安全组及端口号是否打开或者被占用</li><li>服务器是否运行或者关闭只允许本机访问</li><li>重启试试</li></ol><p>当我排除上面3中情况后，发现属于第四中，可能是因为还没有立即生效。</p><h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><p>在我建立数据时发现中文无法插入，于是查看使用<code>show variables like &#39;character%&#39;;</code><br>如图所示，发现默认不是utf-8，于是通过在CentOS7中修改文件/usr/share/mysql/my-default.cnf，在[mysqld]，[mysql]，[client]下分别添加如下内容<br><img src="https://images.morethink.cn/msql-chinese-fail.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">collation-server = utf8_unicode_ci</span><br><span class="line">init-connect=&apos;SET NAMES utf8&apos;</span><br><span class="line">character_set_server = utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p><p>修改完成后，重启mysql服务，systemctl restart mysql，然后进入mysql，再次使用<code>show variables like &#39;character%&#39;;</code>命令查看，如图，<br><img src="https://images.morethink.cn/msql-chinese-success.jpg" alt=""><br>发现一样，说明utf-8可以使用，但是无法插入中文，于是猜测可能是系统原生不支持utf-8，更改系统编码后发现果然如此。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat /etc/locale.conf</span><br><span class="line">LANG=&quot;en_US.UTF-8&quot;</span><br><span class="line"># vim /etc/locale.conf</span><br><span class="line"># cat /etc/locale.conf</span><br><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></p><p>于是更改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANGUAGE=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">SUPPORTED=&quot;zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en&quot;</span><br><span class="line">SYSFONT=&quot;lat0-sun16&quot;</span><br></pre></td></tr></table></figure><p>重启系统之后，再次重启MySQL服务。</p><p>如图，发现可以插入中文。</p><p><img src="https://images.morethink.cn/mysql-chinese-success-result.jpg" alt=""></p><h2 id="解决MySQL5-5忘记密码"><a href="#解决MySQL5-5忘记密码" class="headerlink" title="解决MySQL5.5忘记密码"></a>解决MySQL5.5忘记密码</h2><p>通过跳过权限安全检查设置新密码。</p><ol><li>首先检查mysql服务是否启动，若已启动则先将其停止服务，可在开始菜单的运行，使用命令： <code>net stop mysql</code><br>，然后打开第一个cmd1窗口，切换到mysql的bin目录，运行命令：<br><code>mysqld --defaults-file=&quot;C:\Program Files\MySQL\MySQL Server 5.5\my.ini&quot; --console --skip-grant-tables</code>，将命令中的MySql版本更换你的版本。<br><strong>该命令通过跳过权限安全检查，开启mysql服务，这样连接mysql时，可以不用输入用户密码</strong>。<br>此时已经开启了mysql服务了！<br><strong>这个窗口保留不关闭</strong>。</li><li>打开第二个cmd2窗口，连接mysql<ul><li>输入命令：<code>mysql -u root -p</code><br>出现： <code>Enter password:</code> ，在这里直接回车，不用输入密码。 然后就就会出现登录成功的信息。</li><li>使用命令切换到mysql数据库：<code>use mysql;</code></li><li>使用命令更改root密码：<br><code>UPDATE user SET Password=PASSWORD(&#39;newpassword&#39;) where USER=&#39;root&#39;;</code></li><li>刷新权限：<br><code>FLUSH PRIVILEGES;</code></li><li>然后退出，重新登录：<br><code>quit</code></li><li>重新登录： 可以关掉之前的cmd1 窗口了。</li></ul></li><li>然后用<code>net start mysql</code> 启动服务<ul><li>登录：<code>mysql -u root -p</code></li><li>出现输入密码提示，输入新的密码即可登录：<br><code>Enter password: ***********</code></li></ul></li></ol><p>显示登录信息： 成功  就一切ok了</p><h1 id="Maven-热部署"><a href="#Maven-热部署" class="headerlink" title="Maven 热部署"></a>Maven 热部署</h1><p>Maven 热部署可以通过一行命令部署到本地服务器，没有问题的话就一行命令部署到正式服务器。及其方便了开发和部署。因为我的Tomcat9遇到很多问题。<br>可以参考 <a href="http://www.cnblogs.com/xyb930826/p/5725340.html" target="_blank" rel="noopener">maven自动部署到远程tomcat教程</a> 进行部署和测试。</p><p>下面是我遇到的一个错误，因为没有配置IDEA的make 导致出错。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project liwenhao: Cannot invoke Tomcat manager: Connect</span><br><span class="line">ion reset by peer: socket write error -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1]</span><br></pre></td></tr></table></figure></p><p>可以通过将make如下配置<br><img src="https://images.morethink.cn/make-maven-goal.jpg" alt=""><br>即可成功</p><p><strong>war包部署在服务器乱码</strong></p><p><img src="https://images.morethink.cn/maven-war-messy-code.jpg" alt=""><br>可以通过配置如下属性，解决中文war包服务器乱码。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p><p>配置完图。<br><img src="https://images.morethink.cn/maven-war-code-success.jpg" alt=""></p><p>在我通过<code>mvn tomcat7:deploy</code>命令热部署时，会出现mysql无法连接的情况，后来在我重新进行热部署的时候，没有出现这个问题。<br><strong>猜测</strong><br>应该是我的配置文件的问题</p><p><strong>参考文档</strong></p><ol><li><a href="http://www.centoscn.com/CentOS/config/2016/0511/7218.html" target="_blank" rel="noopener">centos 7 开放 80端口</a></li><li><a href="http://www.cnblogs.com/weiok/p/5086971.html" target="_blank" rel="noopener">centos7 设置中文</a></li><li><a href="https://zhangzifan.com/centos-7-remove-mysql.html" target="_blank" rel="noopener">CentOS 7下彻底卸载MySQL数据库</a></li><li>CentOS7 <strong>远程访问MySQL</strong><ul><li><a href="http://blog.sina.com.cn/s/blog_5da16ee20102x47h.html" target="_blank" rel="noopener">Centos 7 mysql 5.7 给root开启远程访问权限，修改root密码</a></li><li><strong><a href="http://www.aiezu.com/db/mysql_cant_connect_through_socket.html" target="_blank" rel="noopener">连接Mysql提示Can’t connect to local MySQL server through socket的解决方法</a></strong></li></ul></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-8-on-centos-7" target="_blank" rel="noopener">How To Install Apache Tomcat 8 on CentOS 7</a></li><li><a href="http://www.cnblogs.com/linuxnotes/archive/2013/03/09/2951101.html" target="_blank" rel="noopener">windows环境中mysql忘记root密码的解决办法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Tomcat </tag>
            
            <tag> MySQL </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端通过Nginx反向代理解决跨域问题</title>
      <link href="/Nginx-Cross-Domain/"/>
      <url>/Nginx-Cross-Domain/</url>
      
        <content type="html"><![CDATA[<p>在前面写的一篇文章<a href="http://www.cnblogs.com/morethink/p/6525216.html" target="_blank" rel="noopener">SpringMVC解决跨域问题</a>，我们探讨了什么是跨域问题以及SpringMVC怎么解决跨域问题，解决方式主要有如下三种方式:</p><ol><li>JSONP</li><li>CORS</li><li>WebSocket</li></ol><p>可是这几种方式都是基于服务器配置的，即对于自己的网站是可以通过这几种方式解决的，可是现在遇到另一个需求(前面提到过，写扇贝插件，我们不能更改扇贝的服务器配置，也不能发短信叫他们给我配置一下)。</p><p>本文探讨了前端如何通过Nginx反向代理的方式解决跨域问题。</p><a id="more"></a><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>再次重申： <strong>跨域是浏览器行为，不是服务器行为。</strong></p><p>实际上，请求已经到达服务器了，只不过在回来的时候被浏览器限制了。就像Python他可以进行抓取数据一样，不经过浏览器而发起请求是可以得到数据，想到通过Nginx的反向代理来解决跨域问题。</p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>所谓代理就是在我们和真实的服务器之间有一台代理服务器，我们所有的请求都是通过它来进行转接的。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理就是我们访问不了Google，但是我在国外有一台vps，它可以访问Google，我访问它，叫它访问Google后，把数据传给我。</p><p>如图：</p><p><img src="https://images.morethink.cn/proxy.jpg" alt="" title="正向代理"></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>大家都有过这样的经历，拨打10086客服电话，可能一个地区的10086客服有几个或者几十个，你永远都不需要关心在电话那头的是哪一个，叫什么，男的，还是女的，漂亮的还是帅气的，你都不关心，你关心的是你的问题能不能得到专业的解答，你只需要拨通了10086的总机号码，电话那头总会有人会回答你，只是有时慢有时快而已。那么这里的10086总机号码就是我们说的反向代理。客户不知道真正提供服务人的是谁。</p><p>反向代理隐藏了真实的服务端，当我们请求 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p></blockquote><p>如图：<br><img src="https://images.morethink.cn/reverse-proxy.jpg" alt="" title="反向代理"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>正向代理隐藏了真实的客户端</strong>。</li><li><strong>反向代理隐藏了真实的服务器</strong>。</li></ul><p>Nginx 就是一个很好的反向代理服务器，当然apache也可以实现此功能。</p><p>windows下Apache配置参考这篇文章：  <a href="http://www.cnblogs.com/morethink/p/7551877.html" target="_blank" rel="noopener">Windows Apache服务器配置</a></p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx（发音同engine x）是一个 Web服务器，也可以用作反向代理，负载平衡器和 HTTP缓存。该软件由 Igor Sysoev 创建，并于2004年首次公开发布。同名公司成立于2011年，以提供支持。</p><p>我在<a href="http://www.cnblogs.com/morethink/p/6390072.html" target="_blank" rel="noopener">Windows下实现Nginx负载均衡</a>提到过Windows下Nginx命令使用。</p><h2 id="Nginx-反向代理模块-proxy-pass"><a href="#Nginx-反向代理模块-proxy-pass" class="headerlink" title="Nginx 反向代理模块 proxy_pass"></a>Nginx 反向代理模块 proxy_pass</h2><p><code>proxy_pass</code> 后面跟着一个 URL，用来将请求反向代理到 URL 参数指定的服务器上。例如我们上面例子中的 <code>proxy_pass https://api.shanbay.com</code>，则将匹配的请求反向代理到 <a href="https://api.shanbay.com。" target="_blank" rel="noopener">https://api.shanbay.com。</a></p><p>通过在配置文件中增加<code>proxy_pass 你的服务器ip</code>,例如这里的扇贝服务器地址，就可以完成反向代理。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ## 用户访问 localhost，则反向代理到https://api.shanbay.com</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass https://api.shanbay.com;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置html以文件方式打开"><a href="#配置html以文件方式打开" class="headerlink" title="配置html以文件方式打开"></a>配置html以文件方式打开</h1><p>一般的情况下，我们的HTML文件时放置在Nginx服务器上面的，即通过输入 <a href="http://localhost/index.html" target="_blank" rel="noopener">http://localhost/index.html</a> ，但是在前端进行调试的时候，我们可能是通过 使用 file:///E:/nginx/html/index.html 来打开HTML。服务器打开不是特别方便。</p><p>而我们之所以要部署在服务器上，是想要使用浏览器自带的CORS头来解决跨域问题，如果不想把HTML放置在Nginx中，而想通过本地打开的方式来调试HTML，可以通过自己添加<code>Access-Control-Allow-Origin</code>等http头，但是我们的AJAX请求一定要加上<code>http://127.0.0.1/request</code>，而不能直接是 <code>/request</code>，于是将nginx.conf作如下配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    # 配置html以文件方式打开</span><br><span class="line">    if ($request_method = &apos;POST&apos;) &#123;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">    if ($request_method = &apos;GET&apos;) &#123;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    # 代理到8080端口</span><br><span class="line">    proxy_pass        http://127.0.0.1:8080;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="处理DELETE和PUT跨域请求"><a href="#处理DELETE和PUT跨域请求" class="headerlink" title="处理DELETE和PUT跨域请求"></a>处理DELETE和PUT跨域请求</h1><p>而现在我的后台是restful风格的接口，采用了delete和put方法，而上面的配置就无能为力了。</p><p>可以通过增加对非简单请求的判断来解决DELETE和PUT跨域请求。</p><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p><p>因此，为了使Nginx可以处理delete等非简单请求，Nginx需要作出相应的改变，更改配置如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    # 完成浏览器的&quot;预检&quot;请求</span><br><span class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line">add_header Access-Control-Allow-Credentials true;</span><br><span class="line">add_header Access-Control-Allow-Methods &apos;GET, POST, PUT, DELETE, OPTIONS&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">return 204;</span><br><span class="line">&#125;</span><br><span class="line">    # 配置html在本地打开</span><br><span class="line">    if ($request_method = &apos;POST&apos;) &#123;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">    if ($request_method = &apos;GET&apos;) &#123;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">          add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    # 配置html在Nginx中打开</span><br><span class="line">    location ~* \.(html|htm)$ &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    # 代理到8080端口</span><br><span class="line">    proxy_pass        http://127.0.0.1:8080;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还必须把我们的html代码放在Nginx中html文件夹内，即使用Nginx当做我们的前端服务器。</p><h1 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h1><p>有时候我们仅仅只想将<code>/api</code>下的url反向代理到后端，可以通过在nginx.conf中配置url重写规则如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">         location ^~ /api &#123;</span><br><span class="line">         rewrite ^/api/(.*)$ /$1 break;</span><br><span class="line">         proxy_pass https://api.shanbay.com/;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样的话，我们只用处理<code>/api</code>下的url。</p><p>在配置文件中我们通过<code>rewrite</code>将URL重写为真正要请求的<code>URL</code>，通过<code>proxy_pass</code>代理到真实的服务器IP或者域名。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>如果Cookie的域名部分与当前页面的域名不匹配就无法写入。所以如果请求 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> ，服务器 proxy_pass 到 <a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 域名，然后 <a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 输出 <code>domian=b.com</code> 的 Cookie，前端的页面依然停留在 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 上，于是浏览器就无法将 Cookie 写入。</p><p>可在nginx反向代理中设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    # 页面地址是a.com，但是要用b.com的cookie</span><br><span class="line">    proxy_cookie_domain b.com a.com;  #注意别写错位置了 proxy_cookie_path / /;</span><br><span class="line">    proxy_pass http://b.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>Nginx解决跨域问题通过Nginx反向代理将对真实服务器的请求转移到本机服务器来避免浏览器的”同源策略限制”。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://www.jianshu.com/p/c872ffa500af" target="_blank" rel="noopener">Nginx反向代理配置（解决跨域问题）</a></li><li>这两篇文章讲解了URL重写的规则和用法<ul><li><a href="https://xuexb.com/html/nginx-url-rewrite.html" target="_blank" rel="noopener">nginx配置url重写</a></li><li><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noopener">nginx配置location总结及rewrite规则写法</a></li></ul></li><li><a href="http://www.cnblogs.com/wxd0108/p/5217801.html" target="_blank" rel="noopener">Nginx配置文件详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 跨域 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC解决跨域问题</title>
      <link href="/SpringMVC%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/SpringMVC%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>有个朋友在写扇贝插件的时候遇到了跨域问题。<br>于是我对解决跨域问题的方式进行了一番探讨。</p><p>问题</p><blockquote><p>API：查询单词<br><strong>URL</strong>： <a href="https://api.shanbay.com/bdc/search/?word={word}" target="_blank" rel="noopener">https://api.shanbay.com/bdc/search/?word={word}</a><br><strong>请求方式</strong>: GET<br><strong>参数</strong>： {word}, 必须，要查询的单词</p></blockquote><a id="more"></a><p>报错为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://localhost/home/saveCandidate. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;null&apos; is therefore not allowed access. The response had HTTP status code 404.</span><br></pre></td></tr></table></figure></p><p>这就是典型的跨域问题。</p><p>但是我在浏览器里输入URL是可以进行查询单词的操作的，有什么不同，即下面两个问题</p><ol><li>为什么在浏览器地址栏输入URL不会出现跨域问题。</li><li>不在服务器运行的html是否可以完成一次http请求</li></ol><p>经过Google和自己测试</p><ol><li><strong>跨域限制是浏览器行为，不是服务器行为。</strong> 浏览器认为地址栏输入时安全的,所以不限制认为是跨域。</li><li>可以，只要服务器配置为所有域都可以进行请求,那么不在服务器运行的HTML就可以完成http请求。</li></ol><h1 id="什么是跨域问题"><a href="#什么是跨域问题" class="headerlink" title="什么是跨域问题"></a>什么是跨域问题</h1><p><strong>同源策略</strong>：</p><blockquote><p>同源指的是<strong>域名（或IP）</strong>，<strong>协议</strong>，<strong>端口</strong>都相同，不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。</p></blockquote><table><thead><tr><th>URL</th><th>解释</th><th>是否跨域</th></tr></thead><tbody><tr><td><a href="http://www.morethink.cn">http://www.morethink.cn</a></td><td>原来的URL</td></tr><tr><td><a href="http://www.image.morethink.cn" target="_blank" rel="noopener">http://www.image.morethink.cn</a></td><td>子域名</td><td>跨域(cookie也无法访问)</td></tr><tr><td><a href="http://morethink.cn" target="_blank" rel="noopener">http://morethink.cn</a></td><td>不加www</td><td>跨域</td></tr><tr><td><a href="https://www.morethink.cn">https://www.morethink.cn</a></td><td>更改协议</td><td>跨域</td></tr><tr><td><a href="http://www.morethink.cn:8080">http://www.morethink.cn:8080</a></td><td>更改端口号</td><td>跨域</td></tr></tbody></table><p><strong>原因</strong>：</p><p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的Cookie，会发生什么？<br>很显然，如果Cookie包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p><p>同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 Js对象无法获得</li><li>AJAX 请求不能发送</li></ol><h1 id="模拟跨域问题"><a href="#模拟跨域问题" class="headerlink" title="模拟跨域问题"></a>模拟跨域问题</h1><p>测试URL为   <a href="http://localhost:80/home/allProductions" target="_blank" rel="noopener">http://localhost:80/home/allProductions</a></p><p>可以直接在浏览器<code>console</code>中执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:80/home/allProductions'</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在任意网站打开控制台，执行此段代码可以模拟跨域请求。</p><p>在知乎控制台打开报错如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mixed Content: The page at &apos;https://www.zhihu.com/question/26376773&apos; was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint &apos;http://localhost/home/allProductions&apos;. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure><p><img src="https://images.morethink.cn/zhihu-https-cross-domain.jpg" alt="" title="模拟跨域请求"></p><p>因为知乎是https，报错与普通的http协议不同。</p><p>再澄清一下跨域问题：</p><ol><li>并非浏览器限制了发起跨站请求，而是跨站请求可以正常发起，但是返回结果被浏览器拦截了。最好的例子是CRSF跨站攻击原理，无论是否跨域，请求已经发送到了后端服务器！</li><li>但是，<strong>有些浏览器不允许从HTTPS的域跨域访问HTTP，比如Chrome和Firefox，这些浏览器在请求还未发出的时候就会拦截请求，这是一个特例。</strong></li></ol><p>在博客园控制台打开报错如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://localhost/home/allProductions. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://www.cnblogs.com&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure><h1 id="怎么解决跨域问题"><a href="#怎么解决跨域问题" class="headerlink" title="怎么解决跨域问题"></a>怎么解决跨域问题</h1><p>解决方案有很多</p><ol><li>通过jsonp跨域</li><li>document.domain + iframe跨域</li><li>location.hash + iframe</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>跨域资源共享（CORS）</li><li><a href="http://www.cnblogs.com/morethink/p/6628757.html" target="_blank" rel="noopener">前端通过Nginx解决跨域问题</a></li><li>nodejs中间件代理跨域</li><li>WebSocket协议跨域</li></ol><p>这里主要介绍SpringMVC解决跨域问题的方式。</p><ol><li>JSONP</li><li>CORS</li><li>WebSocket</li></ol><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>可以直接参考<a href="https://my.oschina.net/xinxingegeya/blog/480510" target="_blank" rel="noopener">Spring MVC 4.1 支持jsonp</a>进行配置你的SpringMVC注解</p><h2 id="JSONP-原理"><a href="#JSONP-原理" class="headerlink" title="JSONP 原理"></a>JSONP 原理</h2><p>我虽然请求不了json数据，但是我可以请求一个<code>Content-Type</code>为<code>application/javascript</code>的JavaScript对象，这样就可以避免浏览器的同源策略。</p><p>就是当服务器接受到名为<code>jsonp</code>或者<code>callback</code>的参数时，返回<code>Content-Type: application/javascript</code>的结果，从而避免浏览器的同源策略检测。</p><p><strong>在控制台中直接进行测试你的jsonp是否配置成功：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">println</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://localhost:80/home/allProductions?&amp;callback=println"</span>;</span><br><span class="line"><span class="comment">// 创建script标签，设置其属性</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.setAttribute(<span class="string">'src'</span>, url);</span><br><span class="line"><span class="comment">// 把script标签加入head，此时调用开始</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure><p><img src="https://images.morethink.cn/jsonp-success.jpg" alt="" title="jsonp success"></p><p><strong>使用JQuery测试你的jsonp是否配置成功，因为控制台不能直接加载JQuery，需要自己建立html文件来进行测试：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">println</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'print'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">jsonp_test</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">                url: <span class="string">"http://localhost:80/home/allProductions"</span>,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="javascript">                jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span></span><br><span class="line"><span class="javascript">                jsonpCallback: <span class="string">"println"</span>, <span class="comment">//返回后调用的处理函数</span></span></span><br><span class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//请求出错的处理</span></span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"请求出错"</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"jsonp_test()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p><p>CORS需要浏览器和服务器同时支持。</p><ol><li>所有浏览器都支持该功能，IE浏览器不能低于IE10。<br><strong>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</strong> 对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</li><li>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</li></ol><p><strong>即CORS与普通请求代码一样。</strong></p><p>CORS与JSONP相比</p><ol><li><strong>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</strong></li><li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。</li><li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。</li></ol><h2 id="CrossOrigin注解"><a href="#CrossOrigin注解" class="headerlink" title="@CrossOrigin注解"></a><code>@CrossOrigin</code>注解</h2><p>此注解既可用于方法也可用于类</p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://www.zhihu.com"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/allProductions"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getAllOldProductions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@CrossOrigin</code>注解既可注解在方法上，也可注解在类上。</p><p>完成配置之后</p><h2 id="XML全局配置"><a href="#XML全局配置" class="headerlink" title="XML全局配置"></a>XML全局配置</h2><p>所有跨域请求都可以访问</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更加细粒度的配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/**"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-origins</span>=<span class="string">"http://domain1.com, http://domain2.com"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-methods</span>=<span class="string">"GET, PUT"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-headers</span>=<span class="string">"header1, header2, header3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">exposed-headers</span>=<span class="string">"header1, header2"</span> <span class="attr">allow-credentials</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">max-age</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/resources/**"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-origins</span>=<span class="string">"http://domain1.com"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀，在2008年诞生，2011年成为国际标准。<strong>所有浏览器都已经支持了</strong>。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p><strong>该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信</strong>。</p><p>请求头信息：(多了个 origin)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http://example.com</span><br></pre></td></tr></table></figure><p>响应头：(如果origin在白名单内)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure><h2 id="相比于HTTP-2"><a href="#相比于HTTP-2" class="headerlink" title="相比于HTTP/2"></a>相比于HTTP/2</h2><p>HTTP/2只是对HTML、CSS等JS资源的传输方式进行了优化，并没有提供新的JS API，不能用于实时传输消息，也无法推送指定的信息。</p><p><strong>参考文档</strong>：</p><ol><li>跨域<ul><li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></li></ul></li><li>SpringMVC 跨域解决方法<ul><li><a href="http://blog.csdn.net/isea533/article/details/50449907" target="_blank" rel="noopener">Spring MVC 4.2 增加 CORS 支持</a></li></ul></li><li><a href="https://segmentfault.com/a/1190000011145364?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly#articleHeader2" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC空字符串转为null</title>
      <link href="/SpringMVC-Empty-String-To-Null/"/>
      <url>/SpringMVC-Empty-String-To-Null/</url>
      
        <content type="html"><![CDATA[<h1 id="空字符串转为null"><a href="#空字符串转为null" class="headerlink" title="空字符串转为null"></a>空字符串转为null</h1><p>现在我遇到这样一个需求，那就是我想要吧前端传过来的值变为空，因为所谓前端的校验，其实都不是校验，如果前端传给后台一个表单，可是表单未填入值，我们后台进行判断的时候 <strong>既需要判断null，同时需要判断是否为<code>&quot;&quot;</code>, 并且如果你不希望数据库插入的是空字符串，而是<code>null</code></strong>，那么转换和插入的就很麻烦</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (manager.getUsername().equals(<span class="string">""</span>) || manager.getUsername() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException(<span class="string">"用户名未填写"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (manager.getPassword().equals(<span class="string">""</span>) || manager.getPassword() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException(<span class="string">"密码未填写"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可是如果你在SpringMVC进行参数赋值处理之前就能把<code>&quot;&quot;</code>转换为<code>null</code>，那么你就只需要进行如下判断，并且插入数据库的一直是空值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (manager.getUsername() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException(<span class="string">"用户名未填写"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (manager.getPassword() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException(<span class="string">"密码未填写"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><ol><li>可以使用过滤器/拦截器把空字符串设置成null(未尝试)</li><li>注册一个SpringMVC <code>HandlerAdapter</code>来进行处理</li></ol><p>使用SpringMVC时，所有的请求都是最先经过DispatcherServlet的，然后由DispatcherServlet选择合适的HandlerMapping和HandlerAdapter来处理请求，HandlerMapping的作用就是找到请求所对应的方法，而HandlerAdapter则来处理和请求相关的的各种事情。我们这里要讲的请求参数绑定也是HandlerAdapter来做的。</p><h1 id="参数处理器"><a href="#参数处理器" class="headerlink" title="参数处理器"></a>参数处理器</h1><p>我们需要写一个自定义的请求参数处理器，然后把这个处理器放到HandlerAdapter中，这样我们的处理器就可以被拿来处理请求了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyStringToNullModelAttributeMethodProcessor</span> <span class="keyword">extends</span> <span class="title">ServletModelAttributeMethodProcessor</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyStringToNullModelAttributeMethodProcessor</span><span class="params">(<span class="keyword">boolean</span> annotationNotRequired)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(annotationNotRequired);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindRequestParameters</span><span class="params">(WebDataBinder binder, NativeWebRequest request)</span> </span>&#123;</span><br><span class="line">        EmptyStringToNullRequestDataBinder toNullRequestDataBinderBinder = <span class="keyword">new</span> EmptyStringToNullRequestDataBinder(binder.getTarget(), binder.getObjectName());</span><br><span class="line">        RequestMappingHandlerAdapter requestMappingHandlerAdapter = applicationContext.getBean(RequestMappingHandlerAdapter.class);</span><br><span class="line">        requestMappingHandlerAdapter.getWebBindingInitializer().initBinder(toNullRequestDataBinderBinder, request);</span><br><span class="line">        toNullRequestDataBinderBinder.bind(request.getNativeRequest(ServletRequest.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.morethink.cn/EmptyStringToNull.jpg" alt="enter image description here"></p><h1 id="DataBinder"><a href="#DataBinder" class="headerlink" title="DataBinder"></a>DataBinder</h1><p>继承自<code>ExtendedServletRequestDataBinder</code>，主要用来自定义数据绑定处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyStringToNullRequestDataBinder</span> <span class="keyword">extends</span> <span class="title">ExtendedServletRequestDataBinder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyStringToNullRequestDataBinder</span><span class="params">(Object target, String objectName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(target, objectName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addBindValues</span><span class="params">(MutablePropertyValues mpvs, ServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addBindValues(mpvs, request);</span><br><span class="line">        <span class="keyword">for</span> (PropertyValue propertyValue : mpvs.getPropertyValueList()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (propertyValue.getValue().equals(<span class="string">""</span>))</span><br><span class="line">                propertyValue.setConvertedValue(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注册器"><a href="#注册器" class="headerlink" title="注册器"></a>注册器</h1><blockquote><p>话要从HandlerAdapter里系统自带的处理器说起。我这边系统默认带了24个处理器，其中有两个ServletModelAttributeMethodProcessor，也就是我们自定义处理器继承的系统处理器。SpringMVC处理请求参数是轮询每一个处理器，看是否支持，也就是supportsParameter方法， 如果返回true，就交给你出来，并不会问下面的处理器。这就导致了如果我们简单的把我们的自定义处理器加到HandlerAdapter的Resolver列中是不行的，需要加到第一个去。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyStringToNullProcessorRegistry</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RequestMappingHandlerAdapter requestMappingHandlerAdapter = applicationContext.getBean(RequestMappingHandlerAdapter.class);</span><br><span class="line"></span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = requestMappingHandlerAdapter.getArgumentResolvers();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; newResolvers = <span class="keyword">new</span> ArrayList&lt;HandlerMethodArgumentResolver&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : resolvers) &#123;</span><br><span class="line">            newResolvers.add(resolver);</span><br><span class="line">        &#125;</span><br><span class="line">        EmptyStringToNullModelAttributeMethodProcessor processor = <span class="keyword">new</span> EmptyStringToNullModelAttributeMethodProcessor(<span class="keyword">true</span>);</span><br><span class="line">        processor.setApplicationContext(applicationContext);</span><br><span class="line">        newResolvers.add(<span class="number">0</span>, processor);</span><br><span class="line">        requestMappingHandlerAdapter.setArgumentResolvers(Collections.unmodifiableList(newResolvers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:argument-resolvers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"studio.geek.databind.EmptyStringToNullModelAttributeMethodProcessor"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"annotationNotRequired"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:argument-resolvers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最后就可以完成将空字符串转为<code>null</code></strong></p><p>参考文档</p><ol><li><a href="http://blog.csdn.net/zgzczzw/article/details/53912966" target="_blank" rel="noopener"> SpringMVC对象绑定时自定义名称对应关系</a></li><li><a href="http://neoremind.com/2016/02/springmvc%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">SpringMVC源码分析和一些常用最佳实践</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>什么是优秀的程序员</title>
      <link href="/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
      <url>/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
      
        <content type="html"><![CDATA[<p><strong>内容转自</strong></p><p><a href="http://coolshell.cn/articles/4506.html" target="_blank" rel="noopener">再谈“我是怎么招聘程序员的”（上 - 陈皓</a></p><p>我以前写过一篇“我是怎么招聘程序员的”的文章（在CSDN那里有很多人进行了回复）。今天，我想再谈谈关于招聘和面试这方面的东西，主要是以下这些原因：</p><a id="more"></a><ul><li>近半年来我在进行了大量的招聘工作，对面试有一些新的体会。</li><li>酷壳最近发布了几篇趣味面试题（面试题一，面试题二，面试题三），从回复中让我有一些思考。</li><li>我有一个同事最近面试了一家公司，他和我分享了一个博士专家对他的面试，也让我思考了一些。</li><li>在豆瓣上看到“知乎上某人写面试豆瓣产品经理的经历，很欢乐”(亮点是面试官现身知乎亲自作答)</li></ul><p>所以，我很想把自己的这些新的想法再次写下来的。还是和以前一样，这篇文章同样是献给面试官的。我认为，面试的好坏完全在面试官而不是面试的人。下面是我对“我是怎么招聘程序员的”一文中的一些加强性的观点。（关于一些点评，请参看本文下篇）</p><p>为了让我的文章有连续性，请允许我重申一下前文的几个重要观点。</p><ul><li><strong>只有应聘者真实和自然的表现，才能了解到最真实的东西</strong></li><li><strong>重要的不是知识，重要的是其查找知识的能力</strong></li><li><strong>重要的不是那个解题的答案，而是解题的思路和方法</strong></li></ul><blockquote><p><strong>操作，知识，经验，能力</strong></p></blockquote><p>我们有很多的面试官似乎分不清，什么是操作能力，什么是知识，什么是经验，什么是能力，这导致了我们的面试官经常错误地对面试者下结论，我认为分不清这些事的人是没有资格做面试官的。所以，我有必要在这里把这个问题先讲清楚。</p><ul><li><strong>操作</strong>。我们的面试官分不清楚什么是操作技能，什么是知识，他们甚至认为操作技能就是知识甚至经验。比如他们会问如下的问题，请问:Java中的final是什么意思？怎么查看进程的CPU利用率？怎么编写一个管道程序？怎么查看进程的程序路径？VI中的拷贝粘贴命令是什么？包括面向对象的XX模式是什么。等等。我以为，<strong>这些能够通过查况相关操作手册或是能够google到的东西只能说明这个人的操作技术，并不能说明他有知识或有经验。</strong></li><li><strong>知识</strong>。知识是一个人认知和学习的体现，可能会是一些基础概念和知识。比如这些问题：TCP和UDP的优缺点比较，链表和哈希表的优缺点的比较。什么是堆什么是栈？进程间是怎么通信的？进程和线程的优缺点？同步和异步的优缺点？面向对象的XX设计模式的主要原则是什么，等等。我以为，<strong>“知其然”只是操作技术，”知其所以然”才是真正的知识</strong>。知识不够并不代表他不能工作，会操作技能就可以应付工作，但是知识的欠缺一定会限制你的经验和能力，同样会影响你的开发质量。</li><li><strong>经验</strong>。经验通常跟一个人的经历有关系。一个人的知识范围，一个人经历过的事，通常会成为一个人经验的体现。面试中，我们会问这些问题：你解决过最难的问题是什么？你是怎么设计这个系统的？你是怎么调试和测试你的程序的？你是怎么做性能调优的？什么样的代码是好的 代码？等等。对于工作年限不长的人来说，经历和做过的事的确会成为其经验的主要因素，尤其是业务上的有行业背景的东西。但是，我更以为，<strong>经验可能更多的是你对知识的运用和驾驭，是你对做过事情的反思和总结，是你对他人的学习，观察和交流。</strong></li><li><p><strong>能力</strong>。一个人的能力并不会因为知道东西少而不行，也不会因为没有经验而没有能力。<strong>一个人的能力是他做事情的一种态度，性格，想法，思路，行为，方法和风格。只要有热情，有想法，有好的行为方法，以及好的行事风格，那么知识和经验对他来说只是一个时间问题。</strong> 比如：学习能力，专研精神，分析能力，沟通能力，组织能力，问题调查能力，合作能力等等。所以，对于一个新手来说，也许他的知识和经验有限，但并不代表他能力上有问题，但是对于一个老手来说，如果其存在知识和经验欠缺的问题，那么通常都是其能力的问题。你可能暂时怀才不遇，但我不相信你会长期怀才不遇。如果是的话，那么你必然些问题其让你的能力发挥不出来。而此时，”没有经历过”只会是你”没有能力”的一个借口。<br>我不否认这四样东西对于一个优秀的程序员来说都很重要。但是，通过上述的分析，我们可以知道，能力和经验和知识需要分开对待。当然，这些东西是相辅相成的，<strong>你的能力可以让你获得知识，你的知识可以让你更有经验，你的经验又会改变你的想法和思路，从而改善你的能力。在面试中，我们需要清楚的认识到，应聘者的操作技能，知识和经验只是其能力的必要条件，并不是充要条件，而我们更应该关注于应聘者的能力。</strong></p></li><li><p>如果面试只是考查这个人的操作技能的话，那么这个面试完全失败。这是一个没有资格的面试官。</p></li><li>如果面试只是在考查这个人的知识和经验的话，那么成功了一半。因为你了解了基础知和做过的事，但这并不代表你完全了解他的真正能力。</li><li>如果你能够在了解这个人的知识和经验的过程中重点关注其能力（态度、性格、想法，思路，行为，方法和风格），并能正确地评估这个人的能力，那么你的面试算是非常成功的。</li></ul><p>也许用这四个词来描述定套东西并不太合适，但我相信你明白我想表达的。另外，我想说的是，<strong>我们不是出个题来考倒应聘者，而是要找到应聘者的亮点和长处。</strong></p><blockquote><p><strong>不要肤浅地认识算法题和智力题</strong></p></blockquote><p>很多公司都会在面试的时候给一些算法题或是一些智力题或是一些设计题，我相信算法题或是智力题是程序员们在面试过程中最反感的事了。很多人都很BS面试官问的算法题，因为他们认为面试官问的这些算法题或智力题在实际工作当中用不到。但我想在这里说，<strong>问难的算法智力题并没有错，错的很多面试官只是在肤浅甚至错误地理解着面试中的难题的目的。</strong>  他们认为，能做出算法题和智力题的人就是聪明的人就是有能力的人，这种想法实在是相当的肤浅。</p><p>其实，能解难题并不意味着这个人就有能力就能在工作中解决问题，你可以想想，小学奥数题可能比这些题更难，但并不意味着那些奥数能手就有实际工作能力。你可 以想一想你们班考试得高分的同学并不一定就是聪明的人，也不一定就是有能力的人，相反，这样的人往往者是在应试教育下培养出来的书呆子。</p><p>所以，我认为解难题的过程更重要，你要主要是通过解题查看这个应聘者的思路，方法，运用到的知识，有没有一些经验，和你一起交互时和沟通得是否顺畅，等等，这些才是你重点要去观察的。当然，最终是要找到答案的。</p><p>我想，让面试者解决一个难题的真正思路是：</p><ul><li><strong>看看他对知识的应用和理解。</strong> 比如，他是否会用一些基础的数据结构和算法来解决算法题？</li><li><strong>看看他的整个解题思路和想法。</strong> 答案是次要的，他的想法和行为才是重要的。</li><li><strong>看看他是如何和你讨论交流的。</strong> 把面试者当成你未来的同事，当成你的工作伙伴，一起解题，一起讨论，这样可以看看大家是否可以在一起工作。</li></ul><p>这些方面才是考查应聘者的能力（思路，方法、态度，性格等），并顺带着考查面试者的经验和知识。下面是一些面试的点：</p><ul><li>应聘者在解算法题时会不会分解或简化这个难题。这是分析能力。</li><li>应聘者在解算法题 时会不会使用一些基础知识，如数据结构和基础算法。这是知识。</li><li>应聘者在解题 时和你讨论的过程中你有没有感到应聘者的专研精神和良好的沟通。</li><li>应聘者在对待这个算法题的心态和态度。如，面试面是否有畏难情绪。</li><li>应聘者在解题时的思路和方法是否得当，是否是比较科学的方法？</li><li>等等。</li></ul><p><strong>在解难题 的过程中考查应聘者的能力才是最终目的，而不是为难应聘者，不然，你只是一个傲慢而无知的面试官。</strong></p><blockquote><p><strong>模拟实际中的挑战和能力</strong></p></blockquote><p>作为面试官的你，你应该多想想你的工作，以及你的成长经历。这会对你的面试很有帮助。你在工作中解决问题的实际情况是什么？你写代码的实际情况是什么？你的成长经历是什么？你是怎么获得知识和能力的？你喜欢和什么样的人工作？<strong>相信你不难会发现你工作中的实际情况和面试的情况完全是两码事，那么，你怎么可以用这种与实际情况差别那么大的面试来评估一个人的能力呢？</strong></p><p>所以，最为理想的面试是一起工作一段时间。当然，这个在招聘过程中，操作起来几乎不可能，因此，这就要求我们的面试官尽可能地把面试的过程模拟成平时工作的 过程。大家一些讨论来解决一个难题，和应聘者一起回顾一下他已经做过的事情，并在回础的过程中相互讨论相互学习。下面举一个例子。</p><p>我们知道，对于软件开发来说，开发软件不难，难是的下面是这些挑战：</p><ol><li>软件的维护成本远远大于软件的开发成本。</li><li>软件的质量变得越来越重要，所以，测试工作也变得越来越重要。</li><li>软件的需求总是在变的，软件的需求总是一点一点往上加的。</li><li>程序中大量的代码都是在处理一些错误的或是不正常的流程。</li></ol><p>所以，当我们在考查应聘者的代码能力时候，我们为什么不能模拟这样的过程呢？比如，让应聘者实现一个atoi()的函数，实现起来应该很简单，然后 不断地往上加新的需求或新的案例，比如：处理符号，处理非数字的字母的情况，处理有空格的情况，处理十六进制，处理二进制，处理“逗号”，等等，我们要看 应聘者是怎么修改他的代码的，怎么写测试案例的，怎么重构的，随着要处理的东西越来越多，他的代码是否还是那么易读和清晰。如果只是考查编码能力，一个小时，就问这一个问题，足矣。真正的程序员每天都在和这样的事打交道的。</p><p>如果要考查应聘者的设计能力，同样可以如法泡制。不断地加新的功 能，新的需求。看看面试者的思路，想法，分 析的方法，和你的讨论是否流畅，说没说在 点上，思想清不清晰，会应用什么样的知识，他在设计这个系统时的经验是会是什么样的，面对不断的修改和越来越复杂的需求，他的设计是否还是那么好？</p><p>当然，因为时间比较短，所以，你不能出太复杂的问题，这需要你精心设计一些精制的有代表性的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 编程思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows下Nginx实现负载均衡</title>
      <link href="/Nginx-Load-Balancing-under-Windows/"/>
      <url>/Nginx-Load-Balancing-under-Windows/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Nginx"><a href="#Apache-Nginx" class="headerlink" title="Apache,Nginx"></a>Apache,Nginx</h1><p>Apache和Nginx都属于属于 <strong>静态页面服务器</strong>，都有插件支持动态编程语言处理，但Nginx的IO模比Apache更适合跑代理。所以一般都作为<strong>前端缓冲代理</strong>(Nginx的反向代理功能)。<br><a id="more"></a></p><h1 id="Tomcat-Jetty"><a href="#Tomcat-Jetty" class="headerlink" title="Tomcat,Jetty"></a>Tomcat,Jetty</h1><p>tomcat和Jetty都是Java Servlet容器，可以用来生成动态页面，主要用来跑Java的Web功能，当然也提供一个简单静态页面转换：</p><ul><li>Jetty 是面向 Handler 的架构，就像 Spring 是面向 Bean 的架构，iBATIS 是面向 statement 一样，而 Tomcat 是以多级容器构建起来的，它们的架构设计必然都有一个“元神”，所有以这个“元神“构建的其它组件都是肉身</li><li>Jetty 可以很容易被扩展和裁剪，相比之下，Tomcat 要臃肿很多，Tomcat 的整体设计上很复杂</li></ul><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p><strong>tomcat的最大优势在于处理动态请求</strong>，处理静态内容的能力不如Apache和Nginx，并且经过测试发现，tomcat在高并发的场景下，其接受的最大并发连接数是由限制的，连接数过多会导致tomcat处于”僵死”状态，因此，在这种情况下，<strong>我们可以利用Nginx的高并发，低消耗的特点与tomcat一起使用</strong>。因此，tomcat与Nginx、Apache结合使用共有如下几点原因：</p><ol><li>Tomcat处理html的能力不如Apache和Nginx，tomcat处理静态内容的速度不如Apache和Nginx。</li><li>tomcat接受的最大并发数有限，接连接数过多，会导致tomcat处于”僵尸”状态，对后续的连接失去响应，需要结合Nginx一起使用。</li></ol><p>通常情况下，tomcat与Nginx、Apache结合使用，Nginx、Apache既可以作为 <strong>静态页面服务器</strong>，也可以 <strong>转发动态请求</strong> 至tomcat服务器上。但在一个高性能的站点上，通常Nginx、Apache只提供代理的功能，也就是转发请求至tomcat服务器上，而对于静态内容的响应，则由前端 <strong>负载均衡</strong> 器来转发至专门的静态服务器上进行处理。其架构类似于如下图：</p><p><img src="https://images.morethink.cn/morethink/images/tomcat-redis-nginx.png" alt="tomcat-redis-Nginx" title="负载均衡"></p><p>在这种架构中:</p><ul><li>Nginx作为前端代理时，如果是静态内容，如html、css等内容，则直接交给静态服务器处理；如果请求的图片等内容，则直接交给图片服务器处理。</li><li>如果请求的是动态内容，则交给tomcat服务器处理。</li></ul><p>因此在这里，我们通过用Nginx作为代理服务器来转发来自前端的请求，</p><h1 id="安装多个Tomcat"><a href="#安装多个Tomcat" class="headerlink" title="安装多个Tomcat"></a>安装多个Tomcat</h1><ol><li>修改Tomcat端口为:8081，8082(在同一台电脑上，避免端口冲突)</li></ol><table><thead><tr><th></th><th>SHUTDOWN</th><th>HTTP/1.1</th><th>redirectPort</th><th>AJP/1.3</th><th>redirectPort</th></tr></thead><tbody><tr><td>默认</td><td>8005</td><td>8080</td><td>8443</td><td>8009</td><td>8443</td></tr><tr><td>Tomcat7.1</td><td>8101</td><td>8081</td><td>-</td><td>8009</td><td>-</td></tr><tr><td>Tomcat7.2</td><td>8102</td><td>8082</td><td>-</td><td>8009</td><td>-</td></tr></tbody></table><ol start="2"><li><p>在两个Tomcat中context.xml中加入(与<code>redis</code>客户端交互)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.radiadesign.catalina.session.RedisSessionManager"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">host</span>=<span class="string">"localhost"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">port</span>=<span class="string">"6379"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">database</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">maxInactiveInterval</span>=<span class="string">"60"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>两个Tomcat中加入jar包</p><ul><li>commons-pool2-2.4.2.jar</li><li>jedis-2.7.3.jar</li><li>tomcat-redis-session-manager-1.2-tomcat-7-java-7.jar</li></ul></li></ol><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>安装redis(Google，百度一下redis作为nosql，但是下载我的redis版本，在最后)，看一下bin下的RedisService.docx</p><h1 id="Windows下Nginx命令"><a href="#Windows下Nginx命令" class="headerlink" title="Windows下Nginx命令"></a>Windows下Nginx命令</h1><ol><li>启动<br>直接点击Nginx目录下的Nginx.exe 或者 cmd运行start Nginx</li><li>关闭<br>Nginx -s stop    或者    Nginx -s quit<br>stop表示立即停止Nginx,不保存相关信息<br>quit表示正常退出Nginx,并保存相关信息</li><li>重启(因为改变了配置,需要重启)<br>Nginx -s reload</li><li>关闭进程<br>tskill Nginx</li></ol><h1 id="Nginx负载均衡配置"><a href="#Nginx负载均衡配置" class="headerlink" title="Nginx负载均衡配置"></a>Nginx负载均衡配置</h1><p>在Nginx.conf配置文件中加入注释部分</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  upstream  localhost   &#123;</span><br><span class="line">#     server   localhost:8081;</span><br><span class="line">#     server   localhost:8082;</span><br><span class="line">#  &#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">  #     proxy_pass        http://localhost;</span><br><span class="line">  #     proxy_set_header   Host             $host;</span><br><span class="line">  #     proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">  #     proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>在两个Tomcat中的webapps下的ROOT下加入一个session.jsp</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%=session.getId()%&gt; + Tomcat7.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%=session.getId()%&gt; + Tomcat7.2</span><br></pre></td></tr></table></figure><ol start="2"><li>依次运行redis，Tomcat，Nginx</li></ol><p><img src="https://images.morethink.cn/session-test1.jpg" alt="session-test1"></p><p><img src="https://images.morethink.cn/session-test2.jpg" alt="session-test2"></p><p><strong>成功</strong><br>jar包，redis，Nginx，Tomcat ： <a href="http://pan.baidu.com/s/1c1NSPzU" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1NSPzU</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="Tomcat9配置"><a href="#Tomcat9配置" class="headerlink" title="Tomcat9配置"></a>Tomcat9配置</h2><p>最开始，我采用的是Tomcat9，在我安装的时候总是有问题，很多东西已经改了，tomcat9安装来安装去，结果都是同一个Tomcat，有时候版本高就是有点坑。</p><p><strong>Tomcat9必须要配置 <code>CATALINA_HOME</code></strong></p><p>问题 ：</p><ol><li>必须配置CATALINA_HOME变量，不然就闪退，但是如果配置就打开了自己的用的Tomcat，不是需要测试的Tomcat,结果是加的东西改变了他的属性</li></ol><p>具体配置参考 ： <a href="https://my.oschina.net/ihanfeng/blog/286062" target="_blank" rel="noopener">windows下安装多个tomcat服务</a></p><ol><li><strong>安装服务</strong><br>在命令行中进入/Tomcat路径/bin/，执行“service.bat install”：<br>说明：<ol><li>服务名和显示名称：service.bat中设置了默认的服务名称，不同版本分别命名为Tomcat4、Tomcat5、Tomcat6，如果需要自 定义服务名或服务的显示名称，可在service.bat中修改SERVICE_NAME或PR_DISPLAYNAME；</li><li>防火墙的影响：/bin/tomcat6.exe（或tomcat4.exe、tomcat5.exe）将被作为服务程序，如果有防火墙，需要设为允许作为服务。</li></ol></li><li><strong>卸载服务</strong><br>在命令行中进入/Tomcat路径/bin/，执行“service.bat remove”：</li></ol><h2 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h2><p>jar包是一个很大的问题，有些jar包不支持(错误为仔细记录)，而且Tomcat-session jar的实现版本也不一样。</p><p><strong>不过正因为踩了坑，才更有趣，不是吗</strong>？</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC实现PUT请求上传文件</title>
      <link href="/SpringMVC-Achieve-RESTful-And-Put-With-File-Upload/"/>
      <url>/SpringMVC-Achieve-RESTful-And-Put-With-File-Upload/</url>
      
        <content type="html"><![CDATA[<p>在JQuery中，我们可以进行REST ful中delete和put的请求，但是在java EE标准中，默认只有在POST请求的时候，servlet 才会通过getparameter()方法取得请求体中的相应的请求参数的数据。而PUT，delete请求的请求体中数据则默认不会被解析。</p><a id="more"></a><ol><li>关于delete请求：delete请求用来从服务器上删除资源。因此我们只需要把要删除的资源的ID上传给服务器，即使是批量删除的时候，也可以通过URL传参的方式将多个id传给servlet，因此，可以满足我们的需求，可以直接发送请求。</li><li>关于put请求(指的是带有请求体)<ol><li>没有文件时：SpringMVC提供了一个将post转换为put和delete的方法，通过在web.xml中注册一个HiddenHttpMethodFilter过滤器。</li><li>上传文件时：我们可以通过在web.xml中注册一个MultipartFilter，<strong>一定要在HiddenHttpMethodFilter之前</strong>。</li></ol></li></ol><h1 id="SpringMVC实现PUT-DELETE请求"><a href="#SpringMVC实现PUT-DELETE请求" class="headerlink" title="SpringMVC实现PUT,DELETE请求"></a>SpringMVC实现PUT,DELETE请求</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们看源码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"POST"</span>.equals(request.getMethod()) &amp;&amp; StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">HttpServletRequest wrapper = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">filterChain.doFilter(wrapper, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>this.methodParam属性被默认初始化为”<code>_method</code>“，通过<code>request.getParameter(this.methodParam);</code>判断是put还是delete，</li><li><code>&quot;POST&quot;.equals(request.getMethod())</code>，而且必须要求是post方式提交的，</li><li>然后它把request进行包装后传给下一个filter。</li><li>因此，我们需要在提交的时候添加一个字段</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"formData"</span> <span class="attr">name</span>=<span class="string">"formData"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在<code>$.ajax</code>中<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"post"</span>,<span class="comment">//请求方式</span></span><br><span class="line">        url: <span class="string">""</span>,  <span class="comment">//发送请求地址</span></span><br><span class="line">        timeout: <span class="number">30000</span>,<span class="comment">//超时时间：30秒</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            <span class="string">"username"</span>: $(<span class="string">'#username'</span>).val(),</span><br><span class="line">            <span class="string">"password"</span>: $(<span class="string">"#password"</span>).val(),</span><br><span class="line">            <span class="string">"_method"</span>: <span class="keyword">delete</span></span><br><span class="line">        &#125;,</span><br><span class="line">        dataType: <span class="string">"json"</span>,<span class="comment">//设置返回数据的格式</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//请求出错的处理</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们就可以在后台<code>@RequestMapping(value = &quot;&quot;, method = RequestMethod.PUT)</code>注解中标识我们的方法，最后就可以成功地获得数据。</p><h1 id="SpringMVC实现PUT请求上传文件"><a href="#SpringMVC实现PUT请求上传文件" class="headerlink" title="SpringMVC实现PUT请求上传文件"></a>SpringMVC实现PUT请求上传文件</h1><p>可是后来我又有遇到另外一个需求那就是修改的时候需要传送文件到put方法中，于是这种方法就不可行了，但是我在<code>HiddenHttpMethodFilter</code>源码中看到这样一句话<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;&lt;b&gt;NOTE: This filter needs to run after multipart processing in case of a multipart</span><br><span class="line">* POST request, due to its inherent need for checking a POST body parameter.&lt;/b&gt;</span><br><span class="line">* So typically, put a Spring &#123;@link org.springframework.web.multipart.support.MultipartFilter&#125;</span><br><span class="line">* &lt;i&gt;before&lt;/i&gt; this HiddenHttpMethodFilter in your &#123;@code web.xml&#125; filter chain.</span><br></pre></td></tr></table></figure></p><p>和MultipartFilter源码中这样的注释<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Set the bean name of the MultipartResolver to fetch from Spring&apos;s</span><br><span class="line"> * root application context. Default is &quot;filterMultipartResolver&quot;.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><ol><li><p>也就是说我们可以通过在web.xml中注册一个MultipartFilter，<strong>一定要在HiddenHttpMethodFilter之前</strong>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MultipartFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.multipart.support.MultipartFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MultipartFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后再在Spring的 root application context中添加如下代码</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterMultipartResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"209715200"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>FormData对象是html5的一个对象，目前的一些主流的浏览器都已经兼容。FormData对象是html5的一个对象，目前的一些主流的浏览器都已经兼容。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">"tf"</span>));</span><br><span class="line">    form.append(<span class="string">"_method"</span>, <span class="string">'put'</span>);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        data: form,</span><br><span class="line">        processData: <span class="literal">false</span>,</span><br><span class="line">        contentType: <span class="literal">false</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.clearInterval(timer);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"over.."</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"错误！！"</span>);</span><br><span class="line">            <span class="built_in">window</span>.clearInterval(timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    get();<span class="comment">//此处为上传文件的进度条</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"tf"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"formDada"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提"</span> <span class="attr">onclick</span>=<span class="string">"test()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最后，就可以实现将文件上传提交给put方法。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Servlet 浅析</title>
      <link href="/Servlet/"/>
      <url>/Servlet/</url>
      
        <content type="html"><![CDATA[<p>在我们学习Servlet之前，有必要了解一下Web容器的工作模式</p><ol><li>我们所有的请求其实都是先到达了web容器，然后才分发给已经注册好的Servlet</li><li>请求由Servlet的service方法调用<code>doGet()</code>和<code>doPost()</code>进行反应。</li></ol><a id="more"></a><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>JSP的本质是一个Servlet类，他弥补了Servlet不好做界面的劣势。</p><h1 id="Servlet-工作原理解析"><a href="#Servlet-工作原理解析" class="headerlink" title="Servlet 工作原理解析"></a>Servlet 工作原理解析</h1><h1 id="url匹配和url-pattern"><a href="#url匹配和url-pattern" class="headerlink" title="url匹配和url-pattern"></a>url匹配和url-pattern</h1><p><strong>url的匹配</strong><br>当一个请求发送到servlet容器的时候，容器先会将请求的url减去当前应用上下文的路径作为servlet的映射url，比如我访问的是<a href="http://localhost/test/aaa.html，我的应用上下文是test，容器会将http://localhost/test去掉，剩下的/aaa.html部分拿来做servlet的映射匹配。这个映射匹配过程是有顺序的，而且当有一个servlet匹配成功以后，就不会去理会剩下的servlet了（filter不同，后文会提到）。其匹配规则和顺序如下：" target="_blank" rel="noopener">http://localhost/test/aaa.html，我的应用上下文是test，容器会将http://localhost/test去掉，剩下的/aaa.html部分拿来做servlet的映射匹配。这个映射匹配过程是有顺序的，而且当有一个servlet匹配成功以后，就不会去理会剩下的servlet了（filter不同，后文会提到）。其匹配规则和顺序如下：</a></p><ol><li>精确路径匹配。例子：比如servletA 的url-pattern为 /test，servletB的url-pattern为 /* ，这个时候，如果我访问的url为<a href="http://localhost/test" target="_blank" rel="noopener">http://localhost/test</a> ，这个时候容器就会先进行精确路径匹配，发现/test正好被servletA精确匹配，那么就去调用servletA，也不会去理会其他的servlet了。</li><li>最长路径匹配。例子：servletA的url-pattern为/test/<em>，而servletB的url-pattern为/test/a/</em>，此时访问<a href="http://localhost/test/a时，容器会选择路径最长的servlet来匹配，也就是这里的servletB。" target="_blank" rel="noopener">http://localhost/test/a时，容器会选择路径最长的servlet来匹配，也就是这里的servletB。</a></li><li>扩展匹配，如果url最后一段包含扩展，容器将会根据扩展选择合适的servlet。例子：servletA的url-pattern：*.action</li><li>如果前面三条规则都没有找到一个servlet，容器会根据url选择对应的请求资源。如果应用定义了一个default servlet，则容器会将请求丢给default servlet（什么是default servlet？后面会讲）。<br>根据这个规则表，就能很清楚的知道servlet的匹配过程，所以定义servlet的时候也要考虑url-pattern的写法，以免出错。</li></ol><p><strong>对于filter，不会像servlet那样只匹配一个servlet，因为filter的集合是一个链，所以只会有处理的顺序不同，而不会出现只选择一个filter。</strong>Filter的处理顺序和filter-mapping在web.xml中定义的顺序相同。</p><p><strong>url-pattern详解</strong><br>在web.xml文件中，以下语法用于定义映射：</p><ol><li>以”/’开头和以”/*”结尾的是用来做路径映射的。</li><li>以前缀”*.”开头的是用来做扩展映射的。</li><li>“/” 是用来定义default servlet映射的。</li><li>剩下的都是用来定义详细映射的。比如： /aa/bb/cc.action</li></ol><p>所以，为什么定义”/*.action”这样一个看起来很正常的匹配会错？因为这个匹配即属于路径映射，也属于扩展映射，导致容器无法判断</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><img src="./1476700589878.png" alt="Alt text"></p><h1 id="Servlet装载的三种情况："><a href="#Servlet装载的三种情况：" class="headerlink" title="Servlet装载的三种情况："></a>Servlet装载的三种情况：</h1><ol><li>自动装载：某些Servlet如果需要在Servlet容器启动时就加载，需要在web.xml下它的<code>&lt;Servlet&gt;</code>标签里中，添加优先级代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Servlet&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;load-on-startup&gt;</span><br><span class="line">&lt;/Servlet&gt;</span><br></pre></td></tr></table></figure></li></ol><p>数字越小表示该servlet的优先级越高，会先于其他自动装载的优先级较低的先装载,<strong>在SpringMVC中有这个配置</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.form<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>Servlet容器启动后，客户首次向某个Servlet发送请求时，Tomcat容器会加载它</li><li>当Servlet类文件被更新后，也会重新自动加载<br>Servlet是长期驻留在内存里的。某个Servlet一旦被加载，就会长期存在于服务器的内存里，直到服务器关闭<br>Servlet被装载后，Servlet容器通过反射创建一个Servlet实例并且调用Servlet的init()方法进行初始化。在Servlet的整个生命周期内，init()方法只被调用一次</li></ol><h1 id="Servlet得到JSP对象"><a href="#Servlet得到JSP对象" class="headerlink" title="Servlet得到JSP对象"></a>Servlet得到JSP对象</h1><p><img src="./1476789507228.png" alt="Alt text"></p><h1 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h1><p>为什么出现了Servlet3.0，一切的一切都是为了效率的提高，恰如，框架的出现。<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/" target="_blank" rel="noopener">Servlet 3.0 新特性详解</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSP与HTML及前后分离</title>
      <link href="/JSP%E4%B8%8EHTML%E5%8F%8A%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/"/>
      <url>/JSP%E4%B8%8EHTML%E5%8F%8A%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP是什么"><a href="#JSP是什么" class="headerlink" title="JSP是什么"></a>JSP是什么</h1><p>首先要知道JSP的本质其实是个Servlet，index.jsp在访问的时候首先会自动将该页面翻译生一个index_jsp.java文件，即Servlet代码。</p><p>打开这个类你会发现这个类继承了类<code>org.apache.jasper.runtime.HttpJspBase.SUN</code>在JSP API中定义了一个接口<code>HttpJspBase</code>,这个接口继承了<code>JspPage</code>接口，而JspPage接口又继承了Servlet接口，因此WEB容器必须实现这些接口。<code>org.apache.jasper.runtime.HttpJspBase</code>就是Tomcat对JSP API中HttpJspBase接口的实现。因此JSP页面在本质上就是Servlet程序，而Servlet程序要被WEB容器调用执行，必须在WEB.XML中注册映射，对于JSP，这些则由WEB容器自动完成。</p><a id="more"></a><h1 id="HTML是什么"><a href="#HTML是什么" class="headerlink" title="HTML是什么"></a>HTML是什么</h1><p>参考维基百科的定义：</p><blockquote><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计令人赏心悦目的网页、网页应用程序以及移动应用程序的用户界面[1]。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。</p><p>HTML元素是构建网站的基石。HTML允许嵌入图像与对象，并且可以用于创建交互式表单，它被用来结构化信息——例如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。HTML的语言形式为尖括号包围的HTML元素（如<html>），浏览器使用HTML标签和脚本来诠释网页内容，但不会将它们显示在页面上。</html></p><p>HTML可以嵌入如JavaScript的脚本语言，它们会影响HTML网页的行为。网页浏览器也可以引用层叠样式表（CSS）来定义文本和其它元素的外观与布局。维护HTML和CSS标准的组织万维网联盟（W3C）鼓励人们使用CSS替代一些用于表现的HTML元素[2]。</p></blockquote><h1 id="JSP-VS-HTML"><a href="#JSP-VS-HTML" class="headerlink" title="JSP VS HTML"></a>JSP VS HTML</h1><p><strong>JSP与Html相比，谁更适合做页面</strong>？</p><p>java的web开发里我们一般使用jsp来编写页面，当然也可以使用先进点的模板引擎开发页面例如velocity，freemark等，不管我们页面使用的是jsp还是模板引擎，这些类似html的文件其实并不是真正的html，例如jsp本质其实是个servlet也就是一个java程序，所以它们的本质是服务端语言和html的一个整合技术，在实际运行中web容器会根据服务端的返回数据将jsp或模板引擎解析成浏览器能解析的html，然后传输这个html到浏览器进行解析。</p><p>现在比较提倡前后分离，前后端通过API来相互连接，后端给出接口，前端通过AJAX访问接口，拿到数据，动态更新。</p><h1 id="前后分离"><a href="#前后分离" class="headerlink" title="前后分离"></a>前后分离</h1><p><strong>前后端分离是趋势，但是短时间内不可能取代不分离的</strong>。</p><p>因为前后分离导致：数据和表现分离，只需要静态的html和动态的接口（例如jsp），数据在浏览器端实现动态加载。因此存在问题，例如SEO，搜索引擎难以识别等，我们可以参考淘宝前端的设计，在 java 接口和 html 输出之前用 NodeJS 代理一层，暂时能解决 SEO 的问题。</p><p>理想情况是，先出文档（前后端都认可），然后后端、前端都按照文档来，一切以接口规定的为准。 重点在于接口！靠 API 来分离前后端，解决前后端大团队、多版本、复杂功能协作的问题。定义好了接口，前端就可以用不用等后端，直接用模拟的数据格式，方便地进行前端测试了。</p><p>前端可以通过Nginx来解决跨域问题。<br>具体可以查看 <a href="https://www.morethink.cn/Nginx-Cross-Domain/">前端通过Nginx反向代理解决跨域问题</a></p><p>说重点，API 相比前后端混写、模板引擎之类的东西的好处：</p><ul><li>方便设计、开发、测试（前端不再需要依赖后端，后端也不需要依赖前端，就可以各干各的，独立测试代码）</li><li>方便记录和统计功能使用（后端相同功能的入口位置统一，不同功能的位置也可以合理有序地组织）</li><li>方便修改和版本控制等（后端可以提供多版本的 API，不需要修改已有代码，不影响已有 API 的功能）</li><li><strong>最重点的是</strong>：<br>你的Team要是分工不明确、人少、功能简单直接、代码修改不多，就完全不需要分离，就酱。</li><li><strong>最明显的</strong>：<br>前端代码不用被后端粘贴来粘贴去了，后端的相同代码，也不需要各种位置粘贴来粘贴去了。</li><li><strong>隐藏的好处</strong>：<br>到时候出了问题，照着 API 设计文档一对比，就知道是前端用的不对，还是后端写的不对，分分钟找到背锅侠。</li><li>可以一套接口，浏览器，Android通用，极大减少开发量。</li></ul><h1 id="RESTFul-API"><a href="#RESTFul-API" class="headerlink" title="RESTFul API"></a>RESTFul API</h1><p>我们知道前后分离之后是靠API统一前后端的开发，<strong>而RESTFul API目前是前后端分离的最佳实践</strong>。</p><p>它有如下好处：</p><ul><li>轻量，直接通过http，不需要额外协议，post/get/put/delete操作</li><li>面向资源，一目了然，具有自解释性</li><li>数据描述简单，一般通过json或者xml做数据通信</li></ul><p>下面参考阮一峰的博客解释一下RESTful架构。</p><p>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p><h2 id="资源（Resources）"><a href="#资源（Resources）" class="headerlink" title="资源（Resources）"></a>资源（Resources）</h2><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p><p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p><h2 id="表现层（Representation）"><a href="#表现层（Representation）" class="headerlink" title="表现层（Representation）"></a>表现层（Representation）</h2><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><h2 id="状态转化（State-Transfer）"><a href="#状态转化（State-Transfer）" class="headerlink" title="状态转化（State Transfer）"></a>状态转化（State Transfer）</h2><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p><h2 id="总结RESTful架构"><a href="#总结RESTful架构" class="headerlink" title="总结RESTful架构"></a>总结RESTful架构</h2><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><ol><li><strong>每一个URI代表一种资源</strong>；</li><li><strong>客户端和服务器之间，传递这种资源的某种表现层</strong>；</li><li><strong>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”</strong>。</li></ol><h1 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h1><p>GraphQL是一种API查询语言，是由Facebook创建并最终开源的，可以认为是REST的一种替代品。来自AXA Banque的API架构师Lauret给出了一些可对二者进行比较的切入点：</p><ul><li>GraphQL能够通过一次查询得到所有需要的数据，从而减少网络跳转的次数。</li><li>GraphQL采用所见即所得模型，这样客户端代码不易出错。</li><li>RESTful HTTP通过使用状态码和HTTP verb，提高了结果的一致性和可预测性。</li><li>借助超媒体，在用户使用API时可以“发现”资源间的关系，这简化了RESTful用户的具体实现。</li><li>HTTP实现了缓存机制而GraphQL还没有实现。</li><li>GraphQL给用户提供了schema，这很有用，但是需要注意的是接口描述并非API文档。</li></ul><p><strong>Lauret认为GraphQL的主要优势是其使用的所见即所得(WYSIWYG)模型</strong>。也就是说，查询结果的结构是查询结构本身的精确映射，这样的话，用户在解排（unmarshal）响应的时候不容易出错。</p><p>有兴趣的朋友可以看看这两篇解释GraphQL的文章：</p><ul><li><a href="http://www.infoq.com/cn/news/2017/07/graphql-vs-rest#" target="_blank" rel="noopener">GraphQL和REST对比时需要注意些什么</a></li><li><a href="http://www.zcfy.cc/article/rest-apis-are-rest-in-peace-apis-long-live-graphql-3935.html" target="_blank" rel="noopener">安息吧 REST API，GraphQL 长存</a></li></ul><p><strong>我觉得GraphQL更多的是作为REST的一种替代品</strong>。</p><p><strong>参考文档</strong>：</p><ol><li><a href="http://blog.csdn.net/sdyy321/article/details/5838717" target="_blank" rel="noopener">JSP本质</a></li><li><a href="http://www.blogjava.net/fancydeepin/archive/2013/09/30/404571.html" target="_blank" rel="noopener">JSP/Servlet 工作原理</a></li><li><a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">HTML - 维基百科，自由的百科全书</a></li><li><a href="http://www.cnblogs.com/sharpxiajun/p/4282789.html" target="_blank" rel="noopener">关于大型网站技术演进的思考（九）–网站静态化处理–总述（1）</a></li><li><a href="https://segmentfault.com/q/1010000011514355" target="_blank" rel="noopener">这样是不是就叫 前后端分离开发了？</a></li><li><a href="http://2014.jsconf.cn/slides/herman-taobaoweb/index.html#/" target="_blank" rel="noopener">http://2014.jsconf.cn/slides/herman-taobaoweb/index.html#/</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>String解析</title>
      <link href="/String/"/>
      <url>/String/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>可以证明，字符串操作是计算机程序设计中最常见的行为。</strong><br>String对象是不可变的，查看JDK文档你就会发现，String类每一个看起来会修改String值得方法，实际上都是创建了一个全新的String对象，以包含修改后的字符串内容。而最初的string对象则丝毫未动。–Thinking in Java<br><a id="more"></a></p></blockquote><h1 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>;</span><br><span class="line">String str2 = <span class="string">"abc"</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String str5 = <span class="string">"abc"</span> + <span class="string">"li"</span>;</span><br><span class="line">String str6 = <span class="string">"abc"</span> + <span class="string">"li"</span>;</span><br><span class="line">String str7 = str1 + <span class="string">"li"</span>;</span><br><span class="line">String str8 = str1 + <span class="string">"li"</span>;</span><br><span class="line">String str9 = str1 + str2;</span><br><span class="line">String str10 = str1 + str2;</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);</span><br><span class="line">System.out.println(str3 == str4);</span><br><span class="line">System.out.println(str5 == str6);</span><br><span class="line">System.out.println(str7 == str8);</span><br><span class="line">System.out.println(str9 == str10);</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure></p><p>说明：</p><blockquote><p>在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。</p></blockquote><ol><li><p>我们再回头看看String str1 = “abc”;  , 这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为”abc”的这么一个对象，它的判断依据是String类equals(Object obj)方法的返回值。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。</p></li><li><p>new 就是在堆中重新分配了一块内存，虽然  str3  和  str4 内容相同，但它们指向的是不同的内存。</p></li><li><p>使用 “ + ”时，<br>“字符1 “ + “字符2” 在上面第一条已说明，<br>“字符1”+  引用 和<br>引用      + 引用  都将创建新的对象。</p><h1 id="String-相等"><a href="#String-相等" class="headerlink" title="String 相等 ?"></a>String 相等 ?</h1></li></ol><h2 id="引用相等："><a href="#引用相等：" class="headerlink" title="引用相等："></a>引用相等：</h2><p>“==”，通过“==”运算符来比较内存地址是否相等</p><p><code>C++String</code>类重载了==运算符以检测字符串内容的相等性。</p><h2 id="内容相等：equals-方法"><a href="#内容相等：equals-方法" class="headerlink" title="内容相等：equals 方法"></a>内容相等：equals 方法</h2><p>比较两个String对象的内容是否相同时是使用equals方法，equals方法是String类继承与Object类的，<br>在<strong>Object类的equals方法的本质其实是和“==”一样的，都是比较两个对象引用是否指向同一个对象</strong>（即两个对象是否为同一对象）。<br>那为什么String类的equals方法却又是比较两个String对象的内容是否相同呢？</p><p>原来是这样的，String类继承Object类后，也继承了equals方法，但String类对equals方法进行了重写，改变了equals方法的比较形式。其实很多其他类继承Object类后也对equals方法进行了重写。</p><p>jdk1.8.0_92  中String类中equals 方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h1><pre><code>代码点和代码单元</code></pre><p>字节是计算机存储信息的基本单位，<strong>1 个字节等于 8 位</strong>， <strong>gbk 编码中 1 个汉字字符存储需要 2 个字节</strong>，<strong>1 个英文字符存储需要 1 个字节</strong>。所以我们看到上面的程序运行结果中，每个汉字对应两个字节值，如“学”对应 “-47 -89” ，而英文字母 “J” 对应 “74” 。同时，我们还发现汉字对应的字节值为负数，原因在于每个字节是 8 位，最大值不能超过 127，而<strong>汉字转换为字节后超过 127，如果超过就会溢出，以负数的形式显示。</strong></p><h1 id="正则："><a href="#正则：" class="headerlink" title="正则："></a>正则：</h1><h2 id="String类自带正则表达式："><a href="#String类自带正则表达式：" class="headerlink" title="String类自带正则表达式："></a>String类自带正则表达式：</h2><p>public boolean matches(String regex)告知此字符串是否匹配给定的正则表达式。<br>调用此方法的 str.matches(regex) 形式与以下表达式产生的结果完全相同：<br>Pattern.matches(regex, str)</p><p>java 的 “ \ “等于其他语言的” \</p><h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><p>空串是一个对象</p><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><pre><code>public char **charAt**(int index)  </code></pre><p>返回指定索引处的char值</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
